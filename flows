from tshistory.api import timeseries
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px 
import numpy as np
from datetime import date, timedelta, datetime
from plotly.subplots import make_subplots

tsa = timeseries('http://tst-qdev-ap9.petroineos.local/api/')

from kpler.sdk.configuration import Configuration
from kpler.sdk import Platform
from kpler.sdk.resources.flows import Flows
from kpler.sdk import FlowsDirection, FlowsSplit, FlowsPeriod, FlowsMeasurementUnit, VesselTypesCPP

config = Configuration(Platform.Liquids, "mohammedhasan@petroineos.co.uk", "Distillates1!")
flows_client = Flows(config)

import dash
import plotly.io as pio
from dash.dependencies import Input, Output
from dash import Dash, dcc, html, dash_table
import dash_bootstrap_components as dbc
import plotly.graph_objects as go
import plotly.express as px
from threading import Timer
from dash_bootstrap_templates import load_figure_template
load_figure_template("pulse")


def fetch_kpler_data(flowdir, unit, product, origin, destination, split, start_date, end_date):
    if isinstance(destination, list):
        dfs = []
        for dest in destination:
            df = flows_client.get(
                flow_direction=flowdir,
                split=split,
                granularity=[FlowsPeriod.Monthly],
                unit=unit,
                start_date=start_date,
                end_date=end_date,
                with_intra_region="True",
                with_forecast="False", 
                with_intra_country="False",
                with_product_estimation="True",
                products=product,
                from_zones=origin,
                to_zones=dest,
            )
            df = df.set_index('Date')
            df.index = pd.to_datetime(df.index) 
            df = df.drop('Period End Date', axis=1)
            df["Total"] = df.sum(axis=1)
            dfs.append(df)
        combined_df = pd.concat(dfs).groupby(level=0).sum()
        return combined_df
    else:
        df = flows_client.get(
            flow_direction=flowdir,
            split=split,
            granularity=[FlowsPeriod.Monthly],
            unit=unit,
            start_date=start_date,
            end_date=end_date,
            with_intra_region="True",
            with_forecast="False", 
            with_intra_country="False",
            with_product_estimation="True",
            products=product,
            from_zones=origin,
            to_zones=destination,
        )
        df = df.set_index('Date')
        df.index = pd.to_datetime(df.index)  
        df = df.drop('Period End Date', axis=1)
        df["Total"] = df.sum(axis=1)
        return df

def fetch_and_calculate_changes(flowdir, unit, product, origin, destination, split, start_date, end_date):
    df = fetch_kpler_data(flowdir, unit, product, origin, destination, split, start_date, end_date)
    
    # Calculate Month-on-Month (MoM) and Year-on-Year (YoY) changes
    df['MoM Change'] = df['Total'].pct_change() * 100
    df['YoY Change'] = df['Total'].pct_change(12) * 100
    
    return df

def fetch_line_data(series_id, col_name, start_date, end_date):
    line_df = tsa.get(series_id)
    line_df = pd.DataFrame(line_df)

    min_date, max_date = line_df.index.min(), line_df.index.max()
    print(f"Date range for fetched data: {min_date} to {max_date}")    
    
    print(f"Complete data fetched for series ID '{series_id}':\n", line_df)

    line_df = line_df.rename(columns={series_id: col_name})
    line_df = line_df.reset_index().rename(columns={'index': 'Date'})
    line_df['Date'] = pd.to_datetime(line_df['Date'])
    line_df = line_df[(line_df['Date'] >= start_date) & (line_df['Date'] <= end_date)]
    print(f"Processed data for series ID '{series_id}':\n", line_df.tail())

    return line_df

#=========================================================================== COMBI LINE CHARTS ===========================================================================#
def plot_combined_data(bar_df, line_df, product, origin, destination, bar_yaxis_title='Volume', line_yaxis_title='Price', line_shift=0):
    fig = go.Figure()

    columns_to_plot = [col for col in bar_df.columns if col != 'Total']

    # Convert the bar dataframe from wide to long format
    bar_df_long = bar_df.reset_index().melt(id_vars=['Date'], value_vars=columns_to_plot, 
                                            var_name='Net Exports', value_name=bar_yaxis_title)

    # Grouping the data to show only top 10 categories and group others as 'Others'
    top_10_categories = bar_df_long.groupby('Net Exports')[bar_yaxis_title].sum().nlargest(7).index
    bar_df_long['Net Exports'] = bar_df_long['Net Exports'].apply(lambda x: x if x in top_10_categories else 'Others')

    # Add bar chart traces
    for category in bar_df_long['Net Exports'].unique():
        df_filtered = bar_df_long[bar_df_long['Net Exports'] == category]
        fig.add_trace(go.Bar(x=df_filtered['Date'], y=df_filtered[bar_yaxis_title], name=category))

    # Apply the shift to the line chart values if necessary
    line_df[line_yaxis_title] = line_df[line_yaxis_title] + line_shift

    # Add line chart trace
    fig.add_trace(go.Scatter(x=line_df['Date'], y=line_df[line_yaxis_title], mode='lines', name=f'{product} Price', line=dict(dash='solid', color='red')))

    # Update layout
    fig.update_layout(
        title=f'{origin} to {destination} Net Exports and Price for {product}',
        xaxis_title='Date',
        yaxis_title=f'{bar_yaxis_title} / {line_yaxis_title}',
        barmode='relative',
        plot_bgcolor='white',
        xaxis=dict(showline=True, linewidth=2, linecolor='black', title_font=dict(size=14)),
        yaxis=dict(showline=True, linewidth=2, linecolor='black', title_font=dict(size=14))
    )

    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')

    return fig

#=========================================================================== LINE CHARTS ===========================================================================#
def plot_superimposed_lines(data_list, titles, origin, yaxis_title='Value'):
    fig = go.Figure()
    colors = ['#98c1d9', '#84a98c', '#3d5a80', '#00afb9', '#ee6c4d', '#293241', '#f28482']
    
    for i, (data, title) in enumerate(zip(data_list, titles)):
        fig.add_trace(go.Scatter(x=data['Date'], y=data.iloc[:, 1], mode='lines', name=title, line=dict(color=colors[i % len(colors)], width=2), showlegend=True, connectgaps=True))

    fig.update_layout(
        title=f'Superimposed Data from {origin} to Various Regions',
        xaxis_title='Date',
        yaxis_title=yaxis_title,
        plot_bgcolor='white',
        xaxis=dict(showline=True, linewidth=2, linecolor='black', title_font=dict(size=14)),
        yaxis=dict(showline=True, linewidth=2, linecolor='black', title_font=dict(size=14))
    )
    
    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    return fig

#=========================================================================== MoM and YoY CHANGES ===========================================================================#
def plot_changes_with_two_yaxes(bar_df, line_df, product, origin, destination, bar_yaxis_title='Change (%)', line_yaxis_title='Price', line_shift=0):
    # Create figure with secondary y-axis
    fig = make_subplots(specs=[[{"secondary_y": True}]])

    # Filter columns to plot
    columns_to_plot = ['MoM Change', 'YoY Change']

    # Add bar chart traces for MoM and YoY changes
    for col in columns_to_plot:
        fig.add_trace(
            go.Bar(x=bar_df.index, y=bar_df[col], name=col),
            secondary_y=False,
        )

    # Apply the shift to the line chart values if necessary
    if line_yaxis_title in line_df.columns:
        line_df[line_yaxis_title] = line_df[line_yaxis_title] + line_shift

        # Add line chart trace
        fig.add_trace(
            go.Scatter(x=line_df['Date'], y=line_df[line_yaxis_title], mode='lines', name=f'{product} Price', line=dict(dash='solid', color='red')),
            secondary_y=True,
        )
    else:
        print(f"Warning: Column '{line_yaxis_title}' not found in line_df for series '{product} Price'")

    # Update layout
    fig.update_layout(
        title=f'{product} Net Exports MoM and YoY Changes and Price from {origin} to {destination}',
        xaxis_title='Date',
        plot_bgcolor='white',
        xaxis=dict(showline=True, linewidth=2, linecolor='black', title_font=dict(size=14)),
    )

    # Set y-axes titles
    fig.update_yaxes(title_text=bar_yaxis_title, secondary_y=False)
    fig.update_yaxes(title_text=line_yaxis_title, secondary_y=True)

    # Enhance gridlines
    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray', secondary_y=False)
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray', secondary_y=True)

    return fig

#=========================================================================== DIFFS ===========================================================================#
def calculate_differences(data_list, regions, value_col='Total'):
    differences = {}
    for i, region1 in enumerate(regions):
        for j, region2 in enumerate(regions):
            if i < j:
                df1 = data_list[i].set_index('Date')[value_col]
                df2 = data_list[j].set_index('Date')[value_col]
                diff = df1 - df2
                key = f'{region1} - {region2}'
                differences[key] = diff.reset_index()
    return differences

def plot_region_differences(differences, region, yaxis_title='Difference'):
    fig = go.Figure()
    colors = [
        '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', 
        '#7f7f7f', '#bcbd22', '#17becf', '#393b79', '#637939', '#8c6d31', '#843c39',
        '#7b4173', '#a55194', '#ce6dbd', '#de9ed6', '#6b6ecf', '#9c9ede', '#b5cf6b', 
        '#cedb9c', '#e7ba52', '#e7969c', '#e6550d', '#fd8d3c', '#fdae6b', '#31a354', 
        '#c7e9c0', '#756bb1', '#dadaeb', '#d6616b', '#ff9896', '#1f78b4', '#b2df8a',
        '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', 
        '#ffff99', '#b15928', '#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', 
        '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2'
    ]   
    for i, (key, diff_df) in enumerate(differences.items()):
        if region in key:
            fig.add_trace(go.Scatter(x=diff_df['Date'], y=diff_df.iloc[:, 1], mode='lines', name=key, line=dict(color=colors[i % len(colors)], width=2), showlegend=True, connectgaps=True))

    fig.update_layout(
        xaxis_title='Date',
        yaxis_title=yaxis_title,
        plot_bgcolor='white',
        xaxis=dict(showline=True, linewidth=2, linecolor='black', title_font=dict(size=14)),
        yaxis=dict(showline=True, linewidth=2, linecolor='black', title_font=dict(size=14))
    )
    
    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    return fig

def plot_correlation_heatmap(df, title='Correlation Heatmap'):
    # Compute the correlation matrix
    corr_matrix = df.corr()

    # Create the heatmap using Plotly Express
    fig = px.imshow(corr_matrix,
                    text_auto='.2f',  # Format the values to 2 significant figures
                    color_continuous_scale='Viridis',
                    title=title)

    # Update layout for better readability
    fig.update_layout(
        title=title,
        xaxis_title='Variables',
        yaxis_title='Variables',
        plot_bgcolor='white',
        autosize=False,
        width=1500,
        height=1300,
        margin=dict(l=200, r=200, t=200, b=200)
    )

    # Update x and y axis tickfont for larger labels
    fig.update_xaxes(tickfont=dict(size=15))
    fig.update_yaxes(tickfont=dict(size=15))
    
    return fig

def calculate_changes(df, value_col='Total'):
    df = df.copy()
    df['MoM Change'] = df[value_col].pct_change() * 100  # Month-over-Month change in percentage
    df['YoY Change'] = df[value_col].pct_change(periods=12) * 100  # Year-over-Year change in percentage
    return df

#=========================================================================== SEASONAL PLOTS ===========================================================================#
def lines_seag(df, col):
    
    # df.index = pd.to_datetime(df.index)  # Added in lines_seag function
    df = df[[col]]
   
    df["Day of Year"] = df.index.day_of_year
    df["Year"] = df.index.year
    df["DaysAdd"] = pd.to_timedelta(df["Day of Year"], "d")
    df["Day of Year_M"] = date(2023,12,31)
    df["Day of Year_M"] = df["Day of Year_M"] + df["DaysAdd"]
    df = df.set_index('Day of Year_M')
    df = df.pivot(columns='Year', values=col)
    #df["Day of Year_M"] = pd.to_datetime(df["Day of Year_M"]).dt.strftime("%b")
    #df.index = pd.to_datetime(df.index).strftime("%b")
    return df
 
def plotter_seag(df, title):
 
    fig = go.Figure()
 
    # Scatter plot for the minimum values
    fig.add_trace(go.Scatter(x=df.index, y=df[2019], mode='lines', name='2019', line=dict(color='#98c1d9', width=1), showlegend=True, connectgaps=True))
    fig.add_trace(go.Scatter(x=df.index, y=df[2020], mode='lines', name='2020', line=dict(color='#84a98c', width=1), showlegend=True, connectgaps=True))
    fig.add_trace(go.Scatter(x=df.index, y=df[2021], mode='lines', name='2021', line=dict(color='#3d5a80', width=2), showlegend=True, connectgaps=True))
    fig.add_trace(go.Scatter(x=df.index, y=df[2022], mode='lines', name='2022', line=dict(color='#00afb9', width=2), showlegend=True, connectgaps=True))
    fig.add_trace(go.Scatter(x=df.index, y=df[2023], mode='lines', name='2023', line=dict(color='#ee6c4d', width=3), showlegend=True, connectgaps=True))
    fig.add_trace(go.Scatter(x=df.index, y=df[2024], mode='lines', name='2024', line=dict(color='#293241', width=3), showlegend=True, connectgaps=True))
 
   
 
 
    fig.update_layout(title=title,
                    xaxis_title='Month',
                    yaxis_title='',
                    width=600,
                    height=400)
    fig.update_xaxes(
    dtick="M1",
    tickformat="%b")
 
    return fig


#=========================================================================== LIBRARY ===========================================================================#
start_kpler = date(2019, 1, 1)
end_kpler = date(2024, 7, 1)

start_incentive = date(2019, 1, 1)
end_incentive = date(2026, 7, 1)

start_kpler = pd.to_datetime(start_kpler)
end_kpler = pd.to_datetime(end_kpler)

start_incentive = pd.to_datetime(start_incentive)
end_incentive = pd.to_datetime(end_incentive)

kbd = [FlowsMeasurementUnit.KBD]
net_imports = [FlowsDirection.NetImport]
net_exports = [FlowsDirection.NetExport]

country_origin = [FlowsSplit.OriginCountries]
destination_origin = [FlowsSplit.DestinationCountries]

#=========================================================================== QUERIES ===========================================================================#
''''
Incentive origin options:
    arab_gulf
    india
    red_sea

Kpler origin options: 
    Mideast Gulf
    Red Sea
    India
'''
origin = 'India'
base_series_id = 'incentive.ulsd_india_to_ukc.usd_t.monthly'
regions = ['ukc', 'eafr', 'latam', 'med', 'spore', 'wafr']
countries = {
    'ukc': ['United Kingdom', 'North West Europe Zone'],
    'eafr': 'Eastern Africa',
    'latam': 'Latin America',
    'med': 'MED Sea',
    'spore': 'Singapore',
    'wafr': 'Western Africa'
}

# Generate the line chart queries
line_chart_queries = [(base_series_id.replace('ukc', region), 'Price', start_incentive, end_incentive) for region in regions]

# Generate the bar chart queries
bar_chart_queries = [(net_exports, kbd, 'ULSD', origin, countries[region], f'Net Exports to {countries[region]}', country_origin, start_kpler, end_kpler) for region in regions]

#=========================================================================== COMBI RUNS ===========================================================================#
bar_figures = []
for bar_query, line_query in zip(bar_chart_queries, line_chart_queries):
    flowdir, unit, product, origin, destination, bar_title, split, start_date, end_date = bar_query
    bar_df = fetch_kpler_data(flowdir, unit, product, origin, destination, split, start_kpler, end_kpler)
    
    series_id, col_name, start_date, end_date = line_query
    line_df = fetch_line_data(series_id, col_name, start_date, end_date)
    
    fig = plot_combined_data(bar_df, line_df, product, origin, destination, bar_yaxis_title='Volume', line_yaxis_title=col_name, line_shift=0)
    bar_figures.append(fig)

#=========================================================================== LINE RUNS ===========================================================================#
region_titles = [f'{countries[region]}' if isinstance(countries[region], str) else 'United Kingdom & North West Europe Zone' for region in regions]

line_chart_data = []
for line_query in line_chart_queries:
    series_id, col_name, start_date, end_date = line_query
    line_df = fetch_line_data(series_id, col_name, start_incentive, end_incentive)
    line_chart_data.append(line_df)

bar_chart_data = []
bar_titles = []  # Store bar titles here
for bar_query in bar_chart_queries:
    flowdir, unit, product, origin, destination, bar_title, split, start_date, end_date = bar_query
    bar_df = fetch_kpler_data(flowdir, unit, product, origin, destination, split, start_date, end_date)
    bar_chart_data.append(bar_df)
    bar_titles.append(bar_title)  

#=========================================================================== SEASONAL RUNS ===========================================================================#
# Iterate over each region (i.e., each DataFrame in the list)
seasonal_exports_figures = []

for i, df in enumerate(bar_chart_data):
    
    bar_title = bar_titles[i]  
    seasonal_exports = lines_seag(df, 'Total')
    
    seasonal_exports_fig = plotter_seag(seasonal_exports, f'Seasonal {bar_title}')
    seasonal_exports_figures.append(seasonal_exports_fig)

#=========================================================================== CHANGES RUNS ===========================================================================#
changes_figures = []
for bar_query, line_query in zip(bar_chart_queries, line_chart_queries):
    flowdir, unit, product, origin, destination, bar_title, split, start_date, end_date = bar_query
    bar_df = fetch_and_calculate_changes(flowdir, unit, product, origin, destination, split, start_date, end_date)
    
    series_id, col_name, start_date, end_date = line_query
    line_df = fetch_line_data(series_id, col_name, start_date, end_date)
    
    fig = plot_changes_with_two_yaxes(bar_df, line_df, product, origin, destination, bar_yaxis_title='Change (%)', line_yaxis_title=col_name, line_shift=0)
    changes_figures.append(fig)


#=========================================================================== PLOTTING ===========================================================================#
# Superimposed Incentive Prices Plot
superimposed_incentives_fig = plot_superimposed_lines(line_chart_data, region_titles, origin, yaxis_title='Price')

# Superimposed Export Flows Plot
superimposed_exports_fig = plot_superimposed_lines([df.reset_index().rename(columns={'index': 'Date'})[['Date', 'Total']] for df in bar_chart_data], region_titles, origin, yaxis_title='Volume')

#=========================================================================== DIFFS PLOTS  ===========================================================================#
# Calculate differences in incentives
incentive_differences = calculate_differences(line_chart_data, regions, value_col='Price')

# Calculate differences in exports
export_differences = calculate_differences([df.reset_index().rename(columns={'index': 'Date'}) for df in bar_chart_data], regions)

# Generate the plots for each region
region_plots = {}
for region in regions:
    region_plots[f'{region}_incentive_diff'] = plot_region_differences(incentive_differences, region, yaxis_title='Price Difference')
    region_plots[f'{region}_export_diff'] = plot_region_differences(export_differences, region, yaxis_title='Volume Difference')

#=========================================================================== HEATMAP CORR  ===========================================================================#

combined_data = pd.DataFrame()

for i, region in enumerate(regions):
    line_df = line_chart_data[i].reset_index()
    bar_df = bar_chart_data[i].reset_index()

    # Replace zero exports with NaN, but only after checking if this is necessary
    if 'Total' in bar_df.columns:
        bar_df['Total'].replace(0, np.nan, inplace=True)

    # Calculate MoM and YoY changes if not already present
    if 'MoM Change' not in bar_df.columns or 'YoY Change' not in bar_df.columns:
        bar_df = calculate_changes(bar_df, value_col='Total')

    # Create a unified DataFrame with date as the key
    combined_region_data = pd.DataFrame()
    combined_region_data[f'Date_{region}'] = line_df['Date']

    # Add price data
    price_col = f'Price_{region}'
    combined_region_data[price_col] = line_df['Price']

    # Add net exports data
    net_exports_col = f'NetExports_{region}'
    combined_region_data[net_exports_col] = bar_df['Total']

    # Add MoM and YoY changes
    combined_region_data[f'MoM_Change_{region}'] = bar_df['MoM Change']
    combined_region_data[f'YoY_Change_{region}'] = bar_df['YoY Change']

    # Merge this region's data with the combined data, aligning on Date
    if combined_data.empty:
        combined_data = combined_region_data
    else:
        combined_data = pd.merge(combined_data, combined_region_data, left_index=True, right_index=True, how='outer')

# After combining all regions, set a unified date index and drop unnecessary columns
combined_data['Date'] = combined_data.filter(like='Date_').bfill(axis=1).iloc[:, 0]
combined_data.set_index('Date', inplace=True)
combined_data.drop(columns=combined_data.filter(like='Date_').columns, inplace=True)

# Handle NaNs: Retain rows with valid price data, even if other columns have NaNs
price_columns = combined_data.filter(like='Price_').columns
combined_data.dropna(subset=price_columns, inplace=True)

# Optionally fill NaNs in export-related columns with zeros or another placeholder if required
export_columns = combined_data.filter(like='NetExports_').columns
combined_data[export_columns] = combined_data[export_columns].fillna(0)

# Check if combined data is still valid
if combined_data.empty:
    print(f"Combined data is empty.")
else:
    print(f"Combined data:\n{combined_data.head()}")

# Proceed to plot the heatmap
heatmap_fig = plot_correlation_heatmap(combined_data, title='Correlation Heatmap of Price, Volume, and Changes')

#=========================================================================== CORR MATRIX  ===========================================================================#
correlation_matrix = combined_data.corr()
print(f"Full Correlation Matrix:\n{correlation_matrix}")

correlation_matrix_upper = correlation_matrix.where(np.triu(np.ones(correlation_matrix.shape), k=1).astype(bool))

correlation_stacked = correlation_matrix_upper.stack().reset_index()
correlation_stacked.columns = ['Variable 1', 'Variable 2', 'Correlation']

threshold = 0.3
filtered_corr_stacked = correlation_stacked[correlation_stacked['Correlation'].abs() > threshold]

filtered_corr_stacked['Correlation'] = filtered_corr_stacked['Correlation'].apply(lambda x: f'{x:.2f}')

correlation_table = dash_table.DataTable(
    data=filtered_corr_stacked.to_dict('records'),
    columns=[{'name': col, 'id': col} for col in filtered_corr_stacked.columns],
    style_table={'overflowX': 'auto'},
    
    style_cell={
        'height': 'auto',
        'minWidth': '150px', 'width': '150px', 'maxWidth': '150px',
        'whiteSpace': 'normal',
        'textAlign': 'left',
    },
    style_header={
        'backgroundColor': 'rgb(230, 230, 230)',
        'fontWeight': 'bold'
    }
)

# External stylesheets for styling
external_stylesheets = [dbc.themes.PULSE]
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

# Set the title for the app
app.title = f'Incentive and Flows Arbs Analyzer for {origin}'

# Define the consistent styles
HEADER_STYLE = {
    'font-family': 'Arial, sans-serif',
    'font-size': '24px',
    'font-weight': 'bold',
    'color': '#333333',
    'margin-top': '20px',
    'margin-bottom': '20px'
}

GRAPH_STYLE = {
    'display': 'inline-block',
    'width': '90%',
    'padding': '10px'
}

# Create the navigation bar
navbar = dbc.NavbarSimple(
    brand=f'{origin} Incentive and Flow Arbs Analyzer',
    brand_href="#",
    color="primary",
    dark=True,
    sticky="top"  # Keeps the navbar fixed at the top when scrolling
)

# Define the app layout
app.layout = html.Div([
    navbar,  # Include the navbar at the top
    html.Hr(),

    dcc.Tabs(id="tabs-example", value='tab-1', children=[

        # Tab 1: ULSD Prices and Net Exports
        dcc.Tab(label='ULSD Prices and Net Exports', value='tab-1', children=[
            html.Div([
                html.H4(f'ULSD Prices from {origin} to Various Regions', style=HEADER_STYLE, id="ulsd-prices-header"),
                dcc.Graph(figure=superimposed_incentives_fig, style=GRAPH_STYLE, id="ulsd-prices-graph"),
            ]),
            html.Div([
                html.H4(f'Net Exports from {origin} to Various Regions', style=HEADER_STYLE, id="net-exports-header"),
                dcc.Graph(figure=superimposed_exports_fig, style=GRAPH_STYLE, id="net-exports-graph"),
            ]),
        ]),

        # Tab 2: Seasonal Net Exports
        dcc.Tab(label='Seasonal Net Exports', value='tab-2', children=[
            html.Div([
                html.H4(f'Seasonal Net Exports from {origin} to Various Regions', style=HEADER_STYLE, id="seasonal-exports-header"),
                html.Div(children=[
                    dcc.Graph(figure=fig, style={'display': 'inline-block', 'width': '50%', 'padding': '10px'}, id=f"seasonal-exports-graph-{i}") for i, fig in enumerate(seasonal_exports_figures)
                ]),
            ]),
        ]),

        # Tab 3: Bar and Line Plots
        dcc.Tab(label='Superimposed Exports and Prices', value='tab-3', children=[
            html.Div(children=[
                dcc.Graph(figure=fig, style=GRAPH_STYLE, id=f"bar-line-graph-{i}") for i, fig in enumerate(bar_figures)
            ]),
        ]),

        # Tab 4: MoM and YoY Changes
        dcc.Tab(label='MoM and YoY Changes', value='tab-4', children=[
            html.Div([
                html.H4('MoM and YoY Changes in Net Exports with ULSD Prices', style=HEADER_STYLE, id="mom-yoy-header"),
                html.Div(children=[
                    dcc.Graph(figure=fig, style=GRAPH_STYLE, id=f"mom-yoy-graph-{i}") for i, fig in enumerate(changes_figures)
                ]),
            ]),
        ]),

        # Tab 5: Differences in Incentives and Exports
        dcc.Tab(label='Differences in Incentives and Exports', value='tab-5', children=[
            html.Div([
                html.H4(f'Differences in Incentives and Net Exports Between Regions from {origin}', style=HEADER_STYLE, id="incentives-exports-header"),
            ]),

            html.Div([
                html.H4(f'{origin} Price Differences for UKC', style=HEADER_STYLE, id="ukc-price-diff-header"),
                dcc.Graph(figure=region_plots['ukc_incentive_diff'], style=GRAPH_STYLE, id="ukc-price-diff-graph"),
            ]),

            html.Div([
                html.H4('Volume Differences for UKC', style=HEADER_STYLE, id="ukc-volume-diff-header"),
                dcc.Graph(figure=region_plots['ukc_export_diff'], style=GRAPH_STYLE, id="ukc-volume-diff-graph"),
            ]),

            html.Div([
                html.H4(f'{origin} Price Differences for EAFR', style=HEADER_STYLE, id="eafr-price-diff-header"),
                dcc.Graph(figure=region_plots['eafr_incentive_diff'], style=GRAPH_STYLE, id="eafr-price-diff-graph"),
            ]),

            html.Div([
                html.H4(f'{origin} Volume Differences for EAFR', style=HEADER_STYLE, id="eafr-volume-diff-header"),
                dcc.Graph(figure=region_plots['eafr_export_diff'], style=GRAPH_STYLE, id="eafr-volume-diff-graph"),
            ]),

            html.Div([
                html.H4(f'{origin} Price Differences for MED', style=HEADER_STYLE, id="med-price-diff-header"),
                dcc.Graph(figure=region_plots['med_incentive_diff'], style=GRAPH_STYLE, id="med-price-diff-graph"),
            ]),

            html.Div([
                html.H4(f'{origin} Volume Differences for MED', style=HEADER_STYLE, id="med-volume-diff-header"),
                dcc.Graph(figure=region_plots['med_export_diff'], style=GRAPH_STYLE, id="med-volume-diff-graph"),
            ]),

            html.Div([
                html.H4(f'{origin} Price Differences for SPORE', style=HEADER_STYLE, id="spore-price-diff-header"),
                dcc.Graph(figure=region_plots['spore_incentive_diff'], style=GRAPH_STYLE, id="spore-price-diff-graph"),
            ]),

            html.Div([
                html.H4(f'{origin} Volume Differences for SPORE', style=HEADER_STYLE, id="spore-volume-diff-header"),
                dcc.Graph(figure=region_plots['spore_export_diff'], style=GRAPH_STYLE, id="spore-volume-diff-graph"),
            ]),

            html.Div([
                html.H4(f'{origin} Price Differences for WAFR', style=HEADER_STYLE, id="wafr-price-diff-header"),
                dcc.Graph(figure=region_plots['wafr_incentive_diff'], style=GRAPH_STYLE, id="wafr-price-diff-graph"),
            ]),

            html.Div([
                html.H4(f'{origin} Volume Differences for WAFR', style=HEADER_STYLE, id="wafr-volume-diff-header"),
                dcc.Graph(figure=region_plots['wafr_export_diff'], style=GRAPH_STYLE, id="wafr-volume-diff-graph"),
            ]),
        ]),

        # Tab 6: Correlation Heatmap
        dcc.Tab(label='Correlation Heatmap', value='tab-6', children=[
            html.Div([
                html.H4(f'{origin} Correlation Heatmap of Price, Volume, and Changes for Correlations above Threshold of {threshold}', style=HEADER_STYLE, id="correlation-heatmap-header"),
                dcc.Graph(figure=heatmap_fig, style=GRAPH_STYLE, id="correlation-heatmap-graph"),
            ]),
            html.Div([
                html.H4(f'Correlation Matrix Table for {origin} (prefix)', style=HEADER_STYLE, id="correlation-matrix-header"),
                correlation_table,
            ]),
        ]),
    ])
])

if __name__ == '__main__':
    app.run(debug=False, port=1021)

#=========================================================================== DASH  ===========================================================================#
external_stylesheets = [dbc.themes.PULSE]
app = Dash(__name__, external_stylesheets=external_stylesheets)

app.title = 'Incentive and Flows Arbs Analyzer for {origin}'

app.layout = html.Div([
    html.H1(f'{origin} Incentive and Flow Arbs Analyzer'),
    html.Hr(),
    
    html.Div([
        html.H4(f'ULSD Prices from {origin} to Various Regions'),
        dcc.Graph(figure=superimposed_incentives_fig, style={'display': 'inline-block', 'width': '90%'})
    ]),

    html.Div([
        html.H4(f'Net Exports from {origin} to Various Regions'),
        dcc.Graph(figure=superimposed_exports_fig, style={'display': 'inline-block', 'width': '90%'})
    ]),

    html.Div([
        html.H4(f'Seasonal Net Exports from {origin} to Various Regions'),
        html.Div(children=[
            dcc.Graph(figure=fig, style={'display': 'inline-block', 'width': '50%'}) for fig in seasonal_exports_figures
        ])
    ]),

    html.Div(children=[
        dcc.Graph(figure=fig, style={'display': 'inline-block', 'width': '90%'}) for fig in bar_figures
    ]),

    html.Div([
        html.H4('MoM and YoY Changes in Net Exports with ULSD Prices'),
        html.Div(children=[
            dcc.Graph(figure=fig, style={'display': 'inline-block', 'width': '90%'}) for fig in changes_figures
        ]),
    ]),

    html.Div([
        html.H4(f'Differences in Incentives and Net Exports Between Regions from {origin}'),
    ]),

    html.Div([
        html.H4(f'{origin} Price Differences for UKC'),
        dcc.Graph(figure=region_plots['ukc_incentive_diff'], style={'display': 'inline-block', 'width': '80%'})
    ]),
    
    html.Div([
        html.H4('Volume Differences for UKC'),
        dcc.Graph(figure=region_plots['ukc_export_diff'], style={'display': 'inline-block', 'width': '80%'})
    ]),

    html.Div([
        html.H4(f'{origin} Price Differences for EAFR'),
        dcc.Graph(figure=region_plots['eafr_incentive_diff'], style={'display': 'inline-block', 'width': '80%'})
    ]),
    
    html.Div([
        html.H4(f'{origin} Volume Differences for EAFR'),
        dcc.Graph(figure=region_plots['eafr_export_diff'], style={'display': 'inline-block', 'width': '80%'})
    ]),

    html.Div([
        html.H4(f'{origin} Price Differences for MED'),
        dcc.Graph(figure=region_plots['med_incentive_diff'], style={'display': 'inline-block', 'width': '80%'})
    ]),
    
    html.Div([
        html.H4(f'{origin} Volume Differences for MED'),
        dcc.Graph(figure=region_plots['med_export_diff'], style={'display': 'inline-block', 'width': '80%'})
    ]),

    html.Div([
        html.H4(f'{origin} Price Differences for SPORE'),
        dcc.Graph(figure=region_plots['spore_incentive_diff'], style={'display': 'inline-block', 'width': '80%'})
    ]),
    
    html.Div([
        html.H4(f'{origin} Volume Differences for SPORE'),
        dcc.Graph(figure=region_plots['spore_export_diff'], style={'display': 'inline-block', 'width': '80%'})
    ]),

    html.Div([
        html.H4(f'{origin} Price Differences for WAFR'),
        dcc.Graph(figure=region_plots['wafr_incentive_diff'], style={'display': 'inline-block', 'width': '80%'})
    ]),
    
    html.Div([
        html.H4(f'{origin} Volume Differences for WAFR'),
        dcc.Graph(figure=region_plots['wafr_export_diff'], style={'display': 'inline-block', 'width': '80%'})
    ]),

    html.Div([
        html.H4(f'{origin} Correlation Heatmap of Price, Volume, and Changes for Correlations above Threshold of {threshold}'),
        dcc.Graph(figure=heatmap_fig, style={'display': 'inline-block', 'width': '100%'})
    ]),
    html.Div([
        html.H4(f'Correlation Matrix Table for {origin} (prefix)'),
        correlation_table 
    ]),
])

if __name__ == '__main__':
    app.run(debug=False, port=1031)



