{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6a321e11",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "import urllib3\n",
    "from BlueOcean import DataAccessApi\n",
    "from pandas import DataFrame\n",
    "\n",
    "urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n",
    "\n",
    "OECD_EU_COUNTRIES = [\n",
    "        'Austria',\n",
    "        'Belgium',\n",
    "        'Denmark',\n",
    "        'Finland',\n",
    "        'France',\n",
    "        'Germany',\n",
    "        'Greece',\n",
    "        'Ireland',\n",
    "        'Italy',\n",
    "        'Netherlands',\n",
    "        'Norway',\n",
    "        'Portugal',\n",
    "        'Spain',\n",
    "        'Sweden',\n",
    "        'United Kingdom',\n",
    "        'Turkey',\n",
    "        'Czech Republic',\n",
    "        'Hungary',\n",
    "        'Poland',\n",
    "        'Slovakia',\n",
    "        'Switzerland'\n",
    "    ]\n",
    "\n",
    "def bo_get_data(query):\n",
    "    data = DataAccessApi.GetDataframe(query)\n",
    "    return data\n",
    "\n",
    "\n",
    "OUTAGES = {\n",
    "    'Total': \"'Planned','Unplanned'\",\n",
    "    'Planned': \"'Planned'\",\n",
    "    'Unplanned': \"'Unplanned'\",\n",
    "}\n",
    "\n",
    "\n",
    "def enum_keys(key: int) -> tuple:\n",
    "    query = f\"\"\"\n",
    "            select {key}\n",
    "            from hive_metastore.dataengineering.oil_refinery_plant where isActive = true\n",
    "            group by {key}\n",
    "            \"\"\"\n",
    "    value = bo_get_data(query).iloc[:, 0].to_list()\n",
    "    return tuple(value)\n",
    "\n",
    "\n",
    "def make_query(\n",
    "        key: str = 'COUNTRY',\n",
    "        value: tuple = None,\n",
    "        unit_type: str = 'CDU',\n",
    "        outage_type: str = 'Total',\n",
    "        exclude_cause: tuple = None,\n",
    "        pdate: pd.Timestamp = pd.Timestamp.utcnow()) -> str:\n",
    "    # Make sure value is proper for injecting in the SQL statement\n",
    "    if value is None:\n",
    "        value = enum_keys(key)\n",
    "    elif len(value) == 1:\n",
    "        value = f\"('{value[0].lower()}')\"\n",
    "    if isinstance(value, list):\n",
    "        value = list(map(lambda x: x.lower(), value))\n",
    "        value = tuple(value)\n",
    "    # Make sure exclude cause is proper for injecting in the SQL statement\n",
    "    if not exclude_cause:\n",
    "        exclude_cause = tuple()\n",
    "    if len(exclude_cause) == 1:\n",
    "        exclude_cause = f\"('{exclude_cause[0]}')\"\n",
    "    if isinstance(exclude_cause, list):\n",
    "        exclude_cause = tuple(exclude_cause)\n",
    "    cause = f\"and (E_CAUSE not in {exclude_cause} or E_CAUSE is NULL)\" if exclude_cause else \"\"\n",
    "    query = f\"\"\"\n",
    "            SELECT t.EVENT_ID, t.UNIT_NAME, t.UNIT_ID, t.PLANT_ID, t.PLANT_NAME, t.COUNTRY, \n",
    "            case when CAP_OFFLINE is null then 0 else CAP_OFFLINE end as CAP_OFFLINE\n",
    "                  ,StartDate, EndDate, EVENT_TYPE, START_DATE, END_DATE, Capacity, manual_override, MaxDate\n",
    "              FROM hive_metastore.dataengineering.oil_refinery_outage_all t\n",
    "              inner join (\n",
    "                  SELECT max(PublishedDate) as MaxDate, EVENT_ID, tu.UNIT_ID, tp.COUNTRY,\n",
    "                  case \n",
    "                  when E_STATUS = 'ManualOverride' then 1. \n",
    "                  else 0.\n",
    "                  end manual_override\n",
    "                  FROM hive_metastore.dataengineering.oil_refinery_outage_all t\n",
    "                  inner join (\n",
    "                        select PLANT_ID, PLANT_NAME, COUNTRY\n",
    "                        from hive_metastore.dataengineering.oil_refinery_plant\n",
    "                        where lower({key}) in {value} AND isActive = true\n",
    "                  ) tp on t.PLANT_ID = tp.PLANT_ID\n",
    "                  inner join (\n",
    "                        select UNIT_ID\n",
    "                        from hive_metastore.dataengineering.oil_refinery_unit_view\n",
    "                        where UNIT_GROUP in ('{unit_type}')\n",
    "                  ) tu on t.UNIT_ID = tu.UNIT_ID\n",
    "                  where PublishedDate <= '{pdate:%Y-%m-%d}'\n",
    "                                    group by EVENT_ID, tu.UNIT_ID, tp.COUNTRY, E_STATUS\n",
    "              ) tm on tm.EVENT_ID = t.EVENT_ID and t.UNIT_ID = tm.UNIT_ID and t.PublishedDate = tm.MaxDate\n",
    "              right join(\n",
    "                select uv.Unit_ID, case when tcapa.StartDate is null and uv.U_STATUS = 'Operational' then '2000-01-01' else tcapa.StartDate end as StartDate, case when tcapa.EndDate is null and uv.U_STATUS = 'Operational' then '9998-12-31' else tcapa.EndDate end as EndDate, case when tcapamax.Capacity is null then uv.U_CAPACITY else tcapamax.Capacity end as Capacity\n",
    "                from hive_metastore.dataengineering.oil_refinery_unit_view uv -- we will use the full unit list instead of unit list from oil_refinery_unit_capacity_override\n",
    "                    LEFT JOIN\n",
    "                    hive_metastore.dataengineering.oil_refinery_unit_capacity_override tcapa on uv.UNIT_ID = tcapa.UNIT_ID\n",
    "                    left join( -- changed to left join\n",
    "                        select max(Pdate) as maxDate, StartDate, EndDate, Unit_ID, max(Capacity) as Capacity\n",
    "                        from hive_metastore.dataengineering.oil_refinery_unit_capacity_override\n",
    "                        group by Unit_ID, StartDate, EndDate\n",
    "                    ) tcapamax on tcapa.PDate = tcapamax.maxDate \n",
    "                    and tcapa.Unit_ID = tcapamax.Unit_ID \n",
    "                    and tcapa.StartDate = tcapamax.StartDate \n",
    "                    and tcapa.EndDate = tcapamax.EndDate\n",
    "                    AND tcapa.isActive = true\n",
    "              ) tbounds on t.UNIT_ID = tbounds.Unit_ID \n",
    "              where EVENT_TYPE in ({OUTAGES[outage_type]}) and E_STATUS not in ('Cancelled', 'ManualCancel', 'ManualInactive') {cause}\n",
    "              ORDER BY t.UNIT_ID, MaxDate\n",
    "            \"\"\"\n",
    "    return query\n",
    "\n",
    "def get_refinery_table_capacity(key='COUNTRY', value: list = None,\n",
    "                       unit_type='CDU', outage_type='Total', exclude_cause=None, pdate=pd.Timestamp.utcnow(), verbose=False) -> DataFrame:\n",
    "    query = make_query(key, value, unit_type,\n",
    "                       outage_type, exclude_cause, pdate)\n",
    "    if verbose:\n",
    "        print(query)\n",
    "    raw = bo_get_data(query)\n",
    "    internals = ['manual_override', 'MaxDate']\n",
    "    return (raw\n",
    "            .groupby(['UNIT_ID', 'StartDate', 'EndDate']).first()\n",
    "            .reset_index()\n",
    "            .drop(internals, axis=1)\n",
    "    )\n",
    "\n",
    "def get_refinery_table_outages(key='COUNTRY', value: list = None,\n",
    "                       unit_type='CDU', outage_type='Total', exclude_cause=None, pdate=pd.Timestamp.utcnow(), verbose=False) -> DataFrame:\n",
    "    query = make_query(key, value, unit_type,\n",
    "                       outage_type, exclude_cause, pdate)\n",
    "    if verbose:\n",
    "        print(query)\n",
    "    raw = bo_get_data(query)\n",
    "    internals = ['manual_override', 'MaxDate']\n",
    "    groups = ['EVENT_ID', 'manual_override', 'MaxDate']\n",
    "    return (raw\n",
    "            .sort_values(groups, ascending=[False] * 3)\n",
    "            .groupby('EVENT_ID')\n",
    "            .first()\n",
    "            .reset_index()\n",
    "            .drop(internals, axis=1)\n",
    "    )\n",
    "\n",
    "\n",
    "def _generate_ids(data):\n",
    "    plants = data.sort_values('START_DATE').groupby(\n",
    "        'PLANT_ID')['PLANT_NAME'].first().to_dict()\n",
    "    units = data.sort_values('START_DATE').groupby(\n",
    "        'UNIT_ID')['UNIT_NAME'].first().to_dict()\n",
    "    return plants, units\n",
    "\n",
    "\n",
    "def _generate_date_range(data, fieldstart, fieldend, maxdate=pd.Timestamp.now()):\n",
    "    try:\n",
    "        _max = pd.to_datetime(data[fieldend].max())\n",
    "    except:\n",
    "        _max = maxdate\n",
    "    _min = pd.to_datetime(data[fieldstart].min())\n",
    "    return pd.date_range(_min, _max, freq='D')\n",
    "\n",
    "\n",
    "def flatten_refinery_outage(data):\n",
    "    plants, units = _generate_ids(data)\n",
    "    index = _generate_date_range(data, 'START_DATE', 'END_DATE')\n",
    "    data['DATE'] = data.apply(lambda x: pd.date_range(\n",
    "        x['START_DATE'], x['END_DATE'], freq='D'), axis=1)\n",
    "    pivoted = (\n",
    "        data\n",
    "        .explode('DATE')\n",
    "        .groupby(\n",
    "            ['COUNTRY', 'PLANT_ID', 'UNIT_ID', 'DATE'],\n",
    "        )['CAP_OFFLINE'].max()\n",
    "    )\n",
    "\n",
    "    cols = pivoted.index.names[:-1]\n",
    "    result = (\n",
    "        pivoted\n",
    "        .unstack(cols)\n",
    "        .reindex(index)\n",
    "        .fillna(0)\n",
    "    )\n",
    "    proper_names = [(c, plants[x], units[y]) for c, x, y in result.columns]\n",
    "    result.columns = pd.MultiIndex.from_tuples(\n",
    "        proper_names, names= ['COUNTRY', 'PLANT_NAME', 'UNIT_NAME'])\n",
    "    return result\n",
    "\n",
    "\n",
    "def flatten_refinery_capacity(data, maxdate=pd.Timestamp.now()):\n",
    "    plants, units = _generate_ids(data)\n",
    "    index = _generate_date_range(data, 'StartDate', 'EndDate', maxdate)\n",
    "    units_life = data.groupby(['COUNTRY','PLANT_ID', 'UNIT_ID', 'StartDate', 'EndDate']).last()\n",
    "\n",
    "    def define_range(data):\n",
    "        try:\n",
    "            __max = pd.to_datetime(data.name[-1])\n",
    "        except:\n",
    "            __max = index[-1]\n",
    "        return pd.date_range(data.name[-2], __max, freq='D')\n",
    "    units_life['RANGE'] = units_life.apply(lambda x: define_range(x), axis=1)\n",
    "    pivoted = (\n",
    "        units_life\n",
    "        .explode('RANGE')\n",
    "        .sort_index(axis=0, level=2)\n",
    "        .groupby(\n",
    "            ['COUNTRY','PLANT_ID', 'UNIT_ID', 'RANGE'],\n",
    "        )['Capacity'].last()\n",
    "    )\n",
    "\n",
    "    cols = pivoted.index.names[:-1]\n",
    "    ids = [i for i, _ in enumerate(cols)]\n",
    "    result = (\n",
    "        pivoted\n",
    "        .unstack(ids)\n",
    "        .reindex(index)\n",
    "        .fillna(0)\n",
    "    )\n",
    "    proper_names = [(c, plants[x], units[y]) for c, x, y in result.columns]\n",
    "    result.columns = pd.MultiIndex.from_tuples(\n",
    "        proper_names, names= ['COUNTRY', 'PLANT_NAME', 'UNIT_NAME'])\n",
    "    return result\n",
    "\n",
    "\n",
    "class RefineryData():\n",
    "    def get_outage(self,\n",
    "                   key: str,\n",
    "                   values: list,\n",
    "                   unit_type,\n",
    "                   outage_type=None,\n",
    "                   exclude_cause=None,\n",
    "                   pdate=None,\n",
    "                   verbose=False):\n",
    "        \"\"\"\n",
    "        Get refining outages\n",
    "        \"\"\"\n",
    "        table = get_refinery_table_outages(\n",
    "            key,\n",
    "            values,\n",
    "            unit_type,\n",
    "            outage_type or 'Total',\n",
    "            exclude_cause,\n",
    "            pdate or pd.Timestamp.utcnow(),\n",
    "            verbose,\n",
    "        )\n",
    "        return flatten_refinery_outage(table) / 1e3\n",
    "\n",
    "    def get_capacity(self,\n",
    "                     key: str,\n",
    "                     values: list,\n",
    "                     unit_type,\n",
    "                     pdate=None,\n",
    "                     max_date=pd.Timestamp('2030-1-1'),\n",
    "                     verbose=False) -> DataFrame:\n",
    "        \"\"\"\n",
    "        Get refining capacity\n",
    "        \"\"\"\n",
    "        table = get_refinery_table_capacity(\n",
    "            key,\n",
    "            values,\n",
    "            unit_type,\n",
    "            'Total',\n",
    "            None,\n",
    "            pdate or pd.Timestamp.utcnow(),\n",
    "            verbose,\n",
    "        )\n",
    "        return flatten_refinery_capacity(table, max_date) / 1e3\n",
    "\n",
    "def _test_df(data, country, refinery, unit, date, value):\n",
    "    test = (data.xs((country, refinery, unit), axis=1).loc[date][0] == value)\n",
    "    if test:\n",
    "        print(f\"{refinery}, {unit}, {date}, {value} kb/d passed\")\n",
    "    return test\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a59db776",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "            SELECT t.EVENT_ID, t.UNIT_NAME, t.UNIT_ID, t.PLANT_ID, t.PLANT_NAME, t.COUNTRY, \n",
      "            case when CAP_OFFLINE is null then 0 else CAP_OFFLINE end as CAP_OFFLINE\n",
      "                  ,StartDate, EndDate, EVENT_TYPE, START_DATE, END_DATE, Capacity, manual_override, MaxDate\n",
      "              FROM hive_metastore.dataengineering.oil_refinery_outage_all t\n",
      "              inner join (\n",
      "                  SELECT max(PublishedDate) as MaxDate, EVENT_ID, tu.UNIT_ID, tp.COUNTRY,\n",
      "                  case \n",
      "                  when E_STATUS = 'ManualOverride' then 1. \n",
      "                  else 0.\n",
      "                  end manual_override\n",
      "                  FROM hive_metastore.dataengineering.oil_refinery_outage_all t\n",
      "                  inner join (\n",
      "                        select PLANT_ID, PLANT_NAME, COUNTRY\n",
      "                        from hive_metastore.dataengineering.oil_refinery_plant\n",
      "                        where lower(COUNTRY) in ('austria', 'belgium', 'denmark', 'finland', 'france', 'germany', 'greece', 'ireland', 'italy', 'netherlands', 'norway', 'portugal', 'lithuaniaspain', 'sweden', 'united kingdom', 'turkey', 'czech republic', 'hungary', 'poland', 'slovakia', 'switzerland') AND isActive = true\n",
      "                  ) tp on t.PLANT_ID = tp.PLANT_ID\n",
      "                  inner join (\n",
      "                        select UNIT_ID\n",
      "                        from hive_metastore.dataengineering.oil_refinery_unit_view\n",
      "                        where UNIT_GROUP in ('CDU')\n",
      "                  ) tu on t.UNIT_ID = tu.UNIT_ID\n",
      "                  where PublishedDate <= '2024-06-18'\n",
      "                                    group by EVENT_ID, tu.UNIT_ID, tp.COUNTRY, E_STATUS\n",
      "              ) tm on tm.EVENT_ID = t.EVENT_ID and t.UNIT_ID = tm.UNIT_ID and t.PublishedDate = tm.MaxDate\n",
      "              right join(\n",
      "                select uv.Unit_ID, case when tcapa.StartDate is null and uv.U_STATUS = 'Operational' then '2000-01-01' else tcapa.StartDate end as StartDate, case when tcapa.EndDate is null and uv.U_STATUS = 'Operational' then '9998-12-31' else tcapa.EndDate end as EndDate, case when tcapamax.Capacity is null then uv.U_CAPACITY else tcapamax.Capacity end as Capacity\n",
      "                from hive_metastore.dataengineering.oil_refinery_unit_view uv -- we will use the full unit list instead of unit list from oil_refinery_unit_capacity_override\n",
      "                    LEFT JOIN\n",
      "                    hive_metastore.dataengineering.oil_refinery_unit_capacity_override tcapa on uv.UNIT_ID = tcapa.UNIT_ID\n",
      "                    left join( -- changed to left join\n",
      "                        select max(Pdate) as maxDate, StartDate, EndDate, Unit_ID, max(Capacity) as Capacity\n",
      "                        from hive_metastore.dataengineering.oil_refinery_unit_capacity_override\n",
      "                        group by Unit_ID, StartDate, EndDate\n",
      "                    ) tcapamax on tcapa.PDate = tcapamax.maxDate \n",
      "                    and tcapa.Unit_ID = tcapamax.Unit_ID \n",
      "                    and tcapa.StartDate = tcapamax.StartDate \n",
      "                    and tcapa.EndDate = tcapamax.EndDate\n",
      "                    AND tcapa.isActive = true\n",
      "              ) tbounds on t.UNIT_ID = tbounds.Unit_ID \n",
      "              where EVENT_TYPE in ('Planned','Unplanned') and E_STATUS not in ('Cancelled', 'ManualCancel', 'ManualInactive') \n",
      "              ORDER BY t.UNIT_ID, MaxDate\n",
      "            \n"
     ]
    }
   ],
   "source": [
    "\n",
    "now = pd.Timestamp.now()\n",
    "next_q = now + pd.DateOffset(months=3)\n",
    "prev_q = now + pd.DateOffset(months=-3)\n",
    "rd = RefineryData()\n",
    "data = RefineryData().get_outage(\n",
    "    \"COUNTRY\",\n",
    "    [l.upper() for l in OECD_EU_COUNTRIES],\n",
    "    unit_type=\"CDU\",\n",
    "    verbose=True,\n",
    ")\n",
    "data = data.groupby(axis=1, level=[1]).sum()\n",
    "data.columns = [x.replace(\" Refinery\", \"\") for x in data.columns]\n",
    "recent = data[prev_q:next_q].sum().sort_values().tail(20)\n",
    "fdata = data[recent.index[::-1]]\n",
    "fdata = fdata[prev_q:next_q]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b93bae5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Notre-Dame-de-Gravenchon</th>\n",
       "      <th>Porvoo</th>\n",
       "      <th>BP Rotterdam</th>\n",
       "      <th>Lindsey</th>\n",
       "      <th>Izmit</th>\n",
       "      <th>Litvinov</th>\n",
       "      <th>Mongstad</th>\n",
       "      <th>Priolo Gargallo ISAB (North)</th>\n",
       "      <th>Milazzo</th>\n",
       "      <th>Rotterdam</th>\n",
       "      <th>Taranto</th>\n",
       "      <th>MiRO Karlsruhe</th>\n",
       "      <th>Leuna</th>\n",
       "      <th>Humber</th>\n",
       "      <th>Saras</th>\n",
       "      <th>Pembroke</th>\n",
       "      <th>Aegean Aliaga (Star Ege)</th>\n",
       "      <th>Elefsina</th>\n",
       "      <th>Slovnaft (MOL Nyrt)</th>\n",
       "      <th>Cressier</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2024-03-01</th>\n",
       "      <td>170.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>110.0</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>191.000000</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>30.946154</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-01</th>\n",
       "      <td>233.000000</td>\n",
       "      <td>199.133333</td>\n",
       "      <td>186.666667</td>\n",
       "      <td>110.0</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>108.800000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>24.8</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>120.966667</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>109.300000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.833333</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-05-01</th>\n",
       "      <td>209.032258</td>\n",
       "      <td>206.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>110.0</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>108.800000</td>\n",
       "      <td>96.774194</td>\n",
       "      <td>124.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.580645</td>\n",
       "      <td>56.412903</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>88.354839</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.161290</td>\n",
       "      <td>64.677419</td>\n",
       "      <td>37.290323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-06-01</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>34.333333</td>\n",
       "      <td>26.666667</td>\n",
       "      <td>110.0</td>\n",
       "      <td>66.666667</td>\n",
       "      <td>77.706667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>99.2</td>\n",
       "      <td>111.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>35.200000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>76.666667</td>\n",
       "      <td>52.500000</td>\n",
       "      <td>63.466667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-07-01</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>96.677419</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>60.967742</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-08-01</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-09-01</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>240.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>220.0</td>\n",
       "      <td>214.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Notre-Dame-de-Gravenchon      Porvoo  BP Rotterdam  Lindsey  \\\n",
       "2024-03-01                170.000000    0.000000      0.000000    110.0   \n",
       "2024-04-01                233.000000  199.133333    186.666667    110.0   \n",
       "2024-05-01                209.032258  206.000000    200.000000    110.0   \n",
       "2024-06-01                  0.000000   34.333333     26.666667    110.0   \n",
       "2024-07-01                  0.000000    0.000000      0.000000      0.0   \n",
       "2024-08-01                  0.000000    0.000000      0.000000      0.0   \n",
       "2024-09-01                  0.000000    0.000000      0.000000      0.0   \n",
       "\n",
       "                 Izmit    Litvinov    Mongstad  Priolo Gargallo ISAB (North)  \\\n",
       "2024-03-01  100.000000    0.000000    0.000000                           0.0   \n",
       "2024-04-01  100.000000  108.800000  180.000000                          24.8   \n",
       "2024-05-01  100.000000  108.800000   96.774194                         124.0   \n",
       "2024-06-01   66.666667   77.706667    0.000000                          99.2   \n",
       "2024-07-01    0.000000    0.000000    0.000000                           0.0   \n",
       "2024-08-01    0.000000    0.000000    0.000000                           0.0   \n",
       "2024-09-01    0.000000    0.000000    0.000000                           0.0   \n",
       "\n",
       "               Milazzo   Rotterdam     Taranto  MiRO Karlsruhe  Leuna  \\\n",
       "2024-03-01    0.000000  191.000000  130.000000       30.946154    0.0   \n",
       "2024-04-01    0.000000  120.966667  130.000000      109.300000    0.0   \n",
       "2024-05-01    0.000000    0.000000   12.580645       56.412903    0.0   \n",
       "2024-06-01  111.000000    0.000000    0.000000        0.000000    0.0   \n",
       "2024-07-01   96.677419    0.000000    0.000000        0.000000    0.0   \n",
       "2024-08-01    0.000000    0.000000    0.000000        0.000000    0.0   \n",
       "2024-09-01    0.000000    0.000000    0.000000        0.000000  240.0   \n",
       "\n",
       "               Humber      Saras  Pembroke  Aegean Aliaga (Star Ege)  \\\n",
       "2024-03-01   0.000000   0.000000       0.0                       0.0   \n",
       "2024-04-01   0.000000  11.000000       0.0                       0.0   \n",
       "2024-05-01   0.000000  88.354839       0.0                       0.0   \n",
       "2024-06-01  77.000000  35.200000       0.0                       0.0   \n",
       "2024-07-01  60.967742   0.000000       0.0                       0.0   \n",
       "2024-08-01   0.000000   0.000000       0.0                       0.0   \n",
       "2024-09-01   0.000000   0.000000     220.0                     214.0   \n",
       "\n",
       "             Elefsina  Slovnaft (MOL Nyrt)   Cressier  \n",
       "2024-03-01   0.000000             0.000000   0.000000  \n",
       "2024-04-01   0.000000             1.833333   0.000000  \n",
       "2024-05-01  45.161290            64.677419  37.290323  \n",
       "2024-06-01  76.666667            52.500000  63.466667  \n",
       "2024-07-01   0.000000             0.000000   0.000000  \n",
       "2024-08-01   0.000000             0.000000   0.000000  \n",
       "2024-09-01   0.000000             0.000000   0.000000  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdata.resample('MS').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "642a4b26",
   "metadata": {},
   "outputs": [],
   "source": [
    "import plotly.graph_objects as go"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "e942db4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = go.Figure()\n",
    "\n",
    "for col in fdata.columns:\n",
    "    fig.add_trace(go.Scatter(\n",
    "        x=fdata.index,\n",
    "        y=fdata[col],\n",
    "        # fill='tonexty', \n",
    "        stackgroup='one', # Fill to the x-axis\n",
    "        mode='none',  # No markers or lines\n",
    "        name=col\n",
    "    ))\n",
    "\n",
    "fig.update_layout(\n",
    "    title='Top 20 Refinery outages',\n",
    "    xaxis_title='kbd',\n",
    "    yaxis_title='Month'\n",
    ")\n",
    "\n",
    "fig.write_image('S:/~Analysis Department/Projects/refinery-runs-report/Charts/area_chart.png', width=2000, height= 800)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "36093be3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(os.getenv('DATAACCESS__HOSTNAME'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "72a7555f",
   "metadata": {},
   "outputs": [],
   "source": [
    "refinery_data = RefineryData()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "84fb5e71",
   "metadata": {},
   "outputs": [],
   "source": [
    "Countries = ['United Arab Emirates']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19e0b353",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "9809da30",
   "metadata": {},
   "outputs": [],
   "source": [
    "unplanned_ex = RefineryData().get_outage('COUNTRY', Countries , unit_type = 'CDU')\n",
    "unplanned_ex2 = RefineryData().get_capacity('COUNTRY', Countries , unit_type = 'CDU')\n",
    "# unplanned = RefineryData().get_outage('COUNTRY', OECD_EU_COUNTRIES, unit_type = 'CDU', outage_type= 'Unplanned')\n",
    "# planned = RefineryData().get_outage('COUNTRY', OECD_EU_COUNTRIES, unit_type = 'CDU')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "fd4d521d",
   "metadata": {},
   "outputs": [],
   "source": [
    "avail = unplanned_ex2-unplanned_ex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "29683e6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "avail= avail.resample('MS').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2dc41f17",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "7188ab17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error in callback <function flush_figures at 0x000002296EEFBE50> (for post_execute):\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python39\\site-packages\\matplotlib_inline\\backend_inline.py:126\u001b[0m, in \u001b[0;36mflush_figures\u001b[1;34m()\u001b[0m\n\u001b[0;32m    123\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m InlineBackend\u001b[38;5;241m.\u001b[39minstance()\u001b[38;5;241m.\u001b[39mclose_figures:\n\u001b[0;32m    124\u001b[0m     \u001b[38;5;66;03m# ignore the tracking, just draw and close all figures\u001b[39;00m\n\u001b[0;32m    125\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 126\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mshow\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[0;32m    127\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    128\u001b[0m         \u001b[38;5;66;03m# safely show traceback if in IPython, else raise\u001b[39;00m\n\u001b[0;32m    129\u001b[0m         ip \u001b[38;5;241m=\u001b[39m get_ipython()\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python39\\site-packages\\matplotlib_inline\\backend_inline.py:90\u001b[0m, in \u001b[0;36mshow\u001b[1;34m(close, block)\u001b[0m\n\u001b[0;32m     88\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m     89\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m figure_manager \u001b[38;5;129;01min\u001b[39;00m Gcf\u001b[38;5;241m.\u001b[39mget_all_fig_managers():\n\u001b[1;32m---> 90\u001b[0m         \u001b[43mdisplay\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m     91\u001b[0m \u001b[43m            \u001b[49m\u001b[43mfigure_manager\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcanvas\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfigure\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m     92\u001b[0m \u001b[43m            \u001b[49m\u001b[43mmetadata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m_fetch_figure_metadata\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfigure_manager\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcanvas\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfigure\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     93\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     94\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[0;32m     95\u001b[0m     show\u001b[38;5;241m.\u001b[39m_to_draw \u001b[38;5;241m=\u001b[39m []\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python39\\site-packages\\IPython\\core\\display_functions.py:298\u001b[0m, in \u001b[0;36mdisplay\u001b[1;34m(include, exclude, metadata, transient, display_id, raw, clear, *objs, **kwargs)\u001b[0m\n\u001b[0;32m    296\u001b[0m     publish_display_data(data\u001b[38;5;241m=\u001b[39mobj, metadata\u001b[38;5;241m=\u001b[39mmetadata, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    297\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 298\u001b[0m     format_dict, md_dict \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mformat\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minclude\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minclude\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mexclude\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mexclude\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    299\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m format_dict:\n\u001b[0;32m    300\u001b[0m         \u001b[38;5;66;03m# nothing to display (e.g. _ipython_display_ took over)\u001b[39;00m\n\u001b[0;32m    301\u001b[0m         \u001b[38;5;28;01mcontinue\u001b[39;00m\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python39\\site-packages\\IPython\\core\\formatters.py:179\u001b[0m, in \u001b[0;36mDisplayFormatter.format\u001b[1;34m(self, obj, include, exclude)\u001b[0m\n\u001b[0;32m    177\u001b[0m md \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    178\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 179\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[43mformatter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    180\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m:\n\u001b[0;32m    181\u001b[0m     \u001b[38;5;66;03m# FIXME: log the exception\u001b[39;00m\n\u001b[0;32m    182\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m\n",
      "File \u001b[1;32m<decorator-gen-2>:2\u001b[0m, in \u001b[0;36m__call__\u001b[1;34m(self, obj)\u001b[0m\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python39\\site-packages\\IPython\\core\\formatters.py:223\u001b[0m, in \u001b[0;36mcatch_format_error\u001b[1;34m(method, self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    221\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"show traceback on failed format call\"\"\"\u001b[39;00m\n\u001b[0;32m    222\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 223\u001b[0m     r \u001b[38;5;241m=\u001b[39m method(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    224\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mNotImplementedError\u001b[39;00m:\n\u001b[0;32m    225\u001b[0m     \u001b[38;5;66;03m# don't warn on NotImplementedErrors\u001b[39;00m\n\u001b[0;32m    226\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_return(\u001b[38;5;28;01mNone\u001b[39;00m, args[\u001b[38;5;241m0\u001b[39m])\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python39\\site-packages\\IPython\\core\\formatters.py:340\u001b[0m, in \u001b[0;36mBaseFormatter.__call__\u001b[1;34m(self, obj)\u001b[0m\n\u001b[0;32m    338\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[0;32m    339\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 340\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mprinter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    341\u001b[0m \u001b[38;5;66;03m# Finally look for special method names\u001b[39;00m\n\u001b[0;32m    342\u001b[0m method \u001b[38;5;241m=\u001b[39m get_real_method(obj, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprint_method)\n",
      "File \u001b[1;32m~\\AppData\\Roaming\\Python\\Python39\\site-packages\\IPython\\core\\pylabtools.py:152\u001b[0m, in \u001b[0;36mprint_figure\u001b[1;34m(fig, fmt, bbox_inches, base64, **kwargs)\u001b[0m\n\u001b[0;32m    149\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mbackend_bases\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m FigureCanvasBase\n\u001b[0;32m    150\u001b[0m     FigureCanvasBase(fig)\n\u001b[1;32m--> 152\u001b[0m fig\u001b[38;5;241m.\u001b[39mcanvas\u001b[38;5;241m.\u001b[39mprint_figure(bytes_io, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkw)\n\u001b[0;32m    153\u001b[0m data \u001b[38;5;241m=\u001b[39m bytes_io\u001b[38;5;241m.\u001b[39mgetvalue()\n\u001b[0;32m    154\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m fmt \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msvg\u001b[39m\u001b[38;5;124m'\u001b[39m:\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\backend_bases.py:2295\u001b[0m, in \u001b[0;36mFigureCanvasBase.print_figure\u001b[1;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[0;32m   2289\u001b[0m     renderer \u001b[38;5;241m=\u001b[39m _get_renderer(\n\u001b[0;32m   2290\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfigure,\n\u001b[0;32m   2291\u001b[0m         functools\u001b[38;5;241m.\u001b[39mpartial(\n\u001b[0;32m   2292\u001b[0m             print_method, orientation\u001b[38;5;241m=\u001b[39morientation)\n\u001b[0;32m   2293\u001b[0m     )\n\u001b[0;32m   2294\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(renderer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_draw_disabled\u001b[39m\u001b[38;5;124m\"\u001b[39m, nullcontext)():\n\u001b[1;32m-> 2295\u001b[0m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfigure\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   2297\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m bbox_inches:\n\u001b[0;32m   2298\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m bbox_inches \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtight\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\artist.py:73\u001b[0m, in \u001b[0;36m_finalize_rasterization.<locals>.draw_wrapper\u001b[1;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[0;32m     71\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(draw)\n\u001b[0;32m     72\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdraw_wrapper\u001b[39m(artist, renderer, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m---> 73\u001b[0m     result \u001b[38;5;241m=\u001b[39m draw(artist, renderer, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m     74\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m renderer\u001b[38;5;241m.\u001b[39m_rasterizing:\n\u001b[0;32m     75\u001b[0m         renderer\u001b[38;5;241m.\u001b[39mstop_rasterizing()\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\artist.py:50\u001b[0m, in \u001b[0;36mallow_rasterization.<locals>.draw_wrapper\u001b[1;34m(artist, renderer)\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m artist\u001b[38;5;241m.\u001b[39mget_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m     48\u001b[0m         renderer\u001b[38;5;241m.\u001b[39mstart_filter()\n\u001b[1;32m---> 50\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     51\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[0;32m     52\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m artist\u001b[38;5;241m.\u001b[39mget_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\figure.py:2837\u001b[0m, in \u001b[0;36mFigure.draw\u001b[1;34m(self, renderer)\u001b[0m\n\u001b[0;32m   2834\u001b[0m         \u001b[38;5;66;03m# ValueError can occur when resizing a window.\u001b[39;00m\n\u001b[0;32m   2836\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpatch\u001b[38;5;241m.\u001b[39mdraw(renderer)\n\u001b[1;32m-> 2837\u001b[0m \u001b[43mmimage\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_draw_list_compositing_images\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   2838\u001b[0m \u001b[43m    \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43martists\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msuppressComposite\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   2840\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m sfig \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msubfigs:\n\u001b[0;32m   2841\u001b[0m     sfig\u001b[38;5;241m.\u001b[39mdraw(renderer)\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\image.py:132\u001b[0m, in \u001b[0;36m_draw_list_compositing_images\u001b[1;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[0;32m    130\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m not_composite \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m has_images:\n\u001b[0;32m    131\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m a \u001b[38;5;129;01min\u001b[39;00m artists:\n\u001b[1;32m--> 132\u001b[0m         \u001b[43ma\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    133\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    134\u001b[0m     \u001b[38;5;66;03m# Composite any adjacent images together\u001b[39;00m\n\u001b[0;32m    135\u001b[0m     image_group \u001b[38;5;241m=\u001b[39m []\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\artist.py:50\u001b[0m, in \u001b[0;36mallow_rasterization.<locals>.draw_wrapper\u001b[1;34m(artist, renderer)\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m artist\u001b[38;5;241m.\u001b[39mget_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m     48\u001b[0m         renderer\u001b[38;5;241m.\u001b[39mstart_filter()\n\u001b[1;32m---> 50\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     51\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[0;32m     52\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m artist\u001b[38;5;241m.\u001b[39mget_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\axes\\_base.py:3091\u001b[0m, in \u001b[0;36m_AxesBase.draw\u001b[1;34m(self, renderer)\u001b[0m\n\u001b[0;32m   3088\u001b[0m         a\u001b[38;5;241m.\u001b[39mdraw(renderer)\n\u001b[0;32m   3089\u001b[0m     renderer\u001b[38;5;241m.\u001b[39mstop_rasterizing()\n\u001b[1;32m-> 3091\u001b[0m \u001b[43mmimage\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_draw_list_compositing_images\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   3092\u001b[0m \u001b[43m    \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43martists\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfigure\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msuppressComposite\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   3094\u001b[0m renderer\u001b[38;5;241m.\u001b[39mclose_group(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maxes\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m   3095\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstale \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\image.py:132\u001b[0m, in \u001b[0;36m_draw_list_compositing_images\u001b[1;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[0;32m    130\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m not_composite \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m has_images:\n\u001b[0;32m    131\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m a \u001b[38;5;129;01min\u001b[39;00m artists:\n\u001b[1;32m--> 132\u001b[0m         \u001b[43ma\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    133\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    134\u001b[0m     \u001b[38;5;66;03m# Composite any adjacent images together\u001b[39;00m\n\u001b[0;32m    135\u001b[0m     image_group \u001b[38;5;241m=\u001b[39m []\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\artist.py:50\u001b[0m, in \u001b[0;36mallow_rasterization.<locals>.draw_wrapper\u001b[1;34m(artist, renderer)\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m artist\u001b[38;5;241m.\u001b[39mget_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m     48\u001b[0m         renderer\u001b[38;5;241m.\u001b[39mstart_filter()\n\u001b[1;32m---> 50\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     51\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[0;32m     52\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m artist\u001b[38;5;241m.\u001b[39mget_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\axis.py:1163\u001b[0m, in \u001b[0;36mAxis.draw\u001b[1;34m(self, renderer, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1159\u001b[0m ticklabelBoxes, ticklabelBoxes2 \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_tick_bboxes(ticks_to_draw,\n\u001b[0;32m   1160\u001b[0m                                                         renderer)\n\u001b[0;32m   1162\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m tick \u001b[38;5;129;01min\u001b[39;00m ticks_to_draw:\n\u001b[1;32m-> 1163\u001b[0m     \u001b[43mtick\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1165\u001b[0m \u001b[38;5;66;03m# scale up the axis label box to also find the neighbors, not\u001b[39;00m\n\u001b[0;32m   1166\u001b[0m \u001b[38;5;66;03m# just the tick labels that actually overlap note we need a\u001b[39;00m\n\u001b[0;32m   1167\u001b[0m \u001b[38;5;66;03m# *copy* of the axis label box because we don't want to scale\u001b[39;00m\n\u001b[0;32m   1168\u001b[0m \u001b[38;5;66;03m# the actual bbox\u001b[39;00m\n\u001b[0;32m   1170\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_label_position(renderer)\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\artist.py:50\u001b[0m, in \u001b[0;36mallow_rasterization.<locals>.draw_wrapper\u001b[1;34m(artist, renderer)\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m artist\u001b[38;5;241m.\u001b[39mget_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m     48\u001b[0m         renderer\u001b[38;5;241m.\u001b[39mstart_filter()\n\u001b[1;32m---> 50\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     51\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[0;32m     52\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m artist\u001b[38;5;241m.\u001b[39mget_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\axis.py:299\u001b[0m, in \u001b[0;36mTick.draw\u001b[1;34m(self, renderer)\u001b[0m\n\u001b[0;32m    296\u001b[0m renderer\u001b[38;5;241m.\u001b[39mopen_group(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m, gid\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_gid())\n\u001b[0;32m    297\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m artist \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgridline, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtick1line, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtick2line,\n\u001b[0;32m    298\u001b[0m                \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlabel1, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlabel2]:\n\u001b[1;32m--> 299\u001b[0m     \u001b[43martist\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    300\u001b[0m renderer\u001b[38;5;241m.\u001b[39mclose_group(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m)\n\u001b[0;32m    301\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstale \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\artist.py:50\u001b[0m, in \u001b[0;36mallow_rasterization.<locals>.draw_wrapper\u001b[1;34m(artist, renderer)\u001b[0m\n\u001b[0;32m     47\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m artist\u001b[38;5;241m.\u001b[39mget_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m     48\u001b[0m         renderer\u001b[38;5;241m.\u001b[39mstart_filter()\n\u001b[1;32m---> 50\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     51\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[0;32m     52\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m artist\u001b[38;5;241m.\u001b[39mget_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\text.py:685\u001b[0m, in \u001b[0;36mText.draw\u001b[1;34m(self, renderer)\u001b[0m\n\u001b[0;32m    682\u001b[0m renderer\u001b[38;5;241m.\u001b[39mopen_group(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtext\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_gid())\n\u001b[0;32m    684\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cm_set(text\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_wrapped_text()):\n\u001b[1;32m--> 685\u001b[0m     bbox, info, descent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_layout\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    686\u001b[0m     trans \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_transform()\n\u001b[0;32m    688\u001b[0m     \u001b[38;5;66;03m# don't use self.get_position here, which refers to text\u001b[39;00m\n\u001b[0;32m    689\u001b[0m     \u001b[38;5;66;03m# position in Text:\u001b[39;00m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\text.py:317\u001b[0m, in \u001b[0;36mText._get_layout\u001b[1;34m(self, renderer)\u001b[0m\n\u001b[0;32m    315\u001b[0m clean_line, ismath \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_preprocess_math(line)\n\u001b[0;32m    316\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m clean_line:\n\u001b[1;32m--> 317\u001b[0m     w, h, d \u001b[38;5;241m=\u001b[39m \u001b[43mrenderer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_text_width_height_descent\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    318\u001b[0m \u001b[43m        \u001b[49m\u001b[43mclean_line\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fontproperties\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mismath\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mismath\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    319\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    320\u001b[0m     w \u001b[38;5;241m=\u001b[39m h \u001b[38;5;241m=\u001b[39m d \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py:270\u001b[0m, in \u001b[0;36mRendererAgg.get_text_width_height_descent\u001b[1;34m(self, s, prop, ismath)\u001b[0m\n\u001b[0;32m    268\u001b[0m flags \u001b[38;5;241m=\u001b[39m get_hinting_flag()\n\u001b[0;32m    269\u001b[0m font \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_agg_font(prop)\n\u001b[1;32m--> 270\u001b[0m \u001b[43mfont\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mset_text\u001b[49m\u001b[43m(\u001b[49m\u001b[43ms\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0.0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mflags\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    271\u001b[0m w, h \u001b[38;5;241m=\u001b[39m font\u001b[38;5;241m.\u001b[39mget_width_height()  \u001b[38;5;66;03m# width and height of unrotated string\u001b[39;00m\n\u001b[0;32m    272\u001b[0m d \u001b[38;5;241m=\u001b[39m font\u001b[38;5;241m.\u001b[39mget_descent()\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "avail['2019-01-01':].plot(kind='bar', stacked=True, figsize=(10, 7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "100b8941",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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unXrYsKECZU0KtIFg6aISCOhPF9eQV4lj6R8CUFThlLDSh4JERERERERERGVF6E834s87cp3CaX5nK2coSepOi8+iaqTcePGVfYQiDSytLTE3bt3K3sYVEqenp548uQJFi5cCFdX1wo9lpWVFb744osKPUZptGrVCq1atZJbx+uaqjJHR0d8+umnlT2MMnFycoKTk5PC+okTJ1bCaKg0GDRFRBoZ6BUFTeUW5FbySMpXTgGDpoiIiIiIiIiIqhsh01RWXpZW7eOfxAMAXKxdKmxMREREVLGSkpIqewhERPQa4p/NEJFG1TZoSsg0pcegKSIiIiIiIiKi6kLMNJWvXaap+MdFQVOuNSs2KwURERERERFVLQyaIiKNhExMQpBRdSGcj5HUqJJHQkRERERERERE5cVE3wSA7uX5XGoy0xQREREREdGbhEFTRKRRtc00xfJ8RERERERERETVjvAHctn52RrbpmWn4e/MvwEwaIqIiIiIiOhNw6ApItJIX08fQPULmhJ+cWYgNajkkRARERERERERUXkRyvNl5WVpbCuU5nvL/C2YG5pX6LiIiIiIiIioamHQFBFpJGaayq9eQVPC+bA8HxERERERERFR9VG8PF9hYaHatizNR0RERERE9OZi0BQRaSSUr6uumaYM9Viej4iIiIiIiIioujCWFmWaKkQhcgpy1LaNf1KUacrV2rXCx0VERERERERVC4OmiEgjIdNUTr76XzK9boRfmglBYURERERERERE9Poz0n+ZVfxF3gu1bYVMU641GTRFVFEePXqEunXrIikpqbKHQlTpkpKSIJFIEBsbq/U+wcHB6NWrV5mPHRkZCSsrqzL3UxqFhYUICQmBtbW1eP4+Pj4YN25cpYxHWzNmzEBISEi59afrZ1ma60UVR0dHLF26VOX2hw8fom7durh7926Zj/UqvMrrJzo6GhKJBE+fPi11HyXHW/LzkEgk2L17d6n7L+9+XpXyer5pKycnB05OTjh58uQrO2Z1cODAATRv3hwFBQXiupycHDg6OuLcuXOVOLLywaApItJILM9XzTJNCUFgDJoiIiIiIiIiIqo+DPQMoC/RB6A+aCqvIA+3ntwCwPJ8RBVp7ty56NmzJxwdHQGof/ms7CWysbEx7ty5I9euV69ee9T8AgABAABJREFUCA4OFr8u/tJVIpGoXcLCwsRABGXL6dOnARQFmAjrpFIpatasiTZt2mDOnDlIS0vT+vwbNWoEIyMjPHjwQGGbj4+PeAxjY2O4uLhg/vz5SkuLnjp1ClKpFF27dlXYVvJ8DA0N4eTkhK+++kptmVJd5sHNzU1h/+3bt0MikYifrdC+eGBO8XnU09ODjY0N+vXrh+TkZK3mS7he1C3R0dFyxym+GBsbi33/888/GD16NOzt7WFkZASZTAZ/f3+cOHFC5RxpO2eDBg3San87OzukpKSgSZMmWh9z2bJliIyM1Lp9eSp5vtbW1vD29kZMTIxO/Rw4cACRkZHYu3eveP47d+7El19+WUEjL7sHDx5g2bJlmDZtmrguODhY6ed/69YtrfrU9bMszfVSWrVr18aQIUMwa9asUu1/8eJF9OnTB/Xq1YOxsTGcnZ0xatQo3Lx5s5xHWn4cHR3Fz9DExASOjo7o27cv/ve//8m18/LyQkpKCiwtLTX2qep7XHlf72FhYWjevLnC+pSUFLz//vvldhxdjl2aIL+S94S2wXA7d+5E586dUatWLZ2OuWrVKjRo0ABeXl7iuuL3sr6+Puzt7TFhwgRkZ2drfR6A8sDEygxWFfz444/w8fFBjRo1VP789fjxYwQFBaFGjRqwsrLCiBEjkJ6eLm4PCAiAgYEBNm3aJK4zNDREaGgoJk+e/CpOo0IxaIqINDKQVu+gKSOpkYaWRERERERERET0OjHWL3pJ/iJfddDUnWd3kFOQA1N9U9S3qP+qhkb0RsnMzER4eDhGjBhR6j4kEglmzpypdfuUlBRxWbp0KWrUqCG3LjQ0VGx76NAhuW0pKSlo2bKluF3Y9+7duzh58iRCQkKwfv16NG/eHPfv39c4luPHjyMrKwsffvgh1q1bp7TNqFGjkJKSgvj4eEydOhUzZ87EqlWrFNqFh4fj008/xbFjx1QeWzifhIQEzJ49G3PnzsXatWs1jlPTPJiZmSE1NRWnTp1SGJO9vb3G/oV5vHfvHnbs2IH4+Hj06dNHoZ2y+RKCFYSlb9++CAgIkFsnvPwu+VmnpKTIBdwFBgbi4sWLWLduHW7evIk9e/bAx8cHjx490ngOmubs+++/12o/qVQKmUwGfX19rY9laWmp9qV7Tk7FVwkRzvfYsWOwtbVFt27d8Pfff2u9f2JiImxsbODl5SWev7W1NSwsLCpw1GWbmzVr1sDLywsODg5y60tefykpKWjQoIFWfWr6LEvSdL0UFhYiLy9P6/40GTZsGDZt2oTHjx/rtN/evXvRtm1bZGdnY9OmTYiLi8PGjRthaWmJGTNmKN2nvMdeWnPmzBGfwevXr4eVlRX8/Pwwd+5csY2hoSFkMhkkEkmpj/MqrncAkMlkMDJ6fd576npPCDIyMvB///d/WLhwodb7FBYWYsWKFUp/JomIiEBKSgpu376NlStXYsOGDfjqq690HldFyc/Pl8vypIvMzEwEBATgiy++UNkmKCgI165dw8GDB7F3714cO3ZMIctecHAwli9frrDf8ePHce3atVKNrapg0BQRaVRdM01l5xdFCAvnR0RERERERERE1YMYNKUm05RQms+5pjP0JPxVOb1eCgsLUZCZWSmLusxFJf32228wMjJC27ZtS32uY8aMwcaNG3H16lWt2stkMnGxtLSERCKRW2dubi62rVWrltw2mUwGA4OXvy8W9rWxsYGbmxtGjBiBkydPIj09HZMmTdI4lvDwcAwcOBCDBw9WGbxkamoKmUwGBwcHDBs2DB4eHjh48KBcm/T0dGzduhWjR49G165dVWaqEc7HwcEBQUFBaN++PS5cuKBxnJrmQV9fHwMHDpQ7h7t37yI6OhoDBw7U2H/xefTy8sKIESNw9uxZPHv2TK6dsvkSghWExcTERMwSJSyGhoZyxym+1KtXDwDw9OlTxMTEYOHChfD19YWDgwNat26NqVOnokePHhrPQdOcWVpaKs2y8vTpUzEbFqCYiSU/Px8jRoxAgwYNYGJiAldXVyxbtkzuWCXLV/n4+GDMmDEYN24cateuDX9/fwDA4sWL0bRpU5iZmcHOzg4ff/yxXKYQwX//+1+4ubnB3NxcDADS9nybNGmCL774As+ePcOZM2fE7VevXsX7778Pc3Nz1KtXD4MHD8bDhw/F8X/66adITk6Wy0ymrFzZvHnzMHz4cFhYWMDe3h4//vij3Dj++usv9O3bF1ZWVrC2tkbPnj3lSn8KczV37lzY2trC1dUVc+bMUZqpqXnz5ioDegAgKioK3bt3V1hf8vqTyWSQSqVKy4yNGzcOPj4+CuMTHDhwAP/3f/8HKysr1KpVC926dUNiYqK4veT1ImQx2r9/P1q2bAkjIyMcP34ciYmJ6NmzJ+rVqwdzc3O88847OHTokMLYMzMz1c6vu7s7bG1tsWvXLpXzoqzPYcOGoUuXLtizZw/8/PzQoEEDtGnTBt9++y1Wr16tduzazFtGRgaGDBkCc3Nz2NjYYNGiRQrjyM7ORmhoKN566y2YmZmhTZs24n2njoWFBWQyGezt7dGhQwf8+OOPmDFjBmbOnIn4+Hi5sQsZeu7cuYPu3bujZs2aMDMzg7u7O3777TckJSXB19cXAFCzZk1IJBIxK6Ku5QQnT54MFxcXmJqaomHDhpgxYwZyc4ve00ZGRmL27Nm4dOmSmCFJ+L5QsjzflStX0LFjR5iYmKBWrVoICQmRey4I8//tt9/CxsYGtWrVwieffCIeqyyELEvqnjnFP//g4GAcPXoUy5YtE89LVWnfwYMHY+bMmfDz89N6POfPn0diYqLSjI1WVlaQyWSws7NDt27d0LNnT7nvn5ruMR8fH9y5cwfjx4+Xy4I4bNgwpKWlyWW7BDRfr8Lc7dmzB40bNxbvFwMDA4XMlePGjcO7776r8rzHjRuHKVOmqPxZLC4uDgcOHMCaNWvQpk0b/N///R++++47REVFyQVpd+/eHefOnZN7RtWsWRPt27dHVFSUyuO/Dvg/QSLSyFCv6D8cufnVK2hKOB9mmiIiIiIiIiIiql6MpUVBU1l5WSrbxD8uehHG0nz0OirMykJ8i5aVshRmqb6vSoqJiZHLWFQa7du3R7du3TBlypQy9VNe6tati6CgIOzZswf5+fkq2z1//hzbt2/HoEGD0KlTJ6SlpaktaVZYWIiYmBjcuHFDDAISbNu2DY0aNYKrqysGDRqEtWvXagxeO3fuHM6fP482bdrodoIqDB8+HNu2bUNmZiaAohe6AQEBYlCStlJTU7Fr1y5IpVJIpVJxva7zpStzc3OYm5tj9+7dOpdcqkgFBQWoX78+tm/fjuvXr2PmzJn44osvsG3bNrX7rVu3DoaGhjhx4oSYmUxPTw/Lly/HtWvXsG7dOvzvf/9TCO7LzMzEt99+iw0bNuDYsWNITk6Wy76mSVZWFtavXw8A4nX69OlTdOzYEZ6enjh37hwOHDiAv//+G3379gVQVH5rzpw5qF+/PlJSUvDHH3+o7H/RokVo1aoVLl68iI8//hijR48WA1dyc3Ph7+8PCwsLxMTE4MSJE2IQRvGMUocPH0Z8fLyYMWX48OGIi4uTO+7Fixdx+fJlDBs2TOk4Hj9+jOvXr6NVq1Zaz01pZGRkYMKECTh37hwOHz4MPT099O7dW2NGmSlTpmDBggWIi4uDh4cH0tPT0aVLFxw+fBgXL15EQEAAunfvrlAGU938Clq3bq3Tvfff//4XDx8+VBlIWjKLUMmxa+Pzzz/H0aNH8csvv+D3339HdHS0QkDomDFjcOrUKURFReHy5cvo06cPAgICkJCQoPW5CD777DMUFhbil19+Ubr9k08+QXZ2No4dO4YrV65g4cKFMDc3h52dHXbs2AEAiI+PR0pKikIQpLYsLCwQGRmJ69evY9myZfjpp5+wZMkSAEC/fv0wceJEuLu7i9nO+vXrp9BHRkYG/P39UbNmTfzxxx/Yvn07Dh06hDFjxsi1O3LkCBITE3HkyBGsW7cOkZGR5VYSVJdnzrJly9CuXTsxA2NKSgrs7OzKZRxA0c8kLi4uGjN+3bx5E//73//kvn9qusd27tyJ+vXri5nLhCyIJTNeCueuzfWamZmJhQsXYs2aNbh27RpatWqFhg0bYsOGDWKb3NxcbNq0CcOHDy/1vJw6dQpWVlZyzzs/Pz/o6enJBcfa29ujXr16Cs8HXZ8ZVZH2uR+J6I1VbcvzFRT9EG0oNdTQkoiIiIiIiIiIXidCpikh07gy8U+KXhK61nR9JWMiehPduXMHtra2Ze5n/vz58PDwQExMjNpsCrry8vKCnp58fgFlmXlKatSoEZ4/f45Hjx6hbt26SttERUXB2dkZ7u7uAID+/fsjPDxcYfwrV67EmjVrkJOTg9zcXBgbG2Ps2LFybcLDwzFo0CAARaXB0tLScPToUblMLMXPR+grJCQEQ4YM0Xg+2syDp6cnGjZsiJ9//hmDBw9GZGQkFi9ejD///FNj/2lpaTA3N0dhYaEYdDV27FiYmZmJbbSdL22OU9y7776L/fv3Q19fH5GRkRg1ahRWrVqFFi1awNvbG/3799c6cKO4knMWExODmjVr6tyPgYEBZs+eLX7doEEDnDp1Ctu2bRODjpRxdnbG119/LbeuZNamr776Cv/5z3+wcuVKcX1ubi5WrVqFt99+G0DRi/s5c+ZoHKdwvpn/Zptr2bIl3nvvPQDAihUr4OnpiXnz5ont165dCzs7O9y8eVMMUhBKzanTpUsXfPzxxwCKMu0sWbIER44cgaurK7Zu3YqCggKsWbNGLJMWEREBKysrREdHo3PnzgCKykmuWbNGLvjQ398fEREReOedd8T9vL290bBhQ6XjSE5ORmFhodLn1969e+Wus/fffx/bt2/XOIfKBAYGyn29du1a1KlTB9evX1eaHUswZ84cdOrUSfza2toazZo1E7/+8ssvsWvXLuzZs0cuQEbd/ApsbW1x8eJFrc9BCPJo1KiRVu1Ljl2T9PR0hIeHY+PGjeI1t27dOtSv/7K0cnJyMiIiIpCcnCx+ZqGhoThw4AAiIiLkrk1tWFtbo27duiqzHCUnJyMwMBBNmzYFALnryNraGkBRgG1pys4Jpk+fLv7b0dERoaGhiIqKwqRJk2BiYgJzc3Po6+urvac2b96MFy9eYP369eLzdsWKFejevTsWLlwoBr3WrFkTK1asgFQqRaNGjdC1a1ccPnwYo0aNKvX4Bbo8cywtLWFoaChmYCxv6n4mGTBgAKRSKfLy8pCdnY1u3bph6tSp4vZmzZqpvcesra0hlUrFzGXFz0nIgijQ9nrNzc3FypUr5Y47YsQIRERE4PPPPwcA/Prrr3jx4oXa7xeaPHjwQOFnGaGEasmsVra2tnJlb1Wte90waIqINKqO5fkKCwvFX5oxaIqIiIiIiIiIqHoRMk1pU57P1ZpBU/T6kZiYwPXC+Uo7traysrJgbGxc5mM2btwYQ4YMwZQpU3DixIky9yfYunUr3NzcdN5PyPIkBG4os3btWjHQCQAGDRoEb29vfPfdd3JZLoKCgjBt2jQ8efIEs2bNgpeXF7y8vMTt8fHxOHv2rFguS19fH/369UN4eLhC0JRwPrm5ubh69So+/fRT1KxZEwsWLFB7PtrOw/DhwxEREQF7e3tkZGSgS5cuWLFihcb9LCwscOHCBeTm5mL//v3YtGkT5s6dK9dG2/nS5jjFmRS7XgMDA9G1a1fExMTg9OnT2L9/P77++musWbNGLKGlrZJzZmdnp1WZO2W+//57rF27FsnJycjKykJOTg6aN2+udh9lGdwOHTqE+fPn48aNG3j27Bny8vLw4sULZGZmwtTUFEBROUgheAEAbGxskJqaqnGMW7duRaNGjXD16lVMmjQJkZGRYgnHS5cu4ciRIwoBa0BRSSsXF+0zOhYPYBMCDYTxXbp0Cbdu3VK4Hl68eCFXLqpp06YK2dpGjRqF4cOHY/HixdDT08PmzZvFrD3KZP2bUU/Z88vX1xc//PCD+HXx4D9dJSQkYObMmThz5gwePnwoZphKTk5WGzRVMgNWeno6wsLCsG/fPqSkpCAvLw9ZWVkKmabUza/AxMREDG7Uhi4lW5WNXZPExETk5OTIZf2xtraWC/S6cuUK8vPzFa617Oxs1KpVS6fjCQoLC1U+48eOHYvRo0fj999/h5+fHwIDA0sVfKnO1q1bsXz5ciQmJiI9PR15eXmoUaOGTn3ExcWhWbNmctdo+/btUVBQgPj4eDFoyt3dXS7zn42NDa5cuVIu51HaZ05FUPczyZIlS+Dn54f8/HzcunULEyZMwODBg8Wyc9reY9rQ9no1NDRUuK6Cg4Mxffp0nD59Gm3btkVkZCT69u1bpueQLpQ9H3R9ZlRFDJoiIo2qY9BUXkGe+G8GTRERERERERERVS9CpqmsfOVlxJ6+eIrUzKIXNs41nV/ZuIjKi0QigeTfIIiqrHbt2njy5IncOuGlb1pamkIWjqdPn8LS0lJpX7Nnz4aLiwt2795dbuOzs7ODk5OTzvvFxcWhRo0aKl/GX79+HadPn8bZs2cxefJkcX1+fj6ioqLksndYWlqKY9i2bRucnJzQtm1b+Pn5ASjKMpWXlyeXHaOwsBBGRkZYsWKF3HwVPx83NzckJiZixowZCAsLUxu8pu08BAUFYdKkSQgLC8PgwYOhr6/da0Y9PT2FcY0ePVosMaTLfGl7HFWMjY3RqVMndOrUCTNmzMDIkSMxa9YsnYOmlM2ZkHmqeBBJbq769ypRUVEIDQ3FokWL0K5dO1hYWOCbb76RK4mkTMkX5ElJSejWrRtGjx6NuXPnwtraGsePH8eIESOQk5MjBk0JgU4CiUSiVdCLnZ0dnJ2d4ezsjLy8PPTu3RtXr16FkZER0v+fvTuPqyn//wD+ut12LaRS0UYroTAk31FMhKaxji3STqGJaawTWRrLjKUZM4xvm3WyG8NgMErWyMSkFFka1KRSSaXt/v7od8+3091O20Tzfj4e5/Hg3M/5bPfcUzP37f0uLWUy1zSkr68vs+/6xM1PGEhUWlqK/v37Y9++fSLX6ejoMH8WFzzg5uYGJSUlHDt2DIqKiqiqqsKkSZMkzkNbWxsA8OrVK1bfwv7F3WdycnIieynr/Xdzc4OxsTH++9//wsDAALW1tbCxsWGVGxSn4RpDQkJw7tw5fPPNNzAzM4OKigomTZok0o+0/RUqLCwUWbM0wsCP+/fvY/DgwTLbN5x7U/atodLSUvD5fCQnJ7OCfwCIDeaTpaCgAC9fvoSpqanY1319feHi4oJTp07ht99+w7p167Bp0ybMnz+/0WOJc+3aNbi7u2PVqlVwcXGBpqYm4uLisGnTphbpvyEu90V9GhoaKC4uFjlfVFQEAKyfS0195rQGbW1ticFgenp6zOfa0tISr1+/xrRp07B27VqYmZlx/oxxwfV+VVFREQnc09XVhZubG2JiYmBqaorTp08jPj6+0XOoT1zwZHV1NQoLC0Uyfol7PjT2mfEukpPdhBDyb8eU56tpP0FT9VOzK8pR0BQhhBBCCCGEEEJIeyIMmpKUaUpYmq+bWjd0UPhn/mU2If9GdnZ2SEtLY50zNzeHnJwckpPZmbIePXqE4uJiiVlpDA0NMW/ePCxbtgw1NTWtNmdZ8vLysH//fowbN06kpJ1QVFQUhg4dijt37iAlJYU5Fi5ciKioKIl9q6mp4bPPPkNISAgEAgGqq6uxe/dubNq0idXPnTt3YGBggJ9++knqXIWlhprypa44Wlpa+OSTT5CQkABvb+8m97NkyRIcOHCAyQrV1P1qCT179sSbN29apC/hl8b1M06lpKRIvebKlStwcHBAYGAg7OzsYGZmxsqaxFVycjJqa2uxadMm2Nvbw8LCAi9evGh0P1xMmjQJ8vLyTNm/fv364d69ezAxMYGZmRnraMnsJ/369cODBw+gq6srMo6kYEsheXl5zJo1CzExMYiJicHUqVNZWcga6tGjBzQ0NESeX9Lo6OiIZBuT9v4XFBQgIyMDX375JT766CNYW1uLBJlydeXKFXh6emL8+PHo3bs39PT0JJaWkyU1NRV2dnac248cORLa2toi5SKFhIE0ksjatx49ekBBQYEVSPjq1StkZmYyf7ezs0NNTQ3y8vJE7o2mlHmLiIiAnJwcxo0bJ7GNoaEh5syZg6NHj+Lzzz/Hf//7XwBgspw15+fU1atXYWxsjOXLl2PAgAEwNzcXKX+mqKgocwxra2vcuXOH9Yy7cuUK5OTkWJm6GsvS0hLPnj3D33//zTp/+/ZtKCsrw8jIqMl9c1lXU9nZ2eH+/fucgraEwUzCrHNcPmPi5i7uXHPvV19fXxw4cAA7d+5Ejx49MGTIEJnXSDN48GAUFRWxfi/7/fffUVtby8rwJszq1/D50NhnxruIgqYIITIJM01V1rbMf1i9C+qvhTJNEUIIIYQQQgghhLQvKvJ1X4RKCpoSluaz6MS9ZBAhpPFcXFxw7949ViCAuro6fH198fnnn+PEiRN4/PgxLl26BHd3d9jb27NK0zW0dOlSvHjxAufPn2+R+RUUFCA3N5d1VFT877khEAiQm5uLnJwcpKenIzo6Gg4ODtDU1JRY8q6qqgp79uzBtGnTYGNjwzp8fX1x48YN3Lt3T+KcZs+ejczMTBw5cgQnT57Eq1ev4OPjI9LXxIkTRQKKhOt59uwZTp8+jYiICAwbNkxmSSdZ+1BfbGws8vPzYWVlJbVPaQwNDTF+/HisWLGi2ftVn/D9anjU1taioKAAw4cPx969e3H37l08fvwYhw4dwsaNGzF27Ngmr6U+FRUV2NvbY/369UhPT0dCQgK+/PJLqdeYm5vj1q1bOHv2LDIzMxEaGoqbN282emwzMzNUVVXhu+++w6NHj7Bnzx7s2LGjqUuRisfjISgoCOvXr0dZWRnmzp2LwsJCTJs2DTdv3kRWVhbOnj0LLy+vFg1+cHd3h7a2NsaOHYvExEQ8fvwY8fHxCAoKwrNnz2Re7+vri99//x1nzpyRGfQnJycHZ2dnXL58mfP8hg8fjlu3bmH37t148OABVq5cidTUVIntO3XqhM6dO2Pnzp14+PAhfv/9dyxcuJDzePWZm5vj6NGjTFDl9OnTpWYKkqSsrAzJyckYOXIk52s6dOiAyMhInDp1Cp988gnOnz+PJ0+e4NatW1i0aBHmzJkj9XpZ+6ampgYfHx988cUX+P3335GamgpPT09W0KqFhQXc3d3h4eGBo0eP4vHjx0hKSsK6detw6tQpqeO/fv0aubm5+Ouvv3Dp0iX4+/tj7dq1CA8Pl5i5Ljg4GGfPnsXjx49x+/ZtXLx4kSnXaWxsDB6Ph5MnT+Lly5coLS3lupUMc3NzZGdnIy4uDllZWfj222+ZEq1CJiYmePz4MVJSUpCfn4+3b9+K9OPu7g5lZWXMmjULqampuHjxIubPn4+ZM2cypfmawsXFBZaWlpg2bRquXr2KR48e4fDhw/jyyy/x2WefiWRPagwTExPcuHEDT548YZWsbKiwsBApKSlMYGNGRgZSUlKQm5srse9hw4ahtLRU7M+UoqIi5Obm4sWLF0hISMDq1athYWHBvK9cPmMmJia4dOkSnj9/jvz8fOZcaWkpLly4gPz8fJSVlTXrfgXq9l9DQwNr166Fl5eXzPa5ublISUnBw4cPAdSVB0xJSUFhYSGAuuC6UaNGwc/PD0lJSbhy5QrmzZuHqVOnsrJcXr9+HUpKSiIZ5RITExv1zHgXUdAUIUSm9lier7KmLmhKXk4ecjx6FBJCCCGEEEIIIYS0J0p8JQDsbOP1ZRTWZZqy1Gr6v7InhMjWu3dv9OvXDwcPHmSdj4iIwKxZs7B48WL06tULnp6e6NOnD3755ReRUjT1aWlpYfHixRIDehrL2dkZ+vr6rKN++b+SkhLo6+uja9euGDx4MH788UfMmjULf/zxh8SyYydOnEBBQQHGjx8v8pq1tTWsra2lZk/S0tKCh4cHwsLCEBUVBWdnZ7FZdCZOnIhbt27h7t27IusxMTGBv78/xowZgwMHDjR7H+pTUVGRWJawMRYsWIBTp05h8+bNzdqv+oTvV8MjLy8PampqGDRoELZs2YKhQ4fCxsYGoaGh8PPzw7Zt25g+PD094eTk1OR1RUdHo7q6Gv3790dwcDDWrl0rtf3s2bMxYcIETJkyBYMGDUJBQQECAwMbPW7fvn2xefNmbNiwATY2Nti3bx/WrVvX1GXINGvWLFRVVWHbtm0wMDDAlStXUFNTg5EjR6J3794IDg5Gx44dJWZjawpVVVVcunQJRkZGmDBhAqytreHj44OKigqZgYFAXdCDg4MDrKysWNlTJPH19UVcXBzn4CMXFxeEhoZi0aJF+OCDD/D69Wt4eHhIbC8nJ4e4uDgkJyfDxsYGCxYswNdff81prIY2b96MTp06wcHBAW5ubnBxcUG/fv0a3c/PP/8MIyMjfPjhh8y52NhYqc9lABg7diyuXr0KBQUFTJ8+HVZWVpg2bRqKi4tlfga47NvXX3+NDz/8EG5ubnB2dsZ//vMf9O/fn9UmJiYGHh4e+Pzzz2FpaYlx48bh5s2bMrMerVixAvr6+jAzM8PMmTNRXFyMCxcusEqFNlRTU4O5c+cywSYWFhZM5rWuXbti1apVWLJkCbp06YJ58+ZJHV+cTz75BAsWLMC8efNga2uLq1evIjQ0lNVm4sSJGDVqFIYNGwYdHR2xmQdVVVVx9uxZFBYW4oMPPsCkSZPw0UcfsZ55TSEvL4/ffvsNRkZGTMDrypUr8dlnn2HNmjXN6jskJAR8Ph89e/aEjo4OsrOzxbY7ceIE7Ozs4OrqCgCYOnUq7OzspAaLdu7cGePHjxdb4tPLywv6+vro1q0bpk2bhl69euH06dNMGVoun7HVq1fjyZMn6NGjB5N50MHBAXPmzMGUKVOgo6PDZGRr6v0K1D07PD09UVNTI/UZI7Rjxw7Y2dkxpW6HDh0KOzs7nDhxgmmzb98+WFlZ4aOPPsKYMWPwn//8Bzt37mT189NPP8Hd3Z0p9wrUlZIsLi6WWu70fcATtFXRyGYoKSmBpqYmiouLOf0QJIQ0z63cW/A66wUTDRP8Mv6Xtp5Oi8guyYbrMVd0UOiA69Ovt/V0CCGEEEIIIYQQQkgLWnVtFQ5nHsZc27mY01c0w8HkXyYjvTAdW5224iPjj9pghoRwV1FRgcePH8PU1BTKysptPZ1GO3XqFL744gukpqa2aAAFIa3B0dERw4YNQ1hYWKv0n5GRASsrKzx48EBiFhvSOgQCAczNzREYGMgpo5NAIMCgQYOwYMECTJs2rUXmMG3aNPD5fOzdu7dF+mtp9vb2CAoKwvTp05lzK1euREJCAuLj49tuYoS0kLt372LEiBHIysqCmppaW0+nyXx8fPDy5UtW4FNrys/Ph6WlJW7dugVTU1Pm/JQpU9C3b18sW7bsH5lHQ9J+R25MTJF8a06SENI+KPDbX6Yp4b8yVJSj0nyEEEIIIYQQQggh7Y0yv+5/mosrz1ddW42HRXXlKag8HyGtz9XVFQ8ePMDz589haGjY1tMhRKLi4mJkZWVxKo/UFIWFhTh8+DA0NDTos/APe/nyJeLi4pCbm8upnBVQV4Zw586d+PPPP5s9fnV1NTIzM3Ht2jXMnj272f21hvz8fEyYMEEkQOz06dPNzkxEyLuiT58+2LBhAx4/fozevXu39XQarbi4GH/++Sf279//jwVMAcCTJ0/www8/sAKmKisr0bt3byxYsOAfm0droaApQohMwsCiqpr2EzRVWVtXnk+RT0FThBBCCCGEEEIIIe2NirwKAKCiRjRo6knxE1TVVkFVXhVd1bv+01Mj5F8pODi4radAiEyampp49uxZq/Xv4+OD5ORkbN++HUpKSq02DhGlq6sLbW1t7Ny5E506deJ8na2tLWxtbZs9fmpqKhwcHDBs2DDMmSOaAfNdoK2tjUWLFomcT0pKaoPZENJ6PD0923oKTTZ27FgkJSVhzpw5GDFixD827oABAzBgwADWOUVFRXz55Zf/2BxaEwVNEUJkUpBrf5mmhAFgFDRFCCGEEEIIIYQQ0v4oy0vONJXxKgNAXZYpOR6VCiOEEPLPOHbsWFtP4V9LIBC06fi2trYoKytr0zkQQt5/VCazddB/ERJCZGrP5fmU+PSvOQghhBBCCCGEEELaG+H/8xGXaSrzVSYAKs1HCCGEEEIIIf92FDRFCJGpPWaaqqypK88nXBshhBBCCCGEEEIIaT+Y8nxSMk1Zaln+o3MihBBCCCGEEPJuoaApQohMwhJ2lTWVbZ7CtKUIg6aoPB8hhBBCCCGEEEJI+yOtPF9mIWWaIoQQQgghhBBCQVOEEA6E2ZgEEKBGUNPGs2kZlbV1QVNUno8QQgghhBBCCCGk/VHm1wVNlVeXs84XVhTiZflLAIB5J/N/fF6EEEIIIYQQQt4dFDRFCJGpfgm79lKi723NWwCAAp/K8xFCCCGEEEIIIYS0N8JMU8L/BySU+aouy5ShuiE6KHT4x+dFCCGEEEIIIeTd0aigqXXr1uGDDz6Auro6dHV1MW7cOGRkZLDaVFRUYO7cuejcuTPU1NQwceJE/P3336w22dnZcHV1haqqKnR1dfHFF1+gurq6+ashhLSK9hg0JSzPpyRHmaYIIYQQQgghhBBC2hthpqmG5fkyCuv+f7ZlJ8t/fE6EEEIIIYQQQt4tjQqaSkhIwNy5c3H9+nWcO3cOVVVVGDlyJN68ecO0WbBgAX755RccOnQICQkJePHiBSZMmMC8XlNTA1dXV1RWVuLq1avYtWsXYmNjsWLFipZbFSGkRcnLyTN/rqppX0FTinzFNp4JIYQQQgghhBBCCGlpwkxTFTXsoClhpimLThb/+JwI+bcqKCiArq4unjx50tZTIaTNPXnyBDweDykpKZyv8fT0xLhx45o9dmxsLDp27NjsfppCIBDA398fWlpazPqdnJwQHBzcJvPhKjQ0FP7+/i3WX2Pfy6bcL5KYmJhg69atEl/Pz8+Hrq4unj171uyx3kcZGRnQ09PD69evW7zvsLAw2Nratni/LWXHjh1wc3Njnfu33w/k36VRQVNnzpyBp6cnevXqhb59+yI2NhbZ2dlITk4GABQXFyMqKgqbN2/G8OHD0b9/f8TExODq1au4fv06AOC3335DWloa9u7dC1tbW4wePRpr1qzB999/j8rKSrHjvn37FiUlJayDEPLP4fF4TLapdpNpqpaCpgghhBBCCCGEEELaK2HQVHl1Oes8EzSlRUFThPxTwsPDMXbsWJiYmAAA4uPjwePxUFRUJNK24Zf6PB4PysrKePr0KavduHHj4Onpyfy9fiACj8eTeoSFhTGBCOIO4fdZsbGxzDk+n49OnTph0KBBWL16NYqLizmv38rKCkpKSsjNzRV5zcnJiRlDWVkZFhYWWLduHQQCgUjba9eugc/nw9XVVeS1hutRVFSEmZkZ1q5dK7YvSddJ2wdra2uR6w8dOgQej8e8t8L29QNz6u+jnJwc9PX1MWXKFGRnZ3PaL+H9Iu2Ij49njVP/UFZWZvp++fIlAgICYGRkBCUlJejp6cHFxQVXrlyRuEdc92zGjBmcrjc0NEROTg5sbGw4jxkREYHY2FjO7VtSw/VqaWnB0dERiYmJjernzJkziI2NxcmTJ5n1Hz16FGvWrGmlmTdfbm4uIiIisHz5cuacp6en2Pf/4cOHnPps7HvZlPulqbS1teHh4YGVK1c26fo//vgDn376Kbp06QJlZWWYm5vDz88PmZl1v3s1vJfU1dXRq1cvzJ07Fw8ePGD1JSnISFYQWWFhIebPnw9LS0uoqKjAyMgIQUFBnJ7ZS5cuxfz586Gurg5AepAhj8fD8ePHZfYpFBISggsXLjB/5xo8Z2JiIvZ+mzt3LtOmJaqAeXt74/bt26zPdXPvB0LeJ40KmmpI+IDR0tICACQnJ6OqqgrOzs5MGysrKxgZGeHatWsA6n6p6927N7p06cK0cXFxQUlJCe7duyd2nHXr1kFTU5M5DA0NmzNtQkgTMEFTlGmKEEIIIYQQQgghhLzjVPgqANjl+apqq5BVlAWAyvMR8k8pKytDVFQUfHx8mtwHj8drVLWSnJwc5ti6dSs0NDRY50JCQpi258+fZ72Wk5OD/v37M68Lr3327BmuXr0Kf39/7N69G7a2tnjx4oXMuVy+fBnl5eWYNGkSdu3aJbaNn58fcnJykJGRgaVLl2LFihXYsWOHSLuoqCjMnz8fly5dkji2cD0PHjzAqlWrEB4ejujoaJnzlLUPHTp0QF5eHvNdX/05GRkZyexfuI/Pnz/HkSNHkJGRgU8//VSknbj9cnBwYM1r8uTJGDVqFOucg4MDa5z6R/2Au4kTJ+KPP/7Arl27kJmZiRMnTsDJyQkFBQUy1yBrz77//ntO1/H5fOjp6UFeXl524/+nqakpNUOUpKQULUm43kuXLsHAwAAff/yxSGCGNFlZWdDX14eDgwOzfi0tLSZApbU0Z28iIyPh4OAAY2Nj1vmG919OTg5MTU059SnrvWxI1v0iEAhYwS/N5eXlhX379qGwsLBR1508eRL29vZ4+/Yt9u3bh/T0dOzduxeampoIDQ1ltRXeS3fu3MFXX32F9PR09O3blxVU1FQvXrzAixcv8M033yA1NRWxsbE4c+aMzJ9B2dnZOHnyJCsYtyWpqamhc+fOjb7u5s2brPvs3LlzAMB6frZEFTBFRUVMnz4d3377LWv8pt4PhLxvmhw0VVtbi+DgYAwZMoSJbs3NzYWioqLIw75Lly5MRHhubi4rYEr4uvA1cZYuXYri4mLm+Ouvv5o6bUJIEynw21mmqf8PmlLiK7XxTAghhBBCCCGEEEJIS1OSr/t/Pm9r3jJZVp4UP0FVbRU6KHSAgZpBW06PkGYTCASoelvTJoe0zEUN/frrr1BSUoK9vX2T1zpv3jzs3bsXqampnNrr6ekxh6amJng8Huucmpoa07Zz586s1/T09KCgoMC8LrxWX18f1tbW8PHxwdWrV1FaWopFixbJnEtUVBSmT5+OmTNnSgxeUlVVhZ6eHoyNjeHl5YU+ffowX4wLlZaW4sCBAwgICICrq6vETDXC9RgbG8Pd3R1DhgzB7du3Zc5T1j7Iy8tj+vTprDU8e/YM8fHxmD59usz+6++jg4MDfHx8kJSUJFJZRtx+KSoqsualoqLCZIkSHoqKiqxx6h/C7yCLioqQmJiIDRs2YNiwYTA2NsbAgQOxdOlSfPLJJzLXIGvPNDU1xWbBKSoqYrJhAaKZcmpqauDj4wNTU1OoqKjA0tISERERrLEaZqVxcnLCvHnzEBwcDG1tbbi4uAAANm/ejN69e6NDhw4wNDREYGAgSktLReZ+9uxZWFtbQ01NjQkA4rpeGxsbLFu2DCUlJbhx4wbzempqKkaPHg01NTV06dIFM2fORH5+PjP/+fPnIzs7m5WZrGF5PhMTE3z11Vfw9vaGuro6jIyMsHPnTtY8/vrrL0yePBkdO3aElpYWxo4dyyr9Kdyr8PBwGBgYwNLSEqtXrxabqcnW1lYkoKe+uLg4kZJlAETuPz09PfD5fLHZg4KDg+Hk5CQyP6EzZ87gP//5Dzp27IjOnTvj448/RlZWFvN6w/tFmHnt9OnT6N+/P5SUlHD58mVkZWVh7Nix6NKlC9TU1PDBBx/g/PnzInMvKyuTur+9evWCgYEBjh07JnFfxPXp5eWFMWPG4MSJE3B2doapqSkGDRqEb775Bj/++COrvfBe6t69O8aOHYvz589j0KBB8PHxQU1NDedxxbGxscGRI0fg5uaGHj16YPjw4QgPD8cvv/wiNbjs4MGD6Nu3L7p27droMYXvyYULFzBgwACoqqrCwcEBGRkZTJv6mbPCwsKwa9cu/Pzzz6xseeLo6Oiw7rOTJ0+iR48ecHR0BNCyVcDc3Nxw4sQJlJf/L0trU+4HQt5H3MOYG5g7dy5SU1Nx+fLllpyPWEpKSlBSosAGQtpSuyvPJ8w0JUeZpgghhBBCCCGEEELaG2F5vhpBDaprq6HAV0DGq7ovryw6WUCO16wiDIS0uerKWuz8LKFNxvaPcISCEp9T28TERFbGoqYYMmQIMjMzsWTJEpw8ebJZfbUEXV1duLu7Izo6GjU1NeDzxe/F69evcejQIdy4cQNWVlYoLi5GYmIiPvzwQ7HtBQIBLl++jPv378Pc3Jz12sGDB2FlZQVLS0vMmDEDwcHBWLp0KXg8nsR53rp1C8nJyfDw8Gj6Yuvx9vaGk5MTIiIioKqqitjYWIwaNUokUYIseXl5OHbsGPh8PmvvGrtfjaWmpgY1NTUcP34c9vb278z3jrW1tejWrRsOHTqEzp07MxnN9PX1MXnyZInX7dq1CwEBAazSgnJycvj2229hamqKR48eITAwEIsWLcIPP/zAtCkrK8M333yDPXv2QE5ODjNmzEBISAj27dvHab7l5eXYvXs3ADDBakVFRRg+fDh8fX2xZcsWlJeXY/HixZg8eTJ+//13REREoEePHti5cydu3rwp8TMDAJs2bcKaNWuwbNkyHD58GAEBAXB0dISlpSWqqqrg4uKCwYMHIzExEfLy8li7di1GjRqFu3fvMvO5cOECNDQ0mOBDTU1NrFq1Cjdv3sQHH3wAoK6U3N27d3H06FGx8ygsLERaWhoGDBjAaV+a6s2bN1i4cCH69OmD0tJSrFixAuPHj0dKSgrk5CT/rrJkyRJ888036N69Ozp16oS//voLY8aMQXh4OJSUlLB79264ubkhIyODlQ1O2v4KDRw4EImJiZwzBJ49exb5+fkSA0llZdaSk5PDZ599hvHjxyM5ORkDBw7kNC5XxcXF0NDQkJrdLTExsdnv9fLly7Fp0ybo6Ohgzpw58Pb2Flv6MyQkBOnp6SgpKUFMTAyA/1X1kqayshJ79+7FwoULmWe/rCpg9vb2EquABQQE4N69e7CzswMADBgwANXV1bhx4wYr0K+x9wMh76MmBU3NmzcPJ0+exKVLl9CtWzfmvJ6eHiorK1FUVMR6AP7999/Q09Nj2iQlJbH6E6ZvFLYhhLx7hMFFwmCj993bmrcA/pdBixBCCCGEEEIIIYS0H8LyfABQXlMOBb4CMgszAdQFTRFC/hlPnz6FgUHzM7utW7cOffr0adEgGqCu9FvDwARxmXkasrKywuvXr1FQUABdXV2xbeLi4mBubo5evXoBAKZOnYqoqCiR+f/www+IjIxEZWUlqqqqoKysjKCgIFabqKgozJgxA0BdabDi4mIkJCSwvtiuvx5hX/7+/pyCprjsg52dHbp3747Dhw9j5syZiI2NxebNm/Ho0SOZ/RcXF0NNTQ0CgQBlZWUAgKCgIHTo0IFpw3W/uIxT34cffojTp09DXl4esbGx8PPzw44dO9CvXz84Ojpi6tSp6NOnD+cxhBruWWJiIjp16tTofhQUFLBq1Srm76amprh27RoOHjwoNWjK3NwcGzduZJ1rmLVp7dq1mDNnDitoqqqqCjt27ECPHj0A1H3nu3r1apnzFK63rKwMAoEA/fv3x0cffQQA2LZtG+zs7PDVV18x7aOjo2FoaIjMzExYWFhAXV2dKTUnzZgxYxAYGAgAWLx4MbZs2YKLFy/C0tISBw4cQG1tLSIjI5mgkZiYGHTs2BHx8fEYOXIkgLpykpGRkUwQFVAXJBITE8METcXExMDR0RHdu3cXO4/s7GwIBAKxz6+TJ0+y7rPRo0fj0KFDMvdQnIkTJ7L+Hh0dDR0dHaSlpYnNjiW0evVqjBgxgvm7lpYW+vbty/x9zZo1OHbsGE6cOIF58+Yx56Xtr5CBgQH++OMPzmt48OABgLrnYlMJr33y5EmLBk3l5+djzZo18Pf3l9ru6dOnzQ6aCg8PZzJALVmyBK6urqioqICysjKrnZqaGlRUVPD27dtGxUYcP34cRUVFrBKCLVkFTFVVFZqamqySpkDj7wdC3keNCpoSCASYP38+jh07hvj4eJH6rP3794eCggIuXLjAPOQzMjKQnZ2NwYMHAwAGDx6M8PBw5OXlMb9Injt3DhoaGujZs2dLrIkQ0graW3k+4TqoPB8hhBBCCCGEEEJI+yMvJw8+j48aQQ0qqiugoaiBzFcUNEXaD3lFOfhHOLbZ2FyVl5eLfGHcFD179oSHhweWLFkiNnNHUx04cADW1taNvk5YolBapqfo6Ggm0AkAZsyYAUdHR3z33XdQV1dnzru7u2P58uV49eoVVq5cCQcHBzg4ODCvZ2RkICkpiSmPJC8vjylTpiAqKkokaEq4nqqqKqSmpmL+/Pno1KkT1q9fL3U9XPfB29sbMTExMDIywps3bzBmzBhs27ZN5nXq6uq4ffs2qqqqcPr0aezbtw/h4eGsNlz3i8s49amo/C+IduLEiXB1dUViYiKuX7+O06dPY+PGjYiMjGQFInDRcM8MDQ05lbkT5/vvv0d0dDSys7NRXl6OyspKppSXJOIyuJ0/fx7r1q3D/fv3UVJSgurqalRUVKCsrAyqqqoA6gIjhAFTAKCvr4+8vDyZczxw4ACsrKyQmpqKRYsWITY2linheOfOHVy8eFEkYA0AsrKyYGHB/edu/QA2YblF4fzu3LmDhw8fitwPFRUVrJJ2vXv3ZgVMAYCfnx+8vb2xefNmyMnJYf/+/diyZYvEeQhLlIl7fg0bNgzbt29n/l4/+K+xHjx4gBUrVuDGjRvIz89HbW0tgLqgLWlBUw0DfEpLSxEWFoZTp04hJycH1dXVKC8vR3Z2NqudtP0VUlFRYYIbuWhMyVZZfUh7pjZWSUkJXF1d0bNnT4SFhUlt2xI/q+rvrb6+PoC6zHr1M301R1RUFEaPHt0igciSiHvvG3s/EPI+alTQ1Ny5c7F//378/PPPUFdXZ6IPNTU1oaKiAk1NTfj4+GDhwoXQ0tKChoYG5s+fj8GDBzP1qkeOHImePXti5syZ2LhxI3Jzc/Hll19i7ty570wqTEKIqPZWnk+YaYrK8xFCCCGEEEIIIYS0PzweD8ryynhT9QYV1RUAwJTns9SylHYpIe8FHo/HuUReW9LW1sarV69Y5zQ0NADUZQVqmB2jqKgImpqaYvtatWoVLCwscPz48Rabn6GhIczMzBp9XXp6OjQ0NNC5c2exr6elpeH69etISkrC4sWLmfM1NTWIi4uDn58fc05TU5OZw8GDB2FmZgZ7e3um3FJUVBSqq6tZX5QLBAIoKSlh27ZtrP2qvx5ra2tkZWUhNDQUYWFhUgMCuO6Du7s7Fi1ahLCwMMycOVNquav65OTkROYVEBCAPXv2AGjcfnEdRxJlZWWMGDECI0aMQGhoKHx9fbFy5cpGB02J2zNh5qn6QSRVVdK/U4mLi0NISAg2bdqEwYMHQ11dHV9//TVu3Lgh9bqGgTpPnjzBxx9/jICAAISHh0NLSwuXL1+Gj48PKisrmaApYaCTEI/H4xT0YmhoCHNzc5ibm6O6uhrjx49HamoqlJSUUFpaCjc3N2zYsEHkOmHwCFfi5icMJCotLUX//v3FlhLU0dFh/iwuiMnNzQ1KSko4duwYFBUVUVVVhUmTJkmch7a2NgDg1atXrL6F/Yu7z+Tk5ET2Utb77+bmBmNjY/z3v/+FgYEBamtrYWNjg8pK6VVfGq4xJCQE586dwzfffAMzMzOoqKhg0qRJIv1I21+hwsJCkTVLIwyKu3//PpNEpbHS09MBgEnYoqGhgeLiYpF2RUVFACDx54TQ69evMWrUKKirq+PYsWMi625I0s+qN2/eoLa2lpVVTtIc6o8hDP5quLdN9fTpU5w/f16knGRLVwET99439n4g5H3UqMLt27dvR3FxMZycnKCvr88cBw4cYNps2bIFH3/8MSZOnIihQ4dCT0+P9QHm8/k4efIk+Hw+Bg8ejBkzZsDDw4NT6kdCSNtpb0FTwjKDinwKmiKEEEIIIYQQQghpj4QZxitqKlBQXoD88nzwwIN5R/M2nhkh/x52dnZIS0tjnTM3N4ecnBySk5NZ5x89eoTi4mKJWWkMDQ0xb948LFu2DDU1Na02Z1ny8vKwf/9+jBs3TqSknVBUVBSGDh2KO3fuICUlhTkWLlyIqKgoiX2rqanhs88+Q0hICAQCAaqrq7F7925s2rSJ1c+dO3dgYGCAn376Sepc+Xw+qqurZQZgcKWlpYVPPvkECQkJ8Pb2bnI/S5YswYEDB5isUE3dr5bQs2dPvHnzpkX6EgYW1M84lZKSIvWaK1euwMHBAYGBgbCzs4OZmRkraxJXycnJqK2txaZNm2Bvbw8LCwu8ePGi0f1wMWnSJMjLyzNl//r164d79+7BxMQEZmZmrKM5WZga6tevHx48eABdXV2RcWQF0cjLy2PWrFmIiYlBTEwMpk6dyspC1lCPHj2goaEh8vySRkdHRyTbmLT3v6CgABkZGfjyyy/x0UcfwdraWiRwh6srV67A09MT48ePR+/evaGnp4cnT540qa/U1FTY2dlxbj9y5Ehoa2uLlIsUEgYZSVJbW4tvv/0WpqamzLiWlpZ49uwZE9wjdPv2bSgrK0vN3lRSUoKRI0dCUVERJ06c4JRBStzPKktLS1RXV4u8h8LnVmMyqDWkqKjYqJ9jMTEx0NXVhaurK+t8/SpgQuKqgP3555+sjGLiqoBlZWWhoqJC5L1v7P1AyPuoUUFTAoFA7FE/+lpZWRnff/89CgsL8ebNGxw9elQkStHY2Bi//vorysrK8PLlS3zzzTeco9EJIW2DKc9XQ0FThBBCCCGEEEIIIeTdpyJf92VoRXUFU5rPUN0QqgqqbTktQv5VXFxccO/ePVYggLq6Onx9ffH555/jxIkTePz4MS5dugR3d3fY29uzStM1tHTpUrx48QLnz59vkfkVFBQgNzeXdVRUVDCvCwQC5ObmIicnB+np6YiOjoaDgwM0NTUllryrqqrCnj17MG3aNNjY2LAOX19f3LhxA/fu3ZM4p9mzZyMzMxNHjhzByZMn8erVK/j4+Ij0NXHiRJGAIuF6nj17htOnTyMiIgLDhg1jsns1dR/qi42NRX5+PqysrKT2KY2hoSHGjx+PFStWNHu/6hO+Xw2P2tpaFBQUYPjw4di7dy/u3r2Lx48f49ChQ9i4cSPGjh3b5LXUp6KiAnt7e6xfvx7p6elISEjAl19+KfUac3Nz3Lp1C2fPnkVmZiZCQ0Nx8+bNRo9tZmaGqqoqfPfdd3j06BH27NmDHTt2NHUpUvF4PAQFBWH9+vUoKyvD3LlzUVhYiGnTpuHmzZvIysrC2bNn4eXl1aIBju7u7tDW1sbYsWORmJiIx48fIz4+HkFBQXj27JnM6319ffH777/jzJkzMoP+5OTk4OzsjMuXL3Oe3/Dhw3Hr1i3s3r0bDx48wMqVK5GamiqxfadOndC5c2fs3LkTDx8+xO+//46FCxdyHq8+c3NzHD16lAmqnD59epOyHJWVlSE5ORkjR47kfE2HDh0QGRmJU6dO4ZNPPsH58+fx5MkT3Lp1C4sWLcKcOXNY7YXPm0ePHuHEiRNwdnZGUlISoqKiwOfXZVB0cXGBpaUlpk2bhqtXr+LRo0c4fPgwvvzyS3z22WdMu4aEAVNv3rxBVFQUSkpKmOeAtHvRxcUF165dY7Xp1asXRo4cCW9vb1y4cAGPHz/GmTNnEBgYiClTpqBr166c96ghExMT3L17FxkZGcjPz5eakay2thYxMTGYNWuWSDxF/SpgFy9eRHJyMry8vCRWAbtz5w7Onj0rtgpYYmIiunfvzirf2ZT7gZD3UaOCpggh/17CTFOVtS3zL1LamnAdwn9xSAghhBBCCCGEEELaF2V+XWaB+kFTVJqPkH9W79690a9fPxw8eJB1PiIiArNmzcLixYvRq1cveHp6ok+fPvjll1+YskbiaGlpYfHixRIDehrL2dmZVVlFX1+fVf6vpKQE+vr66Nq1KwYPHowff/wRs2bNwh9//CGx7NiJEydQUFCA8ePHi7xmbW0Na2trqdmTtLS04OHhgbCwMERFRcHZ2VlsFp2JEyfi1q1buHv3rsh6TExM4O/vjzFjxrCqxTR1H+pTUVGRWJawMRYsWIBTp05h8+bNzdqv+oTvV8MjLy8PampqGDRoELZs2YKhQ4fCxsYGoaGh8PPzw7Zt25g+PD094eTk1OR1RUdHo7q6Gv3790dwcDDWrl0rtf3s2bMxYcIETJkyBYMGDUJBQQECAwMbPW7fvn2xefNmbNiwATY2Nti3bx/WrVvX1GXINGvWLFRVVWHbtm0wMDDAlStXUFNTg5EjR6J3794IDg5Gx44dJWZjawpVVVVcunQJRkZGmDBhAqytreHj44OKigqZgYFAXWCRg4MDrKysMGjQIJntfX19ERcXxzn4yMXFBaGhoVi0aBE++OADvH79Gh4eHhLby8nJIS4uDsnJybCxscGCBQvw9ddfcxqroc2bN6NTp05wcHCAm5sbXFxc0K9fv0b38/PPP8PIyAgffvghcy42NlbqcxkAxo4di6tXr0JBQQHTp0+HlZUVpk2bhuLiYpHPgPB507t3byxZsgTW1ta4e/cuhg0bxrSRl5fHb7/9BiMjIyagcuXKlfjss8+wZs0aifO4ffs2bty4gT///BNmZmas58Bff/0l8brRo0dDXl5eJCD3wIEDcHR0xOzZs9GrVy8EBQVh7NixiIyMlLofsvj5+cHS0hIDBgyAjo4Orly5IrHt+fPnkZ2dLTHQr6WqgP30008ipVDF3Q+EtEc8AZdCte+YkpISaGpqori4mNMPQUJI8/n95ofrOdex7sN1+Lj7x209nWbzPOOJ5L+T8bXj1xhlMqqtp0MIIYQQQgghhBBCWtjUk1Nxr+Aevv/oe5x9chYnsk5gru1czOk7R/bFhLxDKioq8PjxY5iamnIqM/SuOXXqFL744gukpqa2aAAFIa3B0dERw4YNQ1hYWKv0n5GRASsrKzx48ABmZmatMgYRTyAQwNzcHIGBgZwyOgkEAgwaNAgLFizAtGnTWmQO06ZNA5/Px969e1ukv5Zmb2+PoKAgTJ8+nTm3cuVKJCQkID4+vu0m9g/4/vvvceLECZw9e7atp/KPu3fvHoYPH47MzExWkK64+4GQd4m035EbE1NENfEIIZwIM021l/J8wnUoyVGmKUIIIYQQQgghhJD2SFn+f5mmMgozAAAWnSzackqE/Cu5urriwYMHeP78OQwNDdt6OoRIVFxcjKysLJw6dapV+i8sLMThw4ehoaFBn4V/2MuXLxEXF4fc3Fx4eXlxuobH42Hnzp34888/mz1+dXU1MjMzce3aNcyePbvZ/bWG/Px8TJgwQSRA7PTp06xsbO3V7NmzUVRUhNevX0NdXb2tp/OPysnJwe7du1kBU5LuB0LaIwqaIoRwwgRN1baPoClheT5FvmIbz4QQQgghhBBCCCGEtAZheb7Xla+RVZwFgMrzEdJWgoOD23oKhMikqamJZ8+etVr/Pj4+SE5Oxvbt26GkRP+g+5+kq6sLbW1t7Ny5E506deJ8na2tLWxtbZs9fmpqKhwcHDBs2DDMmfNuZrzU1tbGokWLRM4nJSW1wWz+efLy8li+fHlbT6NNODs7i5yTdD8Q0h5R0BQhhBNhcFF7CZp6W/MWAAVNEUIIIYQQQgghhLRXwkxT6YXpqK6thpqCGgw6GLTxrAghhPxbHTt2rK2n8K8lEAjadHxbW1uUlZW16RwIIYSIR8WjCSGctLfyfJU1lGmKEEIIIYQQQgghpD0TBk3dfXkXQF1pPh6P15ZTIoQQQgghhBDyDqGgKUIIJwr8dlaeTxg0JUdBU4QQQgghhBBCCCHtkbA8X+arTAB1QVOEEEIIIYQQQogQBU0RQjhhMk21l6Cp2rqgKSU+1Q0nhBBCCCGEEEIIaY9U5FUAADWCGgCAhRYFTRFCCCGEEEII+R8KmiKEcNLugqb+P9OUMIMWIYQQQgghhBBCCGlfGv5jOctOlm00E0IIIYQQQggh7yIKmiKEcCIMLhIGG73vhOugTFOEEEIIIYQQQggh7ZOyvDLzZx54MOto1oazIYQQQgghhBDyrqGgKUIIJ+0p01R1bTWTll1RTrGNZ0MIIYQQQgghhBBCWoOwPB8AGGkYQVVBtQ1nQwghhBBCCCHkXUNBU4QQTtpT0FT9bFmKfAqaIoQQQgghhBBCCGmPlPn/yzRl0cmiDWdCyL9bQUEBdHV18eTJk7aeCiFt7smTJ+DxeEhJSeF8jaenJ8aNG9fssWNjY9GxY8dm99MUAoEA/v7+0NLSYtbv5OSE4ODgNpkPV6GhofD392/raYiVm5uLESNGoEOHDq3yvqalpaFbt2548+ZNi/fdGkxMTLB169Z/ZKyW+Cw1nC+Px8Px48cBNO05IU5L9fNPaq3nQn5+PnR1dfHs2bMW75u8/yhoihDCCRM0VfP+B03VD/yioClCCCGEEEIIIYSQ9ql+eT7LTpZtOBNC/t3Cw8MxduxYmJiYAADi4+PB4/FQVFQk0lbcl8jKysp4+vQpq924cePg6enJ/L1+UAmPx5N6hIWFMV8kizuuX78OoO5LceE5Pp+PTp06YdCgQVi9ejWKi4s5r9/KygpKSkrIzc0Vec3JyYkZQ1lZGRYWFli3bh0EAoFI22vXroHP58PV1VXktYbrUVRUhJmZGdauXSu2L0nXSdsHa2trkesPHToEHo/HvLfC9vWDCervo5ycHPT19TFlyhRkZ2dz2i/h/SLtiI+PZ41T/1BW/t/PgpcvXyIgIABGRkZQUlKCnp4eXFxccOXKFYl7xHXPZsyYwel6Q0ND5OTkwMbGhvOYERERiI2N5dy+JTVcr5aWFhwdHZGYmNiofs6cOYPY2FicPHmSWf/Ro0exZs2aVpp58+Xm5iIiIgLLly9nznl6eoLH42HOnDki7efOnQsej8d6NrWEsLAw2NraipzfsmULcnJykJKSgszMzGaNIS5QpWfPnrC3t8fmzZub1OfFixcxZswYdO7cGaqqqujZsyc+//xzPH/+vFlzbU317/UOHTrA3Nwcnp6eSE5OZrWbMmUK5z2XFGB18+bNFg3IExdc2ZTnTUuNDUj/eS9Jw+cC12C4nTt3wsnJCRoaGmLH1NbWhoeHB1auXMl5LuTfg4KmCCGcCIOLKmsrZbR8972teQsA4PP4kJeTb+PZEEIIIYQQQgghhJDWoCSvxPyZMk0R0jbKysoQFRUFHx+fJvfB4/GwYsUKzu1zcnKYY+vWrdDQ0GCdCwkJYdqeP3+e9VpOTg769+/PvC689tmzZ7h69Sr8/f2xe/du2Nra4sWLFzLncvnyZZSXl2PSpEnYtWuX2DZ+fn7IyclBRkYGli5dihUrVmDHjh0i7aKiojB//nxcunRJ4tjC9Tx48ACrVq1CeHg4oqOjZc5T1j506NABeXl5uHbtmsicjIyMZPYv3Mfnz5/jyJEjyMjIwKeffirSTtx+OTg4sOY1efJkjBo1inXOwcGBNU79o37A3cSJE/HHH39g165dyMzMxIkTJ+Dk5ISCggKZa5C1Z99//z2n6/h8PvT09CAvz/27CU1NTalZbSorW/97G+F6L126BAMDA3z88cf4+++/OV+flZUFfX19ODg4MOvX0tKCurp6K866eXsTGRkJBwcHGBsbs84bGhoiLi4O5eXlzLmKigrs37+f0+ehpWRlZaF///4wNzeHrq5uk/qQtT9eXl7Yvn07qqurG9Xvjz/+CGdnZ+jp6eHIkSNIS0vDjh07UFxcjE2bNom9pqamBrW1tY0apzXExMQgJycH9+7dw/fff4/S0lIMGjQIu3fvZtqoqKg0ec+FdHR0oKrauqWjm/K8aWtNfS6UlZVh1KhRWLZsmcQ2Xl5e2LdvHwoLC5szRdIOUdAUIYQTYaap6trG/WL0LhKW56MsU4QQQgghhBBCCCHtlwpfhfmzpRZlmiLti0AgQFVFRZsc0jIXNfTrr79CSUkJ9vb2TV7rvHnzsHfvXqSmpnJqr6enxxyamprg8Xisc2pqakzbzp07s17T09ODgoIC87rwWn19fVhbW8PHxwdXr15FaWkpFi1aJHMuUVFRmD59OmbOnCkxeElVVRV6enowNjaGl5cX+vTpg3PnzrHalJaW4sCBAwgICICrq6vErEPC9RgbG8Pd3R1DhgzB7du3Zc5T1j7Iy8tj+vTprDU8e/YM8fHxmD59usz+6++jg4MDfHx8kJSUhJKSElY7cfulqKjImpeKigqTJUp4KCoqssapf3Tp0gUAUFRUhMTERGzYsAHDhg2DsbExBg4ciKVLl+KTTz6RuQZZe6apqSm2FFZRURGTDQsQLZdVU1MDHx8fmJqaQkVFBZaWloiIiGCN1TCLi5OTE+bNm4fg4GBoa2vDxcUFALB582b07t0bHTp0gKGhIQIDA1FaWioy97Nnz8La2hpqampMABrX9drY2GDZsmUoKSnBjRs3mNdTU1MxevRoqKmpoUuXLpg5cyby8/OZ+c+fPx/Z2dmszGQNsxuZmJjgq6++gre3N9TV1WFkZISdO3ey5vHXX39h8uTJ6NixI7S0tDB27FhW6U/hXoWHh8PAwACWlpZYvXq12Ew7tra2CA0NlbjmuLg4uLm5iZzv168fDA0NcfToUebc0aNHYWRkBDs7O1bbt2/fIigoCLq6ulBWVsZ//vMf3Lx5k3ldmInnwoULGDBgAFRVVeHg4ICMjAwAdVmKVq1ahTt37jAZkGJjY2FiYoIjR45g9+7drOxW2dnZGDt2LNTU1KChoYHJkyezgtuEWasiIyNhamoKZWVleHp6IiEhAREREcwYwj0dMWIECgsLkZCQIHGfGnr27BmCgoIQFBSE6OhoODk5wcTEBEOHDkVkZCQTBCvMwHTixAn07NkTSkpKyM7OFpv1qmF2wby8PLi5uUFFRQWmpqbYt2+fyDyKiorg6+sLHR0daGhoYPjw4bhz547M+Xfs2BF6enowMTHByJEjcfjwYbi7u2PevHl49eoVa+5Cd+7cwbBhw6Curg4NDQ30798ft27dQnx8PLy8vFBcXMzKdgg0rpygrOdEWFgYdu3ahZ9//pmVgU/cMykhIQEDBw6EkpIS9PX1sWTJElZQnJOTE4KCgrBo0SJoaWlBT0+PmXNzCe+/PXv2wMTEBJqampg6dSpev37NGl/4/js5OeHp06dYsGABsy5JgoODsWTJEqm/b/Tq1QsGBgY4duxYi6yHtB/vT1ghIaRNtafyfMKgKeGaCCGEEEIIIYQQQkj7IyzPp66gDv0O+m08G0JaVvXbt/h21qQ2GTto12Eo1Ct5Jk1iYiIrY1FTDBkyBJmZmViyZAlOnjzZrL5agq6uLtzd3REdHY2amhrw+Xyx7V6/fo1Dhw7hxo0bsLKyQnFxMRITE/Hhhx+KbS8QCHD58mXcv38f5ubmrNcOHjwIKysrWFpaYsaMGQgODsbSpUulfoF869YtJCcnw8PDo+mLrcfb2xtOTk6IiIiAqqoqYmNjMWrUKCYoiau8vDwcO3YMfD6ftXeN3a/GUlNTg5qaGo4fPw57e3soKSnJvugfUFtbi27duuHQoUPo3Lkzk9FMX18fkydPlnjdrl27EBAQwCotKCcnh2+//RampqZ49OgRAgMDsWjRIvzwww9Mm7KyMnzzzTfYs2cP5OTkMGPGDISEhIgNOhGnvLycybgjDFYrKirC8OHD4evriy1btqC8vByLFy/G5MmT8fvvvyMiIgI9evTAzp07cfPmTYmfGQDYtGkT1qxZg2XLluHw4cMICAiAo6MjLC0tUVVVBRcXFwwePBiJiYmQl5fH2rVrMWrUKNy9e5eZz4ULF6ChocEEH2pqamLVqlW4efMmPvjgAwDAH3/8gbt377ICn+orLCxEWloaBgwYIPZ1b29vxMTEwN3dHQAQHR0NLy8vJjhOaNGiRThy5Ah27doFY2NjbNy4ES4uLnj48CG0tLSYdsuXL8emTZugo6ODOXPmwNvbG1euXMGUKVOQmpqKM2fO4Pz588x6XF1d4eHhAQ0NDUREREBFRQW1tbVMwFRCQgKqq6sxd+5cTJkyhTWvhw8f4siRIzh69Cj4fD6MjY2RmZkJGxsbrF69GkBdFiThe2xra4vExER89NFHEt+3+g4dOoTKykqJgaX1g43KysqwYcMGREZGonPnzpyzN3l6euLFixe4ePEiFBQUEBQUhLy8PFabTz/9FCoqKjh9+jQ0NTXx448/4qOPPkJmZiZr77lYsGABdu/ejXPnzon9XLq7u8POzg7bt28Hn89HSkoKFBQU4ODggK1bt2LFihVMIFz9wF2uZD0nQkJCkJ6ejpKSEsTExACoy9jUMCvh8+fPMWbMGHh6emL37t24f/8+/Pz8oKyszAqM2rVrFxYuXIgbN27g2rVr8PT0xJAhQzBixIhGz72hrKwsHD9+HCdPnsSrV68wefJkrF+/HuHh4SJtjx49ir59+8Lf3x9+fn7NHhsABg4ciMTExGZlwCTtDwVNEUI4UeD/f9BUbTsImvr/EoNK/HfjP4oIIYQQQgghhBBCSMvr2bknzDqawbGbo9TAAkJI63n69CkMDAya3c+6devQp0+fFg2iAepKv8nJsYuyiMvM05CVlRVev36NgoICiV/yx8XFwdzcHL169QIATJ06FVFRUSLz/+GHHxAZGYnKykpUVVVBWVkZQUFBrDZRUVGYMWMGAGDUqFEoLi5GQkICnJycxK5H2Je/vz+noCku+2BnZ4fu3bvj8OHDmDlzJmJjY7F582Y8evRIZv/FxcVQU1ODQCBAWVkZACAoKAgdOnRg2nDdLy7j1Pfhhx/i9OnTkJeXR2xsLPz8/LBjxw7069cPjo6OmDp1Kvr06cN5DKGGe5aYmIhOnTo1uh8FBQWsWrWK+bupqSmuXbuGgwcPSg2aMjc3x8aNG1nnGmZtWrt2LebMmcMKmqqqqsKOHTvQo0cPAHWZ3ISBMtII11tWVgaBQID+/fszQTTbtm2DnZ0dvvrqK6Z9dHQ0DA0NkZmZCQsLC6irqzOlwqQZM2YMAgMDAQCLFy/Gli1bcPHiRVhaWuLAgQOora1FZGQk83M9JiYGHTt2RHx8PEaOHAmgrpxkZGQkE0QFAC4uLoiJiWGCpmJiYuDo6Iju3buLnUd2djYEAoHE59eMGTOwdOlSpvzjlStXEBcXxwpOevPmDbZv347Y2FiMHj0aAPDf//4X586dQ1RUFL744gumbXh4OBwdHQEAS5YsgaurKyoqKqCiogI1NTXIy8uz9k6YcU1FRYU5f+7cOfz55594/PgxDA0NAQC7d+9Gr169WAFjlZWV2L17NxMYBdQFRwmz3jVkYGDAKnMpy4MHD6ChoQF9fdkB61VVVfjhhx/Qt29fzv1nZmbi9OnTSEpKYtYUFRUFa2trps3ly5eRlJSEvLw8JkDym2++wfHjx3H48GH4+/tzHg+oe+YDYGU1qy87OxtffPEF065+4Gv9jIdNJes5oaamBhUVFbx9+1bqOD/88AMMDQ2xbds28Hg8WFlZ4cWLF1i8eDFWrFjBPNP69OmDlStXMmvZtm0bLly40CJBU7W1tYiNjWVK8M2cORMXLlwQGzSlpaUFPp8PdXX1Zu1ffQYGBvjjjz9apC/SflDQFCGEE0W5ul8uhQFH77O3NW8BUHk+QgghhBBCCCGEkPZMXVEdx8ZS+Q3SPskrKSFo1+E2G5ur8vJyKHPMSiVNz5494eHhgSVLlrAy6zTXgQMHWF+0cyUsUSgtIDM6OpoJdALqgiwcHR3x3XffMV8WA3UZSpYvX45Xr15h5cqVcHBwgIODA/N6RkYGkpKSmHJC8vLymDJlCqKiokSCpoTrqaqqQmpqKubPn49OnTph/fr1UtfDdR+E2XWMjIzw5s0bjBkzBtu2bZN5nbq6Om7fvo2qqiqcPn0a+/btE/mCnOt+cRmnPhWV/5VqnThxIlxdXZGYmIjr16/j9OnT2LhxIyIjI1mlv7houGeGhoacytyJ8/333yM6OhrZ2dkoLy9HZWUlbG1tpV4jLoPb+fPnsW7dOty/fx8lJSWorq5GRUUFysrKoKqqCqCuHKQwYAoA9PX1RTL0iHPgwAFYWVkhNTUVixYtQmxsLFPC8c6dO7h48aLYDDpZWVmwsLCQ2b9Q/QA2YaCJcH537tzBw4cPRe6HiooKZGVlMX/v3bs3K2AKAPz8/ODt7Y3NmzdDTk4O+/fvx5YtWyTOo7y8HAAkPr90dHSYUpkCgQCurq7Q1tZmtcnKykJVVRWGDBnCnFNQUMDAgQORnp4ucd3CYKO8vDwYGRlJnGND6enpMDQ0ZAKmgLpnZ8eOHZGens4EGBkbG7MCpmRRUVFhgh25EAgEnIPVFRUVGx20mJ6eDnl5edZnwMrKSqRcXmlpKTp37sy6try8nHWvcCXrmb9w4UL4+vpiz549cHZ2xqeffsr6nLWEpjwnGkpPT8fgwYNZ6xgyZAhKS0vx7Nkz5n5r+J5wfU5wYWJiwvoMt2TfXDT2fib/DhQ0RQjhpD2W56OgKUIIIYQQQgghhBBCyPuIx+NxLpHXlrS1tfHq1SvWOQ0NDQB1WYHqf8kN1JX50tTUFNvXqlWrYGFhgePHj7fY/AwNDWFmZtbo69LT06GhoSHyhbxQWloarl+/jqSkJCxevJg5X1NTg7i4OFaZIU1NTWYOBw8ehJmZGezt7eHs7AygLoNKdXU1K+ONQCCAkpIStm3bxtqv+uuxtrZGVlYWQkNDERYWJjV4jes+uLu7Y9GiRQgLC8PMmTMhL8/ta0Y5OTmReQUEBGDPnj0AGrdfXMeRRFlZGSNGjMCIESMQGhoKX19frFy5stFBU+L2TJilRRhgAdRl0pEmLi4OISEh2LRpEwYPHgx1dXV8/fXXuHHjhtTr6mfpAuoy4Hz88ccICAhAeHg4tLS0cPnyZfj4+KCyspIJmhIGOgnxeDzWfCUxNDSEubk5zM3NUV1djfHjxyM1NRVKSkooLS2Fm5sbNmzYIHIdl2xD9YmbX21tLYC67Gf9+/cXW0qwfhBQw70BADc3NygpKeHYsWNQVFREVVUVJk2SXOJUGAD16tUriQFG3t7emDdvHoC6gJbmqL9uYUCLcN0tTdz+SFNYWNioACALCwsUFxcjJydH5vuvoqIiEogkJycnck/K+hw1VFpaCn19fZFyiQBEfu5wIQxyMzU1Fft6WFgYpk+fjlOnTuH06dNYuXIl4uLiMH78+EaPJU5TnxNNJe1zKI6GhobYbGRFRUXg8/mse66xfbe0wsLCRgUNkn8HOdlNCCGknZXnEwZNyVHQFCGEEEIIIYQQQgghhLQWOzs7pKWlsc6Zm5tDTk4OycnJrPOPHj1CcXGxxKw0hoaGmDdvHpYtW4aamppWm7MseXl52L9/P8aNGydS0k4oKioKQ4cOxZ07d5CSksIcCxcuRFRUlMS+1dTU8NlnnyEkJAQCgQDV1dXYvXs3Nm3axOrnzp07MDAwwE8//SR1rnw+H9XV1aisbJkKElpaWvjkk0+QkJAAb2/vJvezZMkSHDhwgMkK1dT9agk9e/bEmzdvWqQv4Rfx9TNOpaSkSL3mypUrcHBwQGBgIOzs7GBmZtakTDjJycmora3Fpk2bYG9vDwsLC7x48aLR/XAxadIkyMvLM2X/+vXrh3v37sHExARmZmaso7EBOtL069cPDx48gK6ursg4koItheTl5TFr1izExMQgJiYGU6dOZWUha6hHjx7Q0NAQeX7VN2rUKKYUpouLi9g+FBUVWdnxqqqqcPPmTfTs2ZPDiusoKipyeuZZW1vjr7/+wl9//cWcS0tLQ1FRkczxpI2RmpoKOzs7zvOdNGkSFBUVRcpHChUVFUm9XkdHh/UZqqmpQWpqKvN3KysrVFdXs36GZGRksPrt168fcnNzIS8vL3KvNMwIxsXWrVuhoaHBBLOKY2FhgQULFuC3337DhAkTEBMTA4D7+ycNl+cEl3Gsra1x7do1VlDalStXoK6ujm7dujV5fpaWlrh37x7evn3LOn/79m2YmpqKBEo1RkvsX32NvZ/JvwMFTRFCOJGXq/sXI+0paEqJzz2NNCGEEEIIIYQQQgghhJDGcXFxwb1791jZptTV1eHr64vPP/8cJ06cwOPHj3Hp0iW4u7vD3t6eVZquoaVLl+LFixc4f/58i8yvoKAAubm5rKOiooJ5XSAQIDc3Fzk5OUhPT0d0dDQcHBygqakpseRdVVUV9uzZg2nTpsHGxoZ1+Pr64saNG7h3757EOc2ePRuZmZk4cuQITp48iVevXsHHx0ekr4kTJ4oEFAnX8+zZM5w+fRoREREYNmwYk92rqftQX2xsLPLz82FlZSW1T2kMDQ0xfvx4rFixotn7VZ/w/Wp41NbWoqCgAMOHD8fevXtx9+5dPH78GIcOHcLGjRsxduzYJq+lPhUVFdjb22P9+vVIT09HQkICvvzyS6nXmJub49atWzh79iwyMzMRGhqKmzdvNnpsMzMzVFVV4bvvvsOjR4+wZ88e7Nixo6lLkYrH4yEoKAjr169HWVkZ5s6di8LCQkybNg03b95EVlYWzp49Cy8vrxYNdnB3d4e2tjbGjh2LxMREPH78GPHx8QgKCsKzZ89kXu/r64vff/8dZ86ckRn0JycnB2dnZ1y+fFliGz6fj/T0dKSlpYHP54u83qFDBwQEBOCLL77AmTNnkJaWBj8/P5SVlcHHx0f2gv+fiYkJHj9+jJSUFOTn54sEpgg5Ozujd+/ecHd3x+3bt5GUlAQPDw84OjpiwIABMse4ceMGnjx5gvz8fCbzz5MnT/D8+XOpwUINGRoaYsuWLYiIiICPjw8SEhLw9OlTXLlyBbNnz8aaNWukXj98+HCcOnUKp06dwv379xEQEMAKiLK0tMSoUaMwe/Zs3LhxA8nJyfD19WUFwTk7O2Pw4MEYN24cfvvtNzx58gRXr17F8uXLcevWLanjFxUVITc3F0+fPsW5c+cwadIk7N+/H9u3bxebpaq8vBzz5s1DfHw8s86bN28y5TtNTExQWlqKCxcuID8/v0ml4bg8J0xMTHD37l1kZGQgPz9fbHauwMBA/PXXX5g/fz7u37+Pn3/+GStXrsTChQslBgFz4e7uDh6PBw8PDyQnJ+Phw4eIjo7G1q1b8fnnnze5X6BuXZcuXcLz58+Rn58vsV1ubi5SUlLw8OFDAMCff/6JlJQUFBYWMm3KysqQnJyMkSNHNmtOpP2hoClCCCdMeb72EDRVWxc0JcyeRQghhBBCCCGEEEIIIaTl9e7dG/369cPBgwdZ5yMiIjBr1iwsXrwYvXr1gqenJ/r06YNffvlFpFRTfVpaWli8eLHEgJ7GcnZ2hr6+PuuoX/6vpKQE+vr66Nq1KwYPHowff/wRs2bNwh9//CGx7NSJEydQUFAgtiyTtbU1rK2tpWZP0tLSgoeHB8LCwhAVFQVnZ2exWXQmTpyIW7du4e7duyLrMTExgb+/P8aMGYMDBw40ex/qU1FRkViWsDEWLFiAU6dOYfPmzc3ar/qE71fDIy8vD2pqahg0aBC2bNmCoUOHwsbGBqGhofDz88O2bduYPjw9PeHk5NTkdUVHR6O6uhr9+/dHcHAw1q5dK7X97NmzMWHCBEyZMgWDBg1CQUEBAgMDGz1u3759sXnzZmzYsAE2NjbYt28f1q1b19RlyDRr1ixUVVVh27ZtMDAwwJUrV1BTU4ORI0eid+/eCA4ORseOHZsViNGQqqoqLl26BCMjI0yYMAHW1tbw8fFBRUWFzMBAoC7wxMHBAVZWVhg0aJDM9r6+voiLi5NZlkza2OvXr8fEiRMxc+ZM9OvXDw8fPsTZs2fRqVMnmeMLTZw4EaNGjcKwYcOgo6MjMcMcj8fDzz//jE6dOmHo0KFwdnZG9+7dOT0DQkJCwOfz0bNnT+jo6CA7OxsA8NNPP2HkyJEwNjZm2oaFhcHExERqf4GBgfjtt9/w/PlzjB8/HlZWVvD19YWGhgZCQkKkXuvt7Y1Zs2YxAV/du3fHsGHDWG1iYmJgYGAAR0dHTJgwAf7+/tDV1WXtxa+//oqhQ4fCy8sLFhYWmDp1Kp4+fYouXbpIHd/Lywv6+vqwsrJCQEAA1NTUkJSUhOnTp4ttz+fzUVBQAA8PD1hYWGDy5MkYPXo0Vq1aBQBwcHDAnDlzMGXKFOjo6EjMwCUNl+eEn58fLC0tMWDAAOjo6LAynAl17doVv/76K5KSktC3b1/MmTMHPj4+MoM7ZenYsSMSExNRVVWFTz75BLa2tvj222+xefNmzJ49u1l9r169Gk+ePEGPHj2kltXbsWMH7OzsmHKuQ4cOhZ2dHU6cOMG0+fnnn2FkZIQPP/ywWXMi7Q9PwKVQ7TumpKQEmpqaKC4u5vRDkBDSfHde3sGMX2egq1pXnJl4pq2n0yy/ZP2CZZeXwcHAAT+O+LGtp0MIIYQQQgghhBBCCCESVVRU4PHjxzA1NYWysnJbT6fRTp06hS+++AKpqaktGkBBSGtwdHTEsGHDEBYW1ir9Z2RkwMrKCg8ePICZmVmrjEHEEwgEMDc3R2BgIBYuXMip/aBBg7BgwQJMmzbtH5jhu6WyshLm5ubYv38/hgwZwpyfNWsWeDweYmNj225yhDSBvb09goKCJAbAkfePtN+RGxNTJN+akySEtB/tKtPU/5fnU5RTbOOZEEIIIYQQQgghhBBCSPvm6uqKBw8e4Pnz5zA0NGzr6RAiUXFxMbKysnDq1KlW6b+wsBCHDx+GhoYGfRb+YS9fvkRcXBxyc3Ph5eXF6Roej4edO3fizz//bOXZvZuys7OxbNkyVsCUQCBAfHy81LKFhLyL8vPzMWHChH9lACSRjYKmCCGcCIOmqmur23gmzfe2pq7eM5XnI4QQQgghhBBCCCGEkNYXHBzc1lMgRCZNTU08e/as1fr38fFBcnIytm/fDiUlpVYbh4jS1dWFtrY2du7c2ajSeLa2trC1tW29ib3DzMzMRLKh8Xg8PH36tI1mREjTaWtrY9GiRW09DfKOoqApQggnTKapmvc/05QwW5YSn/6jhBBCCCGEEEIIIYQQQgghre/YsWNtPYV/LYFA0NZTIIQQ8o6i4tGEEE4U+XWl7CprK9t4Js0nzDQlXBMhhBBCCCGEEEIIIYQQQgghhBBC/l0oaIoQwgmTaar2/c80VVlTF/ilKEdBU4QQQgghhBBCCCGEEEIIIYQQQsi/EQVNEUI4EQZN1QpqUVNb08azaR4maIoyTRFCCCGEEEIIIYQQQgghhBBCCCH/ShQ0RQjhRIGvwPz5fc82JSwxqMRXauOZEEIIIYQQQgghhBBCCCGEEEIIIaQtUNAUIYST+qXs3vegqbc1bwGwA8EIIYQQQgghhBBCCCGEEEIIIYQQ8u9BQVOEEE7k5eSZPwvL272vhPOnTFOEEEIIIYQQQgghhBBCCCGEEELIvxMFTRFCOOHxeEzg1Pueaaqqpm7+9bNnEUIIIYQQQgghhBBCCGl5BQUF0NXVxZMnT9p6KoS0uSdPnoDH4yElJYXzNZ6enhg3blyzx46NjUXHjh2b3U9TCAQC+Pv7Q0tLi1m/k5MTgoOD22Q+XIWGhsLf37+tpyFWbm4uRowYgQ4dOrTK+5qWloZu3brhzZs3Ld53azAxMcHWrVv/kbFa4rPUcL48Hg/Hjx8H0LTnhDgt1c8/qbWeC+/b/Uz+WRQ0RQjhTEGurpzd+x40JSzPp8inoClCCCGEEEIIIYQQQghpTeHh4Rg7dixMTEwAAPHx8eDxeCgqKhJpK+5LZGVlZTx9+pTVbty4cfD09GT+Xj+ohMfjST3CwsKYL5LFHdevXwdQ96W48Byfz0enTp0waNAgrF69GsXFxZzXb2VlBSUlJeTm5oq85uTkxIyhrKwMCwsLrFu3DgKBQKTttWvXwOfz4erqKvJaw/UoKirCzMwMa9euFduXpOuk7YO1tbXI9YcOHQKPx2PeW2H7+sEE9fdRTk4O+vr6mDJlCrKzszntl/B+kXbEx8ezxql/KCsrM32/fPkSAQEBMDIygpKSEvT09ODi4oIrV65I3COuezZjxgxO1xsaGiInJwc2Njacx4yIiEBsbCzn9i2p4Xq1tLTg6OiIxMTERvVz5swZxMbG4uTJk8z6jx49ijVr1rTSzJsvNzcXERERWL58OXPO09MTPB4Pc+bMEWk/d+5c8Hg81rOpJYSFhcHW1lbk/JYtW5CTk4OUlBRkZmY2awxxgSo9e/aEvb09Nm/e3KQ+L168iDFjxqBz585QVVVFz5498fnnn+P58+fNmmtrqn+vd+jQAebm5vD09ERycjKr3ZQpUzjvuaQAq5s3b7ZoQJ644MqmPG9aamxA+s97SRo+F7gEwxUWFmL+/PmwtLSEiooKjIyMEBQUxPpZ3dz7mbRvFDRFCOGsvQRNVdbWleejoClCCCGEEEIIIYQQQghpPWVlZYiKioKPj0+T++DxeFixYgXn9jk5OcyxdetWaGhosM6FhIQwbc+fP896LScnB/3792deF1777NkzXL16Ff7+/ti9ezdsbW3x4sULmXO5fPkyysvLMWnSJOzatUtsGz8/P+Tk5CAjIwNLly7FihUrsGPHDpF2UVFRmD9/Pi5duiRxbOF6Hjx4gFWrViE8PBzR0dEy5ylrHzp06IC8vDxcu3ZNZE5GRkYy+xfu4/Pnz3HkyBFkZGTg008/FWknbr8cHBxY85o8eTJGjRrFOufg4MAap/5RP+Bu4sSJ+OOPP7Br1y5kZmbixIkTcHJyQkFBgcw1yNqz77//ntN1fD4fenp6kJeX5zyWpqam1Kw2lZWVnPtqKuF6L126BAMDA3z88cf4+++/OV+flZUFfX19ODg4MOvX0tKCurp6K866eXsTGRkJBwcHGBsbs84bGhoiLi4O5eXlzLmKigrs37+f0+ehpWRlZaF///4wNzeHrq5uk/qQtT9eXl7Yvn07qqurG9Xvjz/+CGdnZ+jp6eHIkSNIS0vDjh07UFxcjE2bNom9pqamBrW1tY0apzXExMQgJycH9+7dw/fff4/S0lIMGjQIu3fvZtqoqKg0ec+FdHR0oKqq2tzpStWU501ba8pz4cWLF3jx4gW++eYbpKamIjY2FmfOnBH53aOp9zNp/yhoihDCmTDISFje7n1VWfP/QVNUno8QQgghhBBCCCGEEPIeEggEqK2saZNDWuaihn799VcoKSnB3t6+yWudN28e9u7di9TUVE7t9fT0mENTUxM8Ho91Tk1NjWnbuXNn1mt6enpQUFBgXhdeq6+vD2tra/j4+ODq1asoLS3FokWLZM4lKioK06dPx8yZMyUGL6mqqkJPTw/Gxsbw8vJCnz59cO7cOVab0tJSHDhwAAEBAXB1dZWYdUi4HmNjY7i7u2PIkCG4ffu2zHnK2gd5eXlMnz6dtYZnz54hPj4e06dPl9l//X10cHCAj48PkpKSUFJSwmonbr8UFRVZ81JRUWGyRAkPRUVF1jj1jy5dugAAioqKkJiYiA0bNmDYsGEwNjbGwIEDsXTpUnzyyScy1yBrzzQ1NcWWwioqKmKyYQGi5bJqamrg4+MDU1NTqKiowNLSEhEREayxGmZxcXJywrx58xAcHAxtbW24uLgAADZv3ozevXujQ4cOMDQ0RGBgIEpLS0XmfvbsWVhbW0NNTY0JQOO6XhsbGyxbtgwlJSW4ceMG83pqaipGjx4NNTU1dOnSBTNnzkR+fj4z//nz5yM7O5uVmaxhdiMTExN89dVX8Pb2hrq6OoyMjLBz507WPP766y9MnjwZHTt2hJaWFsaOHcsq/Sncq/DwcBgYGMDS0hKrV68Wm2nH1tYWoaGhEtccFxcHNzc3kfP9+vWDoaEhjh49ypw7evQojIyMYGdnx2r79u1bBAUFQVdXF8rKyvjPf/6DmzdvMq8LM/FcuHABAwYMgKqqKhwcHJCRkQGgLkvRqlWrcOfOHSYDUmxsLExMTHDkyBHs3r2bld0qOzsbY8eOhZqaGjQ0NDB58mRWcJswa1VkZCRMTU2hrKwMT09PJCQkICIighlDuKcjRoxAYWEhEhISJO5TQ8+ePUNQUBCCgoIQHR0NJycnmJiYYOjQoYiMjGSCYIUZmE6cOIGePXtCSUkJ2dnZYrNeNcwumJeXBzc3N6ioqMDU1BT79u0TmUdRURF8fX2ho6MDDQ0NDB8+HHfu3JE5/44dO0JPTw8mJiYYOXIkDh8+DHd3d8ybNw+vXr1izV3ozp07GDZsGNTV1aGhoYH+/fvj1q1biI+Ph5eXF4qLi1nZDoHGlROU9ZwICwvDrl278PPPP7My8Il7JiUkJGDgwIFQUlKCvr4+lixZwgoicnJyQlBQEBYtWgQtLS3o6ekxc24u4f23Z88emJiYQFNTE1OnTsXr169Z4wvffycnJzx9+hQLFixg1iWOjY0Njhw5Ajc3N/To0QPDhw9HeHg4fvnlF9bamnI/k3+H9yeskBDS5tpNpqn/D5pS4iu18UwIIYQQQgghhBBCCCGk8QRVtXix4mqbjG2w2gE8RT6ntomJiayMRU0xZMgQZGZmYsmSJTh58mSz+moJurq6cHd3R3R0NGpqasDni9+L169f49ChQ7hx4wasrKxQXFyMxMREfPjhh2LbCwQCXL58Gffv34e5uTnrtYMHD8LKygqWlpaYMWMGgoODsXTpUolfIAPArVu3kJycDA8Pj6Yvth5vb284OTkhIiICqqqqiI2NxahRo5igJK7y8vJw7Ngx8Pl81t41dr8aS01NDWpqajh+/Djs7e2hpPRufD9QW1uLbt264dChQ+jcuTOT0UxfXx+TJ0+WeN2uXbsQEBDAKi0oJyeHb7/9Fqampnj06BECAwOxaNEi/PDDD0ybsrIyfPPNN9izZw/k5OQwY8YMhISEiA06Eae8vJzJuCMMVisqKsLw4cPh6+uLLVu2oLy8HIsXL8bkyZPx+++/IyIiAj169MDOnTtx8+ZNiZ8ZANi0aRPWrFmDZcuW4fDhwwgICICjoyMsLS1RVVUFFxcXDB48GImJiZCXl8fatWsxatQo3L17l5nPhQsXoKGhwQQfampqYtWqVbh58yY++OADAMAff/yBu3fvsgKf6issLERaWhoGDBgg9nVvb2/ExMTA3d0dABAdHQ0vLy8mOE5o0aJFOHLkCHbt2gVjY2Ns3LgRLi4uePjwIbS0tJh2y5cvx6ZNm6Cjo4M5c+bA29sbV65cwZQpU5CamoozZ87g/PnzzHpcXV3h4eEBDQ0NREREQEVFBbW1tUzAVEJCAqqrqzF37lxMmTKFNa+HDx/iyJEjOHr0KPh8PoyNjZGZmQkbGxusXr0aQF0WJOF7bGtri8TERHz00UcS37f6Dh06hMrKSomBpfWDjcrKyrBhwwZERkaic+fOnLM3eXp64sWLF7h48SIUFBQQFBSEvLw8VptPP/0UKioqOH36NDQ1NfHjjz/io48+QmZmJmvvuViwYAF2796Nc+fOif1curu7w87ODtu3bwefz0dKSgoUFBTg4OCArVu3YsWKFUwgXP3AXa5kPSdCQkKQnp6OkpISxMTEAKjL2NQwK+Hz588xZswYeHp6Yvfu3bh//z78/PygrKzMCozatWsXFi5ciBs3buDatWvw9PTEkCFDMGLEiEbPvaGsrCwcP34cJ0+exKtXrzB58mSsX78e4eHhIm2PHj2Kvn37wt/fH35+fo0ap7i4GBoaGqwsW025n8m/AwVNEUI4ay9BU29r3gIAFPgKMloSQgghhBBCCCGEEEIIaaqnT5/CwMCg2f2sW7cOffr0adEgGqCu9JucHLsoi7jMPA1ZWVnh9evXKCgokPglf1xcHMzNzdGrVy8AwNSpUxEVFSUy/x9++AGRkZGorKxEVVUVlJWVERQUxGoTFRWFGTNmAABGjRqF4uJiJCQkwMnJSex6hH35+/tzCprisg92dnbo3r07Dh8+jJkzZyI2NhabN2/Go0ePZPZfXFwMNTU1CAQClJWVAQCCgoLQoUMHpg3X/eIyTn0ffvghTp8+DXl5ecTGxsLPzw87duxAv3794OjoiKlTp6JPnz6cxxBquGeJiYno1KlTo/tRUFDAqlWrmL+bmpri2rVrOHjwoNSgKXNzc2zcuJF1rmHWprVr12LOnDmsoKmqqirs2LEDPXr0AFCXyU0YKCONcL1lZWUQCATo378/E3Swbds22NnZ4auvvmLaR0dHw9DQEJmZmbCwsIC6ujpTKkyaMWPGIDAwEACwePFibNmyBRcvXoSlpSUOHDiA2tpaREZGMgGDMTEx6NixI+Lj4zFy5EgAdeUkIyMjmSAqAHBxcUFMTAwTNBUTEwNHR0d0795d7Dyys7MhEAgkPr9mzJiBpUuXMuUfr1y5gri4OFZw0ps3b7B9+3bExsZi9OjRAID//ve/OHfuHKKiovDFF18wbcPDw+Ho6AgAWLJkCVxdXVFRUQEVFRWoqalBXl6etXfCjGsqKirM+XPnzuHPP//E48ePYWhoCADYvXs3evXqxQoYq6ysxO7du5nAKKAumESY9a4hAwMDVplLWR48eAANDQ3o6+vLbFtVVYUffvgBffv25dx/ZmYmTp8+jaSkJGZNUVFRsLa2ZtpcvnwZSUlJyMvLYwIkv/nmGxw/fhyHDx+Gv78/5/GAumc+AFZWs/qys7PxxRdfMO3qB77Wz3jYVLKeE2pqalBRUcHbt2+ljvPDDz/A0NAQ27ZtA4/Hg5WVFV68eIHFixdjxYoVzDOtT58+WLlyJbOWbdu24cKFCy0SNFVbW4vY2FimBN/MmTNx4cIFsUFTWlpa4PP5UFdXb9T+5efnY82aNWLf58bez+TfgYKmCCGcMUFT73l5PmHQF2WaIoQQQgghhBBCCCGEvI94CnIwWO3QZmNzVV5eDmVl5WaP2bNnT3h4eGDJkiWszDrNdeDAAdYX7VwJSxRKy/QUHR3NBDoBdUEWjo6O+O6775gvi4G6DCXLly/Hq1evsHLlSjg4OMDB4X/vbUZGBpKSknDs2DEAdaXypkyZgqioKJGgKeF6qqqqkJqaivnz56NTp05Yv3691PVw3Qdhdh0jIyO8efMGY8aMwbZt22Rep66ujtu3b6OqqgqnT5/Gvn37RL4g57pfXMapT0VFhfnzxIkT4erqisTERFy/fh2nT5/Gxo0bERkZySr9xUXDPTM0NORU5k6c77//HtHR0cjOzkZ5eTkqKytha2sr9RpxGdzOnz+PdevW4f79+ygpKUF1dTUqKipQVlYGVVVVAHXlIIUBUwCgr68vkqFHnAMHDsDKygqpqalYtGgRYmNjmRKOd+7cwcWLF8Vm0MnKyoKFhYXM/oXqB7AJA02E87tz5w4ePnwocj9UVFQgKyuL+Xvv3r1ZAVMA4OfnB29vb2zevBlycnLYv38/tmzZInEe5eXlACDx+aWjo8OUyhQIBHB1dYW2tjarTVZWFqqqqjBkyBDmnIKCAgYOHIj09HSJ6xYGG+Xl5cHIyEjiHBtKT0+HoaEhEzAF1D07O3bsiPT0dCbAyNjYmBUwJYuKigoT7MiFQCCQ+mysT1FRsdFBi+np6ZCXl2d9BqysrETK5ZWWlqJz586sa8vLy1n3CleynvkLFy6Er68v9uzZA2dnZ3z66aesz1lLaMpzoqH09HQMHjyYtY4hQ4agtLQUz549Y+63hu8J1+cEFyYmJqzPcEv2DQAlJSVwdXVFz549xZYVbOz9TP4dKGiKEMKZIr/ul8z2kmlKuB5CCCGEEEIIIYQQQgh5n/B4PM4l8tqStrY2Xr16xTqnoaEBoC4rUP0vuYG6Ml+amppi+1q1ahUsLCxw/PjxFpufoaEhzMzMGn1deno6NDQ0RL6QF0pLS8P169eRlJSExYsXM+dramoQFxfHKjOkqanJzOHgwYMwMzODvb09nJ2dAdRlUKmurmZlvBEIBFBSUsK2bdtY+1V/PdbW1sjKykJoaCjCwsKkBq9x3Qd3d3csWrQIYWFhmDlzJqvskTRycnIi8woICMCePXsANG6/uI4jibKyMkaMGIERI0YgNDQUvr6+WLlyZaODpsTtmTBLizDAAqjLpCNNXFwcQkJCsGnTJgwePBjq6ur4+uuvcePGDanX1c/SBdRlwPn4448REBCA8PBwaGlp4fLly/Dx8UFlZSUTNCUMdBLi8Xis+UpiaGgIc3NzmJubo7q6GuPHj0dqaiqUlJRQWloKNzc3bNiwQeQ6LtmG6hM3v9raWgB12c/69+8vtpRg/SCghnsDAG5ublBSUsKxY8egqKiIqqoqTJo0SeI8hAFQr169khhg5O3tjXnz5gGoC2hpjvrrFga0CNfd0sTtjzSFhYWNCgCysLBAcXExcnJyZL7/KioqIoFIcnJyIvekrM9RQ6WlpdDX1xcplwhA5OcOF8IgN1NTU7Gvh4WFYfr06Th16hROnz6NlStXIi4uDuPHj2/0WOI09TnRVNI+h+JoaGiIzd5UVFQEPp/Puuca23djvH79GqNGjYK6ujqOHTsmMhbQ+PuZ/Dtw/+cAhJB/PWGmqcqayjaeSfMI509BU4QQQgghhBBCCCGEENJ67OzskJaWxjpnbm4OOTk5JCcns84/evQIxcXFErPSGBoaYt68eVi2bBlqampabc6y5OXlYf/+/Rg3bpxISTuhqKgoDB06FHfu3EFKSgpzLFy4EFFRURL7VlNTw2effYaQkBAIBAJUV1dj9+7d2LRpE6ufO3fuwMDAAD/99JPUufL5fFRXV6OysmX+n76WlhY++eQTJCQkwNvbu8n9LFmyBAcOHGCyQjV1v1pCz5498ebNmxbpSxhcUz/jVEpKitRrrly5AgcHBwQGBsLOzg5mZmZNyoSTnJyM2tpabNq0Cfb29rCwsMCLFy8a3Q8XkyZNgry8PFP2r1+/frh37x5MTExgZmbGOhoboCNNv3798ODBA+jq6oqMIynYUkheXh6zZs1CTEwMYmJiMHXqVFYWsoZ69OgBDQ0NkedXfaNGjWJKYbq4uIjtQ1FRkZUdr6qqCjdv3kTPnj05rLiOoqIip2eetbU1/vrrL/z111/MubS0NBQVFckcT9oYqampsLOz4zzfSZMmQVFRUaR8pFBRUZHU63V0dFifoZqaGqSmpjJ/t7KyQnV1NetnSEZGBqvffv36ITc3F/Ly8iL3SsOMYFxs3boVGhoaTDCrOBYWFliwYAF+++03TJgwATExMQC4v3/ScHlOcBnH2toa165dYwWlXblyBerq6ujWrVuT52dpaYl79+7h7du3rPO3b9+Gqamp2OAlrrjuX0lJCUaOHAlFRUWcOHFCYqBwY+9n8u9AQVOEEM7k5er+1cj7nmlKOH9FOQqaIoQQQgghhBBCCCGEkNbi4uKCe/fusbJNqaurw9fXF59//jlOnDiBx48f49KlS3B3d4e9vT2rNF1DS5cuxYsXL3D+/PkWmV9BQQFyc3NZR0VFBfO6QCBAbm4ucnJykJ6ejujoaDg4OEBTU1Niybuqqirs2bMH06ZNg42NDevw9fXFjRs3cO/ePYlzmj17NjIzM3HkyBGcPHkSr169go+Pj0hfEydOFAkoEq7n2bNnOH36NCIiIjBs2DAmu1dT96G+2NhY5Ofnw8rKSmqf0hgaGmL8+PFYsWJFs/erPuH71fCora1FQUEBhg8fjr179+Lu3bt4/PgxDh06hI0bN2Ls2LFNXkt9KioqsLe3x/r165Geno6EhAR8+eWXUq8xNzfHrVu3cPbsWWRmZiI0NBQ3b95s9NhmZmaoqqrCd999h0ePHmHPnj3YsWNHU5ciFY/HQ1BQENavX4+ysjLMnTsXhYWFmDZtGm7evImsrCycPXsWXl5eLRrg6O7uDm1tbYwdOxaJiYl4/Pgx4uPjERQUhGfPnsm83tfXF7///jvOnDkjM+hPTk4Ozs7OuHz5ssQ2fD4f6enpSEtLA58vmvmvQ4cOCAgIwBdffIEzZ84gLS0Nfn5+KCsrg4+Pj+wF/z8TExM8fvwYKSkpyM/PFwlMEXJ2dkbv3r3h7u6O27dvIykpCR4eHnB0dMSAAQNkjnHjxg08efIE+fn5TOafJ0+e4Pnz51KDhRoyNDTEli1bEBERAR8fHyQkJODp06e4cuUKZs+ejTVr1ki9fvjw4Th16hROnTqF+/fvIyAggBUQZWlpiVGjRmH27Nm4ceMGkpOT4evrywqCc3Z2xuDBgzFu3Dj89ttvePLkCa5evYrly5fj1q1bUscvKipCbm4unj59inPnzmHSpEnYv38/tm/fLjZLVXl5OebNm4f4+HhmnTdv3mTKd5qYmKC0tBQXLlxAfn5+k0rDcXlOmJiY4O7du8jIyEB+fr7Y7FyBgYH466+/MH/+fNy/fx8///wzVq5ciYULF0oMAubC3d0dPB4PHh4eSE5OxsOHDxEdHY2tW7fi888/b3K/QN26Ll26hOfPnyM/P19sG2HA1Js3bxAVFYWSkhLm+V//GdSU+5n8O1DQFCGEMwV+XSTw+x40JSzPp8RXauOZEEIIIYQQQgghhBBCSPvVu3dv9OvXDwcPHmSdj4iIwKxZs7B48WL06tULnp6e6NOnD3755ReRUk31aWlpYfHixRIDehrL2dkZ+vr6rKN++b+SkhLo6+uja9euGDx4MH788UfMmjULf/zxh8SyUydOnEBBQYHYskzW1tawtraWmj1JS0sLHh4eCAsLQ1RUFJydncVm0Zk4cSJu3bqFu3fviqzHxMQE/v7+GDNmDA4cONDsfahPRUVFYlnCxliwYAFOnTqFzZs3N2u/6hO+Xw2PvLw8qKmpYdCgQdiyZQuGDh0KGxsbhIaGws/PD9u2bWP68PT0hJOTU5PXFR0djerqavTv3x/BwcFYu3at1PazZ8/GhAkTMGXKFAwaNAgFBQUIDAxs9Lh9+/bF5s2bsWHDBtjY2GDfvn1Yt25dU5ch06xZs1BVVYVt27bBwMAAV65cQU1NDUaOHInevXsjODgYHTt2bFYgRkOqqqq4dOkSjIyMMGHCBFhbW8PHxwcVFRUyAwOBusATBwcHWFlZYdCgQTLb+/r6Ii4uTmZZMmljr1+/HhMnTsTMmTPRr18/PHz4EGfPnkWnTp1kji80ceJEjBo1CsOGDYOOjo7EDHM8Hg8///wzOnXqhKFDh8LZ2Rndu3fn9AwICQkBn89Hz549oaOjg+zsbADATz/9hJEjR8LY2JhpGxYWBhMTE6n9BQYG4rfffsPz588xfvx4WFlZwdfXFxoaGggJCZF6rbe3N2bNmsUEfHXv3h3Dhg1jtYmJiYGBgQEcHR0xYcIE+Pv7Q1dXl7UXv/76K4YOHQovLy9YWFhg6tSpePr0Kbp06SJ1fC8vL+jr68PKygoBAQFQU1NDUlISpk+fLrY9n89HQUEBPDw8YGFhgcmTJ2P06NFYtWoVAMDBwQFz5szBlClToKOjIzEDlzRcnhN+fn6wtLTEgAEDoKOjw8pwJtS1a1f8+uuvSEpKQt++fTFnzhz4+PjIDO6UpWPHjkhMTERVVRU++eQT2Nra4ttvv8XmzZsxe/bsZvW9evVqPHnyBD169JBYKvP27du4ceMG/vzzT5iZmbGe//Uzr4m7nwkBAJ6AS6Had0xJSQk0NTVRXFzM6YcgIaRlBJwPwOXnl7FmyBqMMxvX1tNpsn57+qGqtgrnJp2DXge9tp4OIYQQQgghhBBCCCGESFRRUYHHjx/D1NRUYrmZd9mpU6fwxRdfIDU1tUUDKAhpDY6Ojhg2bBjCwsJapf+MjAxYWVnhwYMHMDMza5UxiHgCgQDm5uYIDAzEwoULObUfNGgQFixYgGnTpv0DM3y3VFZWwtzcHPv378eQIUOY87NmzQKPx0NsbGzbTY6QRpJ0P5P3m7TfkRsTUyTfmpMkhLQvwnJ2lTUtU/+8LdQKaplMWQpyTa+hSwghhBBCCCGEEEIIIUQ2V1dXPHjwAM+fP4ehoWFbT4cQiYqLi5GVlYVTp061Sv+FhYU4fPgwNDQ06LPwD3v58iXi4uKQm5sLLy8vTtfweDzs3LkTf/75ZyvP7t2UnZ2NZcuWsQJMBAIB4uPjpZYtJORdJO5+JkSIgqYIIZy1h/J89edO5fkIIYQQQgghhBBCCCGk9QUHB7f1FAiRSVNTE8+ePWu1/n18fJCcnIzt27dDSYm+n/gn6erqQltbGzt37mxUaTxbW1vY2tq23sTeYWZmZiLZ0Hg8Hp4+fdpGMyKk6cTdz4QIUdAUIYQzYWam6trqNp5J072tecv8WZGv2IYzIYQQQgghhBBCCCGEEELIv8WxY8faegr/WgKBoK2nQAgh5B1FxaMJIZwJg6be50xT9UsLUnk+QgghhBBCCCGEEEIIIYQQQggh5N+JgqYIIZwJMzPVDzx63wjnriinCB6P18azIYQQQgghhBBCCCGEEEIIIYQQQkhboKApQghn7SnTlBKf6oUTQgghhBBCCCGEEEIIIYQQQggh/1YUNEUI4YwJmqp5j4OmauuCphT4VJqPEEIIIYQQQgghhBBCCCGEEEII+beioClCCGfycvIAKNMUIYQQQgghhBBCCCGEEEIIIYQQQt5vFDRFCOFMmJ2pPQRNKfIV23gmhBBCCCGEEEIIIYQQQgghhBBCCGkrFDRFCOFMUa4u0EgYePQ+elvzFsD/Sg0SQgghhBBCCCGEEEIIaT0FBQXQ1dXFkydP2noqhLS5J0+egMfjISUlhfM1np6eGDduXLPHjo2NRceOHZvdT1MIBAL4+/tDS0uLWb+TkxOCg4PbZD5chYaGwt/fv62nQRqhsrISJiYmuHXrVltPhZOW+nxz0ZTnT0MN59vwc2xiYoKtW7c2uf+W7uefEhYWBltb2390zKFDh2L//v2t1n9L3C9cTZ06FZs2bWKdO3PmDGxtbVFbW9vq41PQFCGEM2Gg0fucaUo4dyrPRwghhBBCCCGEEEIIIa0vPDwcY8eOhYmJCQAgPj4ePB4PRUVFIm0bfknK4/GgrKyMp0+fstqNGzcOnp6ezN/rf4nL4/GkHmFhYcwXgeKO69evA6gLMBGe4/P56NSpEwYNGoTVq1ejuLiY8/qtrKygpKSE3NxckdecnJyYMZSVlWFhYYF169ZBIBCItL127Rr4fD5cXV1FXmu4HkVFRZiZmWHt2rVi+5J0nbR9sLa2Frn+0KFD4PF4zHsrbF8/MKf+PsrJyUFfXx9TpkxBdnY2p/0S3i/Sjvj4eNY49Q9lZWWm75cvXyIgIABGRkZQUlKCnp4eXFxccOXKFYl7xHXPZsyYwel6Q0ND5OTkwMbGhvOYERERiI2N5dy+JTVcr5aWFhwdHZGYmNiofs6cOYPY2FicPHmSWf/Ro0exZs2aVpp58+Xm5iIiIgLLly9nznl6eop9/0eNGtWGM21ZYWFhYtdoZWXV1lPjRFFRESEhIVi8eHGTrn/48CG8vLzQrVs3KCkpwdTUFNOmTXung7Dq/yxRUlJC165d4ebmhqNHj7LaNeb5IylgpqWfR5KCOW/evNnqAYvSAkl5PB6OHz/Oua+QkBBcuHCB+TvXYLhLly7Bzc0NBgYGjRrzxIkT+PvvvzF16lTOPycbqyk/r8S5d+8eJk6cCBMTE/B4PLHBcF9++SXCw8NZv1+NGjUKCgoK2LdvX7PG54KCpgghnLWH8nzCTFNUno8QQgghhBBCCCGEEEJaV1lZGaKiouDj49PkPng8HlasWMG5fU5ODnNs3boVGhoarHMhISFM2/Pnz7Ney8nJQf/+/ZnXhdc+e/YMV69ehb+/P3bv3g1bW1u8ePFC5lwuX76M8vJyTJo0Cbt27RLbxs/PDzk5OcjIyMDSpUuxYsUK7NixQ6RdVFQU5s+fj0uXLkkcW7ieBw8eYNWqVQgPD0d0dLTMecrahw4dOiAvLw/Xrl0TmZORkZHM/oX7+Pz5cxw5cgQZGRn49NNPRdqJ2y8HBwfWvCZPnoxRo0axzjk4OLDGqX/UD7ibOHEi/vjjD+zatQuZmZk4ceIEnJycUFBQIHMNsvbs+++/53Qdn8+Hnp4e5OXlOY+lqakpNUNUZWXrVwcRrvfSpUswMDDAxx9/jL///pvz9VlZWdDX14eDgwOzfi0tLairq7firJu3N5GRkXBwcICxsTHrfMP7LycnBz/99FNzp/qPk7Y3vXr1Elnj5cuX22w+jeXu7o7Lly/j3r17jbru1q1b6N+/PzIzM/Hjjz8iLS0Nx44dg5WVFT7//HOJ11VVtf33psKfJVlZWThy5Ah69uyJqVOnsgKPmvL8aUjW86il6OjoQFVVtdXHaSlqamro3Llzo6978+YN+vbty/lniNC3334LLy8vyMnJNernJMD9s9YS9wtQ97tg9+7dsX79eujp6YltY2Njgx49emDv3r2s856envj222+bNT4XFDRFCOGsPWSaEpYWpKApQgghhBBCCCGEEELI+0ogEKCysrJNDmmZixr69ddfoaSkBHt7+yavdd68edi7dy9SU1M5tdfT02MOTU1N8Hg81jk1NTWmbefOnVmv6enpQUFBgXldeK2+vj6sra3h4+ODq1evorS0FIsWLZI5l6ioKEyfPh0zZ86UGLykqqoKPT09GBsbw8vLC3369MG5c+dYbUpLS3HgwAEEBATA1dVVYpYP4XqMjY3h7u6OIUOG4Pbt2zLnKWsf5OXlMX36dNYanj17hvj4eEyfPl1m//X30cHBAT4+PkhKSkJJSQmrnbj9UlRUZM1LRUWFyRIlPBQVFVnj1D+6dOkCACgqKkJiYiI2bNiAYcOGwdjYGAMHDsTSpUvxySefyFyDrD3T1NQUm5mlqKiIleWjYZuamhr4+PjA1NQUKioqsLS0REREBGssceWw5s2bh+DgYGhra8PFxQUAsHnzZvTu3RsdOnSAoaEhAgMDUVpaKjL3s2fPwtraGmpqaswX61zXa2Njg2XLlqGkpAQ3btxgXk9NTcXo0aOhpqaGLl26YObMmcjPz2fmP3/+fGRnZ7Myk4kr6/XVV1/B29sb6urqMDIyws6dO1nz+OuvvzB58mR07NgRWlpaGDt2LKv0p3CvwsPDYWBgAEtLS6xevVpsphRbW1uEhoZKXHNcXBzc3NxEzje8//T09NCpUyfm9aKiIsyePRtdunSBsrIybGxscPLkSeb1I0eOoFevXlBSUoKJiYlISSoTExOsXbsWHh4eUFNTg7GxMU6cOIGXL19i7NixUFNTQ58+fViZjwoKCjBt2jR07doVqqqq6N27t0ggl6T7Rhx5eXmRNWpra7Pm2BrvFQBcvXoVtra2UFZWxoABA3D8+HHmMyMQCGBmZoZvvvmGNVZKSgp4PB4ePnwIAOjUqROGDBmCuLg4iWtsSCAQwNPTE+bm5khMTISrqyt69OgBW1tbrFy5Ej///DOA/32GDxw4AEdHRygrK2Pfvn1iy7Nt3bqVlYmvpqYGCxcuRMeOHdG5c2csWrRI5GdqbW0t1q1bxzwT+vbti8OHD8ucv/BnSbdu3WBvb48NGzbgxx9/xH//+1+cP3+eNXfh8+fVq1dwd3eHjo4OVFRUYG5ujpiYGACAqakpAMDOzg48Hg9OTk4AGl9OUNpzKT4+Hl5eXiguLmZlgwREM09mZ2cz97+GhgYmT57MCtwU7v+ePXtgYmICTU1NTJ06Fa9fv+Y8V0mEmZwuXLiAAQMGQFVVFQ4ODsjIyBAZX/jnXbt24eeff5aZ6Wn06NFYu3Ytxo8fz3k+L1++xO+//848n2T9nNyxYwcGDhyIyMhImJqaMhkYz5w5g//85z/M/fjxxx8jKyuLGafh/cJlH8T54IMP8PXXX2Pq1KlQUpJcCcrNzU3kM+vm5oZbt26x5tUamhcWRgj5VxEGGlXVtIOgKTkKmiKEEEIIIYQQQgghhLyfqqqq8NVXX7XJ2MuWLWOCVGRJTExkZSxqiiFDhiAzMxNLlixhBR60FV1dXbi7uyM6Oho1NTXg8/li271+/RqHDh3CjRs3YGVlheLiYiQmJuLDDz8U214gEODy5cu4f/8+zM3NWa8dPHgQVlZWsLS0xIwZMxAcHIylS5eCx+NJnOetW7eQnJwMDw+Ppi+2Hm9vbzg5OSEiIgKqqqqIjY3FqFGjmKAkrvLy8nDs2DHw+XzW3jV2vxpLTU0NampqOH78OOzt7aV+cftPqq2tRbdu3XDo0CF07tyZyWimr6+PyZMnS7xu165dCAgIYJUWlJOTw7fffgtTU1M8evQIgYGBWLRoEX744QemTVlZGb755hvs2bMHcnJymDFjBkJCQjiXPyovL8fu3bsBgHkOFBUVYfjw4fD19cWWLVtQXl6OxYsXY/Lkyfj9998RERGBHj16YOfOnbh586bEzwwAbNq0CWvWrMGyZctw+PBhBAQEwNHREZaWlqiqqoKLiwsGDx6MxMREyMvLY+3atRg1ahTu3r3LzOfChQvQ0NBggg81NTWxatUq3Lx5Ex988AEA4I8//sDdu3dFypcJFRYWIi0tDQMGDOC0L0K1tbUYPXo0Xr9+jb1796JHjx5IS0tj1pycnIzJkycjLCwMU6ZMwdWrVxEYGIjOnTuzSo5u2bIFX331FUJDQ7FlyxbMnDkTDg4O8Pb2xtdff43FixfDw8MD9+7dA4/HQ0VFBfr374/FixdDQ0MDp06dwsyZM9GjRw8MHDiQ6VfcfdNUrfFelZSUwM3NDWPGjMH+/fvx9OlTVmAdj8eDt7c3YmJiWFkDY2JiMHToUJiZmTHnBg4c2KgykikpKbh37x72798POTnRvDMNsystWbIEmzZtgp2dHZSVlfHjjz9y2rPY2FhER0fD2toamzZtwrFjxzB8+HCmzbp167B3717s2LED5ubmuHTpEmbMmAEdHR04OjpyXg8AzJo1C59//jmOHj0KZ2dnkddDQ0ORlpaG06dPQ1tbGw8fPkR5eTkAICkpCQMHDsT58+fRq1cvzj/3G5L2XHJwcMDWrVuxYsUKJvCmfmCzUG1tLRMwlZCQgOrqasydOxdTpkxhBSNlZWXh+PHjOHnyJF69eoXJkydj/fr1CA8Pb9LcG1q+fDk2bdoEHR0dzJkzB97e3mI/SyEhIUhPT0dJSQkThKalpdUicwDqsjKqqqqKLZsrycOHD3HkyBEcPXqUeR69efMGCxcuRJ8+fVBaWooVK1Zg/PjxSElJEfsZEOK6D401cOBAhIeH4+3bt8zPaCMjI3Tp0gWJiYno0aNHs8eQhIKmCCGctadMU0r8d+M/iAghhBBCCCGEEEIIIaS9evr0KQwMDJrdz7p169CnT58WDaIB6kq/NfxiUFxmnoasrKzw+vVrFBQUQFdXV2ybuLg4mJubo1evXgCAqVOnIioqSmT+P/zwAyIjI1FZWYmqqiooKysjKCiI1SYqKgozZswAUFcarLi4GAkJCUzmj4brEfbl7+/PKWiKyz7Y2dmhe/fuOHz4MGbOnInY2Fhs3rwZjx49ktl/cXEx1NTUIBAIUFZWBgAICgpChw4dmDZc94vLOPV9+OGHOH36NOTl5REbGws/Pz/s2LED/fr1g6OjI6ZOnYo+ffpwHkOo4Z4lJiaysg1xpaCggFWrVjF/NzU1xbVr13Dw4EGpQVPm5ubYuHEj61zDrE1r167FnDlzWEFTVVVV2LFjB/Pl87x587B69WqZ8xSut6ysDAKBAP3798dHH30EANi2bRvs7OxYgZzR0dEwNDREZmYmLCwsoK6uzpR6kmbMmDEIDAwEACxevBhbtmzBxYsXYWlpiQMHDqC2thaRkZFMwGBMTAw6duyI+Ph4jBw5EkBdOcnIyEhWkIeLiwtiYmKYoKmYmBg4Ojqie/fuYueRnZ0NgUAg9vl18uRJkfts2bJlWLZsGc6fP4+kpCSkp6fDwsICAFhjbN68GR999BGT4crCwgJpaWn4+uuvWUFTY8aMwezZswEAK1aswPbt2/HBBx8wZS0XL16MwYMH4++//4aenh66du3KCiKaP38+zp49i4MHD7KCpsTdN+L8+eefImucMWMGq3Roa7xXO3bsAI/Hw3//+18oKyujZ8+eeP78Ofz8/JhxPT09sWLFCiaop6qqCvv37xfJPmVgYMAqzynLgwcPANQ937kIDg7GhAkTOPcP1GWeWrp0KXPdjh07cPbsWeb1t2/f4quvvsL58+cxePBgAHX3z+XLl/Hjjz82OmhKTk4OFhYWrAxf9WVnZ8POzo4JDqyfFUtHRwfA/7LMNZW055KioiIrI6QkFy5cwJ9//onHjx/D0NAQALB792706tWLFQxZW1uL2NhYpuznzJkzceHChRYLmgoPD2fegyVLlsDV1RUVFRVM5iYhNTU1qKio4O3bt83aO0mePn2KLl26SA1saqiyshK7d+9m3legrmRtfdHR0dDR0UFaWprY7HxCXPehsQwMDFBZWYnc3FxWWdTGfpabgoKmCCGctYegqbc1bwEACnwFGS0JIYQQQgghhBBCCCHk3aSgoIBly5a12dhclZeXN/tLNADo2bMnPDw8sGTJkhbJZiB04MCBRmVqEBKWU5KW6Sk6OpoJdALqAg4cHR3x3XffMV/oAoC7uzuWL1+OV69eYeXKlXBwcICDgwPzekZGBpKSknDs2DEAdWWzpkyZgqioKJGgKeF6qqqqkJqaivnz56NTp05Yv3691PVw3QdhhhcjIyO8efMGY8aMwbZt22Rep66ujtu3b6OqqgqnT5/Gvn37RL7E5rpfXMapT0VFhfnzxIkT4erqisTERFy/fh2nT5/Gxo0bERkZyQpY4aLhnhkaGnIqcyfO999/j+joaGRnZ6O8vByVlZUiZb4aEpfB7fz581i3bh3u37+PkpISVFdXo6KiAmVlZVBVVQVQV8KrfrYOfX195OXlyZzjgQMHYGVlhdTUVCxatAixsbHMs+DOnTu4ePGi2AwxWVlZTPAQF/UD2ISBFML53blzBw8fPhS5HyoqKlilm3r37i2SFcfPzw/e3t7YvHkz5OTksH//fmzZskXiPITZdsQ9v4YNG4bt27ezzgmzyKSkpKBbt24S15yeno6xY8eyzg0ZMgRbt25lZa6rvw/CbG69e/cWOZeXlwc9PT3U1NTgq6++wsGDB/H8+XNUVlbi7du3zPsuxDXzn6WlJU6cOME6p6Ghwfp7a7xXGRkZ6NOnD2vf6wd9AXUBFK6uroiOjsbAgQPxyy+/4O3bt0xAmZCKigoTpMlFY0rPAmh0FrLi4mLk5ORg0KBBzDl5eXkMGDCAGfvhw4coKyvDiBEjWNdWVlbCzs6uUeMJCQQCiT+rAgICMHHiRNy+fRsjR47EuHHjWD9/WgKX55Is6enpMDQ0ZAKmgLrfCzp27Ij09HQmaMrExIR1z3F9vnFV/57X19cHUPcZNDIyarExuGjK71bGxsasgCmgLlBwxYoVuHHjBvLz81FbWwugLphOWtCUpH0A6t4XIWEwKVfCn9cNP7eN/Sw3BQVNEUI4Y4Km3ufyfLWUaYoQQgghhBBCCCGEEPJ+4/F4TS6V80/S1tbGq1evWOeEX7wXFxeLlDsqKiqCpqam2L5WrVoFCwsLHD9+vMXmZ2hoyCrnxFV6ejo0NDTQuXNnsa+npaXh+vXrSEpKwuLFi5nzNTU1iIuLY2VN0dTUZOZw8OBBmJmZwd7enimlFBUVherqalbGG4FAACUlJWzbto21X/XXY21tjaysLISGhiIsLEzqF6xc98Hd3R2LFi1CWFgYZs6cCXl5bl8zysnJicwrICAAe/bsAdC4/eI6jiTKysoYMWIERowYgdDQUPj6+mLlypWNDpoSt2fCrB/1gy+qqqR/nxIXF4eQkBBs2rQJgwcPhrq6Or7++mvcuHFD6nX1s3QBwJMnT/Dxxx8jICAA4eHh0NLSwuXLl+Hj44PKykomOKFh0COPx+MULGJoaAhzc3OYm5ujuroa48ePR2pqKpSUlFBaWgo3Nzds2LBB5DrhF+pciZuf8Iv80tJS9O/fX2wpwfrBAA33BgDc3NygpKSEY8eOQVFREVVVVZg0aZLEeWhrawMAXr16JRJo0KFDB4n3Wf0gveaovw/CgBdx54R78/XXXyMiIgJbt25F79690aFDBwQHB6OyslJk7lwoKirK/Cy11nvFha+vL2bOnIktW7YgJiYGU6ZMEQnAKSwsFHnvpBEGut2/f59TgFLDucvJyYl8lmR9/hsSZvg7deoUunbtynqtKSVFa2pq8ODBAyaoqKHRo0fj6dOn+PXXX3Hu3Dl89NFHmDt3rkjWrqbi+lxqKdLuSXE0NDTw5s0b1NbWsrI2FRUVAYDI7yPSPoP/JHG/W8ki6blobGyM//73vzAwMEBtbS1sbGxEnhsNSdqHbt26ISUlhXmtsSUJCwsLAUDkc9vYz3JTcM/ZRQj51xNmZ3qfM00JA74U5d79/6FACCGEEEIIIYQQQgj5P/buO06uuuz///tM3TazvaRvGmmQBkoRQTSCnWZBERFB9Ea+3uLNbYeft73edr0tgGADG6goKKII0pMAgSSElN303WyfrVPP748zZzYh2ezO7MycndnX8/HI4yy7M+dzLUk2u595f64LhWzNmjXasmXLEe9bvHixXC6XNmzYcMT7d+3apb6+vjE7tMyZM0fXXnutPvGJTygej+es5vEcOnRIv/zlL3XBBReMORrnpptu0llnnaVnnnlGTz/9dOrXhz/8Yd10001j3ruiokL/+Z//qeuvv16maSoWi+m2227T17/+9SPu88wzz2jmzJn61a9+ddxa3W63YrHYuC+ATlRNTY3e9KY36V//+pfe8573ZHyfj33sY7rjjjtSXaEy/f+VDcuXL9fg4GBW7mW/qHt4x6nDX0A+locfflhnnHGGrrnmGq1Zs0aLFi06ohPPRG3YsEGJREJf//rXddppp+mEE07QgQMH0r7PRLz5zW+Wx+NJjf1bu3atNm/erObmZi1atOiIX5mGYo5l7dq12r59uxoaGo5aZ6ywpc3j8ejyyy/XLbfcoltuuUWXXHLJcQNOCxcuVDAYPOrr13hWrlypffv26YUXXjjmx5ctW3ZUt7yHH35YJ5xwQqrLVCYefvhhnX/++XrnO9+pVatWacGCBWPWkA+Z/l4tWbJEzz77rMLhcOp9Tz755FGPe93rXqfy8nL94Ac/0L333nvMr0fPPfdcWt2ZVq9ereXLl+vrX//6MYMwdpBmLPX19WprazsiOHX43//KykrNmDHjiEBkLBY74t/C5cuXy+/3a8+ePUf9fzu8y9JE3Xrrrerp6TlqDNuL67788sv185//XN/85jf1ox/9SJJSwezJ/Hs7ka9LPp9v3DWWLVumvXv3au/evan3bdmyRb29vUd0NkrXkiVLFIvFjvo6bf/blE6XvBebyOeVqTVr1qitrS3t4NThurq6tG3bNn3qU5/Sq171Ki1btmxS95Osr7OH/5lNNzT13HPPafbs2anQqjTanS7TTmsTRWgKwITZnabsbk2FyB7P53MTmgIAAAAAAACAXDrvvPO0efPmI16ICwQCuuqqq/Rf//Vf+uMf/6iWlhY9+OCDuvTSS3XaaacddzTQxz/+cR04cEB///vfs1JfV1eX2trajvg1MjKS+rhpmmpra9PBgwe1detW3XzzzTrjjDNUWVk55si7aDSqn/3sZ3r729+uE0888YhfV111lR5//HFt3rx5zJre97736YUXXtDvfvc73X333erp6dGVV1551L0uvvjiowJF9uezb98+3XPPPfrWt76lc84556ixWun+fzjcT3/6U3V2dmrp0qXHvefxzJkzRxdeeKFuvPHGSf//Opz9+/XiX4lEQl1dXXrlK1+pn//859q0aZNaWlr0m9/8Rl/5yleOGpeWqdLSUp122mn60pe+pK1bt+pf//qXPvWpTx33OYsXL9b69ev117/+VS+88IJuuOGGY4ZExrNo0SJFo1F95zvf0a5du/Szn/1M//d//5fpp3JchmHogx/8oL70pS9paGhIH/jAB9Td3a23v/3tevLJJ7Vz50799a9/1RVXXJHV0MCll16quro6nX/++XrooYfU0tKiBx54QB/84Ae1b9++cZ9/1VVX6R//+MeYIZvDuVwurVu3Tv/+97+P+lg4HD7qz1hnZ6ck6eyzz9ZZZ52liy++WPfdd59aWlp0zz336N5775Uk/dd//Zfuv/9+ffazn9ULL7ygW2+9Vd/97nd1/fXXZ/B/ZNTixYt133336ZFHHtHWrVv1vve9T+3t7RnfLxaLHfU5pnO/TH+v3vGOdyiRSOjqq6/W1q1b9de//jXV9ejwEXNut1vvfve79fGPf1yLFy/W6aefftS9HnroIZ177rkTrtkwDN1yyy164YUX9PKXv1x/+ctftGvXLm3atEmf//znx/068YpXvEIdHR36yle+op07d+p73/ue7rnnniMe85//+Z/60pe+pLvuukvPP/+8rrnmmiPCWIFAQNdff72uu+463Xrrrdq5c6c2btyo73znO7r11luPu/7Q0FDq6/9jjz2mj370o3r/+9+v//iP/9A555xzzOfceOON+sMf/qAdO3Zo8+bNuvvuu1NjRxsaGlRaWqp7771X7e3t6uvrm8D/xSNN5OtSc3OzBgYGdP/996uzs/OYY9jWrVunk046SZdeeqk2btyoJ554Qu9617t09tlnpz0m8XArVqzQueeeq/e85z26//771dLSonvvvVfXXHON3va2tx3V7Ssdzc3N2rRpk7Zt26bOzs4xu44NDAykgsKS1NLSoqefflp79uwZ895r1qxRXV3dpMYVV1dXq7a2Vj/60Y+0Y8cO/eMf/9CHP/zhjO93PJFIJPU5RiIR7d+/X08//bR27NhxxOOO9Xf2sccek9/vP+bf8WwiNAVgwoppPB+hKQAAAAAAAADIrZNOOklr167Vr3/96yPe/61vfUuXX365PvrRj2rFihV697vfrZUrV+pPf/rTES+Mv1hNTY0++tGPjhnoSde6des0Y8aMI34dPv4vFAppxowZmjVrlk4//XT98Ic/1OWXX66nnnpqzLFjf/zjH9XV1aULL7zwqI8tW7ZMy5YtO273pJqaGr3rXe/Spz/9ad10001at27dMTuzXHzxxVq/fr02bdp01OfT3Nysq6++Wq973et0xx13TPr/w+FKS0vHHEuYjuuuu05//vOf9b//+7+T+v91OPv368W/Dh06pIqKCp166qn6xje+obPOOksnnniibrjhBr33ve/Vd7/73dQ93v3ud+sVr3hFxp/XzTffrFgsppNPPlkf+tCH9LnPfe64j3/f+96niy66SG9729t06qmnqqurS9dcc03a665atUr/+7//qy9/+cs68cQT9Ytf/EJf/OIXM/00xnX55ZcrGo3qu9/9rmbOnKmHH35Y8Xhc5557rk466SR96EMfUlVV1Zjd2DJRVlamBx98UHPnztVFF12kZcuW6corr9TIyMi4wUDJChadccYZWrp0qU499dRxH3/VVVfp9ttvP6rr0L333nvUn7Ezzzwz9fHf/e53eslLXqK3v/3tWr58uT7ykY+kwmP218Pbb79dJ554om688UZ95jOfSXs85It96lOf0tq1a3XeeefpFa94hZqamnTBBRdkfL/Nmzcf9TnOmzdvws/P9PcqGAzqT3/6k55++mmtXr1an/zkJ3XjjTdK0lEjRu0Rb1dcccVR93n00UfV19d3xAjGBx54QIZhqLW1dcz1X/rSl2r9+vVatGiR3vve92rZsmV605vepM2bN+ub3/zmcT/nZcuW6fvf/76+973vadWqVXriiSeOCsP913/9ly677DJdfvnlqXGcL/7a99nPflY33HCDvvjFL2rZsmV6zWteoz//+c+aP3/+cdf/8Y9/rBkzZmjhwoW66KKLtGXLFt1xxx2pjnDH4vP59PGPf1wrV67UWWedJbfbrdtvv12S1TXo29/+tn74wx9q5syZGYVLJ/J16YwzztD73/9+ve1tb1N9fb2+8pWvHHUfwzD0hz/8QdXV1TrrrLO0bt06LViwYEL/vo3njjvu0Nlnn633ve99WrFihT74wQ/q/PPP109+8pNJ3fe9732vlixZolNOOUX19fVjBpzWr1+vNWvWpDopffjDH9aaNWtSf+6Pxe1264orrjjm+MuJcrlcuv3227VhwwadeOKJuu666/TVr3414/sdz4EDB1Kf48GDB/W1r31Na9as0VVXXZV6zMjIiO66666jxvH+6le/0qWXXpr1UY4vZpgTGVQ7xYRCIVVWVqqvr29C/wgCyI7NXZt1yd2XqLGsUX9/S3ZO8uTb5x77nO7Ydofev+r9+sDqDzhdDgAAAAAAAAAc18jIiFpaWjR//vyjXjQuBH/+85/13//933ruueeyGqAAcuHss8/WOeeco09/+tM5uf+2bdu0dOlSbd++XYsWLcrJGjg20zS1ePFiXXPNNRPqqGKapk499VRdd911evvb356HCnEsv/jFL3TFFVeor6/viJGKDz30kF71qldp7969amxsPOI5b3vb27Rq1Sp94hOfSL3vlltu0Re+8AVt2bJFXq83b/UDudDW1qYVK1Zo48aNaQUap6of/OAHuvPOO/W3v/0t9b7Ozk4tWbJE69evHzM0eLzvkdPJFHkm/ykAmC5SnaYSBdxpKm51mvK7/Q5XAgAAAAAAAADF7/Wvf722b9+u/fv3a86cOU6XA4ypr69PO3fu1J///Oec3L+7u1u//e1vFQwG+buQZx0dHbr99tvV1tZ2zM5Ex2IYhn70ox/p2WefzXF1ONxtt92mBQsWaNasWXrmmWf00Y9+VG9961tTgalwOKyOjg59+tOf1lve8pajAlORSEQnnXSSrrvuuiPe/5e//EVf+MIXCEyhKDQ1Nemmm27Snj17iiI05fV69Z3vfOeI97W2tur73//+uF3WsoHQFIAJ87ms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6wQADBzR2psefPDBA/ak3bt3KyMjQ5dccklUrxcAENuitS/99re/1e2336677rpLW7Zs0d13363FixfrpZdeiur1AoOBxTAMw+wiamtrlZOTo/Xr1+v000+X1+tVdna2VqxYoYsvvliStHXrVo0dO1bvvvuuTj311ANef9ddd+mvf/2rPvroowOeX7BggQKBgJ577rne537zm9/o3nvvVUVFhSwWS8SvDQAwMB3r3tRj8eLF+uyzz7Ru3bqD/m7WrFmaNGmSHnjggUheCgBgkIjG3tTjoosuUkpKipYtWxaRawEADA6R2pveeOMNnXnmmWpsbFRaWlq0LgcAMAhE6+emv/71r7roootUWlqq4cOHR+x6AAADW6T2pRkzZmjmzJkHTNn63ve+p/fee09vv/125C8MGERM6TT1n7xeryQpIyNDUig9GQgENHv27N5jxowZo8LCQr377rt9Xrejo0NJSUkHPOd0OrVnzx6Vl5eHoXIAwGAVrr3J6/X2rgEAwLGI1t70z3/+U++8847OOOOMMFUOABisIr03TZo0Sfn5+TrnnHP0j3/8I8zVAwAGo2j93PTYY49p9uzZBKYAAIcVqX3py3IQ77//vgKBQDgvARj0TA9NBYNB3XzzzZo5c6YmTJggSaqurlZCQsJB7yTLzc1VdXV1n9eeO3euXnjhBb322msKBoPavn27fvnLX0qSqqqqwnYNAIDBJVx70zvvvKNnnnlG3/72tyNdMgBgkIvG3jRs2DAlJibq5JNP1uLFi/Wtb30r7NcBABg8Irk35efn63e/+52ef/55Pf/88yooKNCsWbO0adOmiF0PAGDgi9Y9vcrKSq1atYqfmQAAhxXJfWnu3Ll69NFHtXHjRhmGoQ8//FCPPvqoAoGA6urqInZNwGBkN7uAxYsXa/PmzRFpE3fddddp586dOv/88xUIBOR2u3XTTTfprrvuktVqel4MABCjwrE3bd68WRdccIHuvPNOzZkzJ4zVAQDiUTT2prfeekvNzc3asGGDbrvtNo0aNUqXX375sZQNABjEIrk3jR49WqNHj+79fMaMGdq5c6fuv/9+RscCAL5UtO7pLVmyRGlpafr6179+1OcBAAx+kdyXfvSjH6m6ulqnnnqqDMNQbm6uSkpKdO+995KDAPrJ1K+Y66+/Xi+//LJef/11DRs2rPf5vLw8dXZ2qqmp6YDja2pqlJeX1+f1LRaLfv7zn6u5uVnl5eWqrq7WKaecIkkaMWJEWK4BADC4hGNv+vTTT3X22Wfr29/+tu64445olA0AGMSitTcVFxfrhBNO0HXXXadbbrlFd911V7gvBQAwSJjxc9Mpp5yiHTt2hKV+AMDgE629yTAMPf7441q4cKESEhLCfh0AgMEh0vuS0+nU448/rtbWVpWVlamiokJFRUVyuVzKzs6O2HUBg5EpoSnDMHT99dfrL3/5i9atW6fi4uID/n7KlClyOBx67bXXep/btm2bKioqNH369H6fz2azaejQoUpISNBTTz2l6dOn880CAHCAcO1NW7Zs0ZlnnqmSkhL99Kc/jVr9AIDBx8y9KRgMqqOjIzwXAgAYNMzcmz766CPl5+eH50IAAINGtPem9evXa8eOHbr22mvDfzEAgAEv2vuSw+HQsGHDZLPZ9PTTT+v888+n0xTQT6aM51u8eLFWrFihF198US6Xq3c+p8fjkdPplMfj0bXXXqtbb71VGRkZcrvduuGGGzR9+nSdeuqpvevs2LFDzc3Nqq6uVltbmz766CNJ0rhx45SQkKC6ujr9+c9/1qxZs9Te3q4nnnhCzz33nNavX2/GZQMAYlg49qbNmzfrrLPO0ty5c3Xrrbf2rmGz2Q4I6/bsV83NzaqtrdVHH32khIQEjRs3LroXDQCIadHamx5++GEVFhZqzJgxkqQ333xTv/jFL3TjjTeacNUAgFgWrb3pgQceUHFxscaPH6/29nY9+uijWrdunVavXm3OhQMAYlY07+lJ0mOPPaZp06ZpwoQJ0b1QAMCAEK19afv27Xr//fc1bdo0NTY26le/+pU2b96sJUuWmHPhwEBmmEDSIf888cQTvce0tbUZ3/3ud4309HQjOTnZuPDCC42qqqoD1jnjjDMOuU5paalhGIZRW1trnHrqqUZKSoqRnJxsnH322caGDRuieKUAgIEiHHvTnXfeecg1hg8ffsRz/ecxAABEa2/69a9/bYwfP95ITk423G63MXnyZOORRx4xuru7o3i1AICBIFp7089//nNj5MiRRlJSkpGRkWHMmjXLWLduXRSvFAAwUETznl5TU5PhdDqNP/zhD1G6OgDAQBOtfenTTz81Jk2aZDidTsPtdhsXXHCBsXXr1iheKTB4WAzDMI4hcwUAAAAAAAAAAAAAAAAAAwoDLQEAAAAAAAAAAAAAAADEFUJTAAAAAAAAAAAAAAAAAOIKoSkAAAAAAAAAAAAAAAAAcYXQFAAAAAAAAAAAAAAAAIC4QmgKAAAAAAAAAAAAAAAAQFwhNAUAAAAAAAAAAAAAAAAgrhCaAgAAAAAAAAAAAAAAABBXCE0BAAAAAAAAAAAAAAAAiCuEpgAAAAAAAAAAAAAAAADEFUJTAAAAAAAAAAAAAAAAAOIKoSkAAAAAAAAAAAAAAAAAceX/A2H/CFtxXgw4AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 3000x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "avail['2019-01-01':].plot(figsize=(30,12))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f3702310",
   "metadata": {},
   "outputs": [],
   "source": [
    "unplanned_minus_ex = unplanned_ex2 - unplanned_ex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "af713b31-5894-49d6-9fc2-a58e7396c472",
   "metadata": {},
   "outputs": [],
   "source": [
    "unplanned_minus_ex.to_csv('unplanned_padd3_weather.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3a7896cc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>1997-03-01</th>\n",
       "      <th>1997-04-01</th>\n",
       "      <th>1997-05-01</th>\n",
       "      <th>1997-06-01</th>\n",
       "      <th>1997-07-01</th>\n",
       "      <th>1997-08-01</th>\n",
       "      <th>1997-09-01</th>\n",
       "      <th>1997-10-01</th>\n",
       "      <th>1997-11-01</th>\n",
       "      <th>1997-12-01</th>\n",
       "      <th>...</th>\n",
       "      <th>2031-02-01</th>\n",
       "      <th>2031-03-01</th>\n",
       "      <th>2031-04-01</th>\n",
       "      <th>2031-05-01</th>\n",
       "      <th>2031-06-01</th>\n",
       "      <th>2031-07-01</th>\n",
       "      <th>2031-08-01</th>\n",
       "      <th>2031-09-01</th>\n",
       "      <th>2031-10-01</th>\n",
       "      <th>2031-11-01</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>PLANT_NAME</th>\n",
       "      <th>UNIT_NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">AUSTRIA</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Schwechat Refinery</th>\n",
       "      <th>Crude 1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crude 2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">BELGIUM</th>\n",
       "      <th>Antwerp Refinery</th>\n",
       "      <th>Crude Unit</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GPA (Gunvor Petroleum Antwerp) Refinery</th>\n",
       "      <th>Crude (Unit 700)</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antwerpen Refinery</th>\n",
       "      <th>CDU 4 (Crude)</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">UNITED KINGDOM</th>\n",
       "      <th>Dundee Refinery</th>\n",
       "      <th>Crude</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Stanlow Refinery</th>\n",
       "      <th>CDU 4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CDU 3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Coryton Refinery</th>\n",
       "      <th>Crude</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Teesside Refinery (Petroplus)</th>\n",
       "      <th>Crude</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 417 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                         1997-03-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         1997-04-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         1997-05-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         1997-06-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         1997-07-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         1997-08-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         1997-09-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         1997-10-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         1997-11-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         1997-12-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         ...  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME         ...   \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1           ...   \n",
       "                                                       Crude 2           ...   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit        ...   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)  ...   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)     ...   \n",
       "...                                                                      ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude             ...   \n",
       "               Stanlow Refinery                        CDU 4             ...   \n",
       "                                                       CDU 3             ...   \n",
       "               Coryton Refinery                        Crude             ...   \n",
       "               Teesside Refinery (Petroplus)           Crude             ...   \n",
       "\n",
       "                                                                         2031-02-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         2031-03-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         2031-04-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         2031-05-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         2031-06-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         2031-07-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         2031-08-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         2031-09-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         2031-10-01  \\\n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                      \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0   \n",
       "                                                       Crude 2                  0.0   \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0   \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0   \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0   \n",
       "...                                                                             ...   \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0   \n",
       "               Stanlow Refinery                        CDU 4                    0.0   \n",
       "                                                       CDU 3                    0.0   \n",
       "               Coryton Refinery                        Crude                    0.0   \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0   \n",
       "\n",
       "                                                                         2031-11-01  \n",
       "COUNTRY        PLANT_NAME                              UNIT_NAME                     \n",
       "AUSTRIA        Schwechat Refinery                      Crude 1                  0.0  \n",
       "                                                       Crude 2                  0.0  \n",
       "BELGIUM        Antwerp Refinery                        Crude Unit               0.0  \n",
       "               GPA (Gunvor Petroleum Antwerp) Refinery Crude (Unit 700)         0.0  \n",
       "               Antwerpen Refinery                      CDU 4 (Crude)            0.0  \n",
       "...                                                                             ...  \n",
       "UNITED KINGDOM Dundee Refinery                         Crude                    0.0  \n",
       "               Stanlow Refinery                        CDU 4                    0.0  \n",
       "                                                       CDU 3                    0.0  \n",
       "               Coryton Refinery                        Crude                    0.0  \n",
       "               Teesside Refinery (Petroplus)           Crude                    0.0  \n",
       "\n",
       "[150 rows x 417 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RefineryData().get_outage('COUNTRY', OECD_EU_COUNTRIES, unit_type = 'CDU').resample('MS').mean().T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abe46bc0-5b65-4da4-b1f5-f19a7416918c",
   "metadata": {},
   "source": [
    "# Refinery"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "8ef0e139",
   "metadata": {},
   "outputs": [],
   "source": [
    "with pd.ExcelWriter('output.xlsx') as writer:  # doctest:+SKIP\n",
    "    unplanned_ex.groupby(axis=1, level='COUNTRY').sum().resample('MS').mean()['2005-01-01':].to_excel(writer,sheet_name='unplanned')\n",
    "    planned.groupby(axis=1, level='COUNTRY').sum().resample('MS').mean()['2005-01-01':].to_excel(writer,sheet_name='planned')\n",
    "    unplanned_minus_ex.groupby(axis=1, level='COUNTRY').sum().resample('MS').mean()['2005-01-01':].to_excel(writer,sheet_name='eco_unplanned')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "b08ee8e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_countries = ['CHINA',\n",
    " 'UNITED ARAB EMIRATES',\n",
    " 'GABON',\n",
    " 'IRELAND',\n",
    " 'TANZANIA',\n",
    " 'EGYPT',\n",
    " 'JORDAN',\n",
    " 'ARGENTINA',\n",
    " 'CROATIA',\n",
    " 'SYRIA',\n",
    " 'SRI LANKA',\n",
    " 'PAPUA NEW GUINEA',\n",
    " 'SPAIN',\n",
    " 'CAMBODIA',\n",
    " 'NIGERIA',\n",
    " 'UKRAINE',\n",
    " 'GHANA',\n",
    " 'MONGOLIA',\n",
    " 'AFGHANISTAN',\n",
    " 'DENMARK',\n",
    " 'UNITED KINGDOM',\n",
    " 'QATAR',\n",
    " 'BAHAMAS',\n",
    " 'IRAN',\n",
    " 'POLAND',\n",
    " 'TUNISIA',\n",
    " 'MOROCCO',\n",
    " 'NORWAY',\n",
    " 'COSTA RICA',\n",
    " 'URUGUAY',\n",
    " 'JAPAN',\n",
    " 'SERBIA',\n",
    " 'BOSNIA-HERZEGOVINA',\n",
    " 'OMAN',\n",
    " 'FINLAND',\n",
    " 'NEW ZEALAND',\n",
    " 'CANADA',\n",
    " 'PARAGUAY',\n",
    " 'MACEDONIA',\n",
    " 'LIBYA',\n",
    " 'YEMEN',\n",
    " 'EL SALVADOR',\n",
    " 'ESTONIA',\n",
    " 'AUSTRIA',\n",
    " 'ZAMBIA',\n",
    " 'NAMIBIA',\n",
    " 'SWITZERLAND',\n",
    " 'SWEDEN',\n",
    " 'MOZAMBIQUE',\n",
    " 'CHILE',\n",
    " 'TURKMENISTAN',\n",
    " 'BELARUS',\n",
    " 'ALBANIA',\n",
    " 'BRAZIL',\n",
    " 'SOUTH AFRICA',\n",
    " 'CZECH REPUBLIC',\n",
    " 'AZERBAIJAN',\n",
    " 'MARTINIQUE',\n",
    " 'ZIMBABWE',\n",
    " 'LATVIA',\n",
    " 'VENEZUELA',\n",
    " 'SINGAPORE',\n",
    " 'SLOVAKIA',\n",
    " 'COLOMBIA',\n",
    " 'PAKISTAN',\n",
    " 'FRANCE',\n",
    " 'UZBEKISTAN',\n",
    " 'ALGERIA',\n",
    " 'GREECE',\n",
    " 'DJIBOUTI',\n",
    " 'NIGER',\n",
    " 'MALAYSIA',\n",
    " 'INDIA',\n",
    " 'BRUNEI',\n",
    " 'U.S.A.',\n",
    " 'ECUADOR',\n",
    " 'SAUDI ARABIA',\n",
    " 'LITHUANIA',\n",
    " 'KAZAKHSTAN',\n",
    " 'GUYANA',\n",
    " 'MEXICO',\n",
    " 'UGANDA',\n",
    " 'ARUBA',\n",
    " 'EQUATORIAL GUINEA',\n",
    " 'NETHERLANDS ANTILLES',\n",
    " 'ITALY',\n",
    " 'LIBERIA',\n",
    " 'KUWAIT',\n",
    " 'PHILIPPINES',\n",
    " 'NETHERLANDS',\n",
    " 'DOMINICAN REPUBLIC',\n",
    " 'BAHRAIN',\n",
    " 'ISRAEL',\n",
    " 'KENYA',\n",
    " 'VIETNAM',\n",
    " 'IRAQ',\n",
    " 'PERU',\n",
    " 'RUSSIA',\n",
    " 'GEORGIA',\n",
    " 'BANGLADESH',\n",
    " 'SENEGAL',\n",
    " 'JAMAICA',\n",
    " 'LAOS',\n",
    " 'AUSTRALIA',\n",
    " 'TRINIDAD AND TOBAGO',\n",
    " 'TAJIKISTAN',\n",
    " 'NICARAGUA',\n",
    " 'ANGOLA',\n",
    " 'BULGARIA',\n",
    " 'CUBA',\n",
    " 'ROMANIA',\n",
    " 'CONGO',\n",
    " 'PORTUGAL',\n",
    " 'GERMANY',\n",
    " 'SUDAN',\n",
    " 'CAMEROON',\n",
    " 'TURKEY',\n",
    " 'THAILAND',\n",
    " 'INDONESIA',\n",
    " 'HUNGARY',\n",
    " 'BOLIVIA',\n",
    " 'BELGIUM'\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b9666c81",
   "metadata": {},
   "outputs": [],
   "source": [
    "def upload_refinery_world_outages_daily(tsa):\n",
    "    world_outages = RefineryData().get_outage('COUNTRY', all_countries, unit_type='CDU')\n",
    "    world_outage = world_outages.T.sum()\n",
    "    name = f'oil.petroineos.world.total_outage.kbd.daily'\n",
    "    tsa.update(name, world_outage, 'Shrey Agarwal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0d88920b",
   "metadata": {},
   "outputs": [],
   "source": [
    "world_outages = RefineryData().get_outage('COUNTRY', all_countries, unit_type='CDU')\n",
    "world_outage = world_outages.T.sum()\n",
    "world_outage.to_csv('world_outage.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2c2d6638",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tshistory.api import timeseries\n",
    "tsa = timeseries('http://tst-qdev-ap9.petroineos.local/api/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dee3c10b",
   "metadata": {},
   "outputs": [],
   "source": [
    "upload_refinery_world_outages_daily(tsa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "db583f16",
   "metadata": {},
   "outputs": [],
   "source": [
    "NWE_countries = ['Belgium','Denmark','Finland','Germany','Ireland','Netherlands','Norway','Sweden','United Kingdom','France', 'Lithuania']\n",
    "MED_countries = ['Austria','Czech Republic','Greece','Hungary','Italy','Poland','Portugal','Slovakia','Spain','Switzerland','Turkey']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0339e277",
   "metadata": {},
   "outputs": [],
   "source": [
    "nwe_outage = RefineryData().get_outage('COUNTRY', NWE_countries, 'CDU', exclude_cause=('Economic'))\n",
    "# n_outage = nwe_outage.T.sum()\n",
    "nwe_outage.to_csv('n_outage_dev.csv')\n",
    "# name = f'oil.petroineos.nwe_europe.total_outage.kbd.daily'\n",
    "# tsa.update(name, n_outage, 'Shrey Agarwal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e0046097",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], Name: oil.petroineos.oecd_europe.planned_outage.kbd.daily, dtype: float64)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "med_outage = RefineryData().get_outage('COUNTRY', OECD_EU_COUNTRIES, 'CDU', 'Planned', exclude_cause=['Economic'])\n",
    "# med_outage.to_csv('med_outage.csv')\n",
    "m_outage = med_outage.T.sum()\n",
    "name = f'oil.petroineos.oecd_europe.planned_outage.kbd.daily'\n",
    "tsa.update(name, m_outage, 'Shrey Agarwal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4b8dc541",
   "metadata": {},
   "outputs": [],
   "source": [
    "me_con = [x.upper() for x in mid_countries]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f321e2f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "mid_countries = ['bahrain', 'iran', 'iraq'+ 'oman', 'qatar', 'saudi arabia', 'jordan', 'syria', 'united arab emirates', 'yemen', 'kuwait']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2ac4ef8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "OECD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b36b128a",
   "metadata": {},
   "outputs": [],
   "source": [
    "tt = ('CDU', 'COND')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6582f55b",
   "metadata": {},
   "outputs": [],
   "source": [
    "now = pd.Timestamp.now().to_period('M')\n",
    "last_month, next_month = (now - 1).start_time, (now + 2).end_time \n",
    "query = f\"\"\"\n",
    "            SELECT\n",
    "                tu.COUNTRY\n",
    "                ,tu.UNIT_NAME\n",
    "                ,tu.PLANT_NAME\n",
    "                ,EVENT_TYPE\n",
    "                ,START_DATE\n",
    "                ,END_DATE\n",
    "                ,(1. + DATEDIFF(END_DATE, START_DATE)) * CAP_OFFLINE  / 1000000. as lost_barrels\n",
    "                ,tu.U_CAPACITY / 1000 as capacity\n",
    "                ,t.CAP_OFFLINE  / 1000 as offline\n",
    "                ,E_CAUSE\n",
    "                FROM dataengineering.oil_refinery_outage_latest t\n",
    "            right join (\n",
    "                select UNIT_ID, COUNTRY, U_CAPACITY, UNIT_NAME, PLANT_NAME\n",
    "                FROM dataengineering.oil_refinery_unit_view\n",
    "                where COUNTRY in {tuple([k.upper() for k in OECD_EU_COUNTRIES])} and UNIT_GROUP = 'CDU'\n",
    "            ) tu on t.UNIT_ID = tu.UNIT_ID\n",
    "            where START_DATE > '{last_month:%Y-%m-%d}' and START_DATE < '{next_month:%Y-%m-%d}'\n",
    "            order by last_day(START_DATE), lost_barrels desc\n",
    "            \"\"\"    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "83a757a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def bo_get_data(query):\n",
    "    data = DataAccessApi.GetDataframe(query)\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2f962a6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>UNIT_NAME</th>\n",
       "      <th>PLANT_NAME</th>\n",
       "      <th>EVENT_TYPE</th>\n",
       "      <th>START_DATE</th>\n",
       "      <th>END_DATE</th>\n",
       "      <th>lost_barrels</th>\n",
       "      <th>capacity</th>\n",
       "      <th>offline</th>\n",
       "      <th>E_CAUSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ITALY</td>\n",
       "      <td>Topping (CR 30)</td>\n",
       "      <td>Priolo Gargallo ISAB Refinery (North)</td>\n",
       "      <td>Planned</td>\n",
       "      <td>2024-04-17</td>\n",
       "      <td>2024-06-10</td>\n",
       "      <td>6.820</td>\n",
       "      <td>124.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>Mechanical</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ITALY</td>\n",
       "      <td>U017 TP4 (Topping 4)</td>\n",
       "      <td>Milazzo Refinery</td>\n",
       "      <td>Planned</td>\n",
       "      <td>2024-05-03</td>\n",
       "      <td>2024-06-28</td>\n",
       "      <td>6.327</td>\n",
       "      <td>111.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>Mechanical</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  COUNTRY             UNIT_NAME                             PLANT_NAME  \\\n",
       "0   ITALY       Topping (CR 30)  Priolo Gargallo ISAB Refinery (North)   \n",
       "1   ITALY  U017 TP4 (Topping 4)                       Milazzo Refinery   \n",
       "\n",
       "  EVENT_TYPE  START_DATE    END_DATE  lost_barrels  capacity  offline  \\\n",
       "0    Planned  2024-04-17  2024-06-10         6.820     124.0    124.0   \n",
       "1    Planned  2024-05-03  2024-06-28         6.327     111.0    111.0   \n",
       "\n",
       "      E_CAUSE  \n",
       "0  Mechanical  \n",
       "1  Mechanical  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bo_get_data(query)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "25c3cc2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "outage_all = RefineryData().get_capacity('COUNTRY', me_con, 'COND')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1647ee28",
   "metadata": {},
   "outputs": [],
   "source": [
    "outage_all.resample('MS').mean()['2015': '2025'].to_csv('middle_east_cap_cond.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0c50c3bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>COUNTRY</th>\n",
       "      <th>IRAN</th>\n",
       "      <th>QATAR</th>\n",
       "      <th>SAUDI ARABIA</th>\n",
       "      <th>UNITED ARAB EMIRATES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2015-01-01</th>\n",
       "      <td>25.0</td>\n",
       "      <td>349.0</td>\n",
       "      <td>225.0</td>\n",
       "      <td>420.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-02-01</th>\n",
       "      <td>50.0</td>\n",
       "      <td>698.0</td>\n",
       "      <td>450.0</td>\n",
       "      <td>840.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-03-01</th>\n",
       "      <td>75.0</td>\n",
       "      <td>1047.0</td>\n",
       "      <td>675.0</td>\n",
       "      <td>1260.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-04-01</th>\n",
       "      <td>100.0</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>1680.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-05-01</th>\n",
       "      <td>125.0</td>\n",
       "      <td>1745.0</td>\n",
       "      <td>1125.0</td>\n",
       "      <td>2100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-08-01</th>\n",
       "      <td>40280.0</td>\n",
       "      <td>44672.0</td>\n",
       "      <td>28800.0</td>\n",
       "      <td>57680.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-09-01</th>\n",
       "      <td>40725.0</td>\n",
       "      <td>45021.0</td>\n",
       "      <td>29025.0</td>\n",
       "      <td>58170.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-10-01</th>\n",
       "      <td>41170.0</td>\n",
       "      <td>45370.0</td>\n",
       "      <td>29250.0</td>\n",
       "      <td>58660.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-11-01</th>\n",
       "      <td>41615.0</td>\n",
       "      <td>45719.0</td>\n",
       "      <td>29475.0</td>\n",
       "      <td>59150.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-12-01</th>\n",
       "      <td>42060.0</td>\n",
       "      <td>46068.0</td>\n",
       "      <td>29700.0</td>\n",
       "      <td>59640.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "COUNTRY        IRAN    QATAR  SAUDI ARABIA  UNITED ARAB EMIRATES\n",
       "2015-01-01     25.0    349.0         225.0                 420.0\n",
       "2015-02-01     50.0    698.0         450.0                 840.0\n",
       "2015-03-01     75.0   1047.0         675.0                1260.0\n",
       "2015-04-01    100.0   1396.0         900.0                1680.0\n",
       "2015-05-01    125.0   1745.0        1125.0                2100.0\n",
       "...             ...      ...           ...                   ...\n",
       "2025-08-01  40280.0  44672.0       28800.0               57680.0\n",
       "2025-09-01  40725.0  45021.0       29025.0               58170.0\n",
       "2025-10-01  41170.0  45370.0       29250.0               58660.0\n",
       "2025-11-01  41615.0  45719.0       29475.0               59150.0\n",
       "2025-12-01  42060.0  46068.0       29700.0               59640.0\n",
       "\n",
       "[132 rows x 4 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outage_all.groupby(axis=1, level='COUNTRY').sum().resample('MS').mean()['2015': '2025'].cumsum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "aa1844d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "cap_oecd.resample('MS').mean()['2023-11-01':'2024-07-01'].to_csv('gg.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b2af77b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "cap_oecd.to_csv('spainc.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e27d2ced",
   "metadata": {},
   "outputs": [],
   "source": [
    "cap_oecd.groupby(axis=1, level='COUNTRY').sum().to_csv('prod_cap.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c58d68f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "cap_oecd.groupby(axis=1, level='COUNTRY').sum().to_csv('oecd_capy.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "68385992",
   "metadata": {},
   "outputs": [],
   "source": [
    "saharan= ['Skikda Refinery' ,'Kralupy nad Vltavou Refinery',\n",
    "'Feyzin Refinery',\n",
    "'PetroIneos Lavera Refinery',\n",
    "'Burghausen Refinery',\n",
    "'Ingolstadt Refinery',\n",
    "'Holborn Refinery',\n",
    "'Elefsina Refinery',\n",
    "'Augusta Refinery',\n",
    "'Sines Refinery',\n",
    "'La Coruna Refinery',\n",
    "'La Rabida Refinery',\n",
    "'San Roque Refinery',\n",
    "'Humber Refinery',\n",
    "'Pembroke Refinery',\n",
    "'Stanlow Refinery',\n",
    "'Algiers Refinery',\n",
    "'Arzew Refinery',\n",
    "'Skikda Refinery',\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "5500d7fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "ticker_dict= {\n",
    "                    'net_position': 0,\n",
    "                    'avg_open_price': 0,\n",
    "                    'realized_pnl': 0,\n",
    "                    'unrealized_pnl': 0,\n",
    "                    'total_pnl': 0,\n",
    "                }         "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "cb3f5a23",
   "metadata": {},
   "outputs": [],
   "source": [
    "ticker_dict = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "a2d251fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'net_position': 0,\n",
       " 'avg_open_price': 0,\n",
       " 'realized_pnl': 0,\n",
       " 'unrealized_pnl': 0,\n",
       " 'total_pnl': 0}"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ticker_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "678c421d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2024-01-01    187.235484\n",
       "2024-02-01    459.065517\n",
       "2024-03-01    357.583871\n",
       "2024-04-01    645.100000\n",
       "2024-05-01    516.964516\n",
       "2024-06-01     92.800000\n",
       "2024-07-01     61.106452\n",
       "2024-08-01     95.464516\n",
       "2024-09-01    604.315333\n",
       "2024-10-01    403.870968\n",
       "2024-11-01    228.796667\n",
       "2024-12-01    193.751613\n",
       "2026-04-01    180.250000\n",
       "2026-05-01    174.525806\n",
       "Name: oil.petroineos.russia.total_outage.kbd.monthly, dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r_outage = RefineryData().get_outage('COUNTRY', rr, 'CDU', exclude_cause= ['Economic'])\n",
    "r_outage = r_outage.T.sum().resample('MS').mean()\n",
    "name = f'oil.petroineos.russia.total_outage.kbd.monthly'\n",
    "tsa.update(name, r_outage, 'Shrey Agarwal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d49b51bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "r_outage.resample('MS').mean().to_csv('outage.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "427aa4ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_outage = nwe_outage.T.sum()['2015': '2023']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "547ea8f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_outage = n_outage.resample('MS').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "0cd2eb5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_outage.name = \"outage\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "dc76351e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from datetime import datetime\n",
    "from dateutil.relativedelta import relativedelta\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "from sklearn import preprocessing\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler  \n",
    "scaler = MinMaxScaler()\n",
    "\n",
    "from tshistory.api import timeseries\n",
    "\n",
    "tsa = timeseries('http://tst-qdev-ap9/api')\n",
    "\n",
    "start = '2015-01-01'\n",
    "end = '2024-12-31'\n",
    "\n",
    "def get_tsa(name, new_name, start, end):\n",
    "    df = pd.DataFrame(tsa.get(name))\n",
    "    df = df.rename(columns={name: new_name})\n",
    "    sliced_df = df.loc[start:end]\n",
    "    return sliced_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "4aa27915",
   "metadata": {},
   "outputs": [],
   "source": [
    "nwe_margin = get_tsa('crude.pcia.total.total.cdu_outage.unplanned.kbd.monthly', 'pcia_padd3', start, end)\n",
    "nwe_margin.to_csv('pcia_total.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "433ed4a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "dd = pd.concat([nwe_margin, n_outage], axis=1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "d0119040",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.312324879238936e-05\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "mod = sm.formula.ols('outage ~ margin', data = dd.dropna())\n",
    "results = mod.fit()\n",
    "print(results.rsquared)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d56113b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NWE Complex Margin</th>\n",
       "      <th>outage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2015-01-01</th>\n",
       "      <td>5.506000</td>\n",
       "      <td>29.350323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-02-01</th>\n",
       "      <td>5.786500</td>\n",
       "      <td>13.580000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-03-01</th>\n",
       "      <td>7.500455</td>\n",
       "      <td>4.074000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-04-01</th>\n",
       "      <td>6.854500</td>\n",
       "      <td>178.202400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-05-01</th>\n",
       "      <td>6.838421</td>\n",
       "      <td>70.838710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-08-01</th>\n",
       "      <td>17.066818</td>\n",
       "      <td>100.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-09-01</th>\n",
       "      <td>13.454762</td>\n",
       "      <td>11.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-10-01</th>\n",
       "      <td>4.075000</td>\n",
       "      <td>188.935484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-01</th>\n",
       "      <td>7.176364</td>\n",
       "      <td>367.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-01</th>\n",
       "      <td>7.329474</td>\n",
       "      <td>208.451613</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>108 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            NWE Complex Margin      outage\n",
       "2015-01-01            5.506000   29.350323\n",
       "2015-02-01            5.786500   13.580000\n",
       "2015-03-01            7.500455    4.074000\n",
       "2015-04-01            6.854500  178.202400\n",
       "2015-05-01            6.838421   70.838710\n",
       "...                        ...         ...\n",
       "2023-08-01           17.066818  100.500000\n",
       "2023-09-01           13.454762   11.500000\n",
       "2023-10-01            4.075000  188.935484\n",
       "2023-11-01            7.176364  367.100000\n",
       "2023-12-01            7.329474  208.451613\n",
       "\n",
       "[108 rows x 2 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4c26099a",
   "metadata": {},
   "outputs": [],
   "source": [
    "oec = Outage.resample('MS').mean()['2015-02-01':'2024-05-01'].T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "dd00592c",
   "metadata": {},
   "outputs": [],
   "source": [
    "Refinery_outage = oec.droplevel([0]).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8dfe20da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th>PLANT_NAME</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Schwechat Refinery</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Bakinsk Heydar Aliyev Lower Refinery (Azerneftyag)</th>\n",
       "      <th>Bakinsk Heydar Aliyev Upper Refinery</th>\n",
       "      <th>Antwerp Refinery</th>\n",
       "      <th>GPA (Gunvor Petroleum Antwerp) Refinery</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Antwerpen Refinery</th>\n",
       "      <th>Lukoil Neftochim Burgas Refinery</th>\n",
       "      <th>...</th>\n",
       "      <th>Humber Refinery</th>\n",
       "      <th>Milford Haven Refinery</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Fawley Refinery</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Lindsey Refinery</th>\n",
       "      <th>Pembroke Refinery</th>\n",
       "      <th>Eastham Refinery</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Stanlow Refinery</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNIT_NAME</th>\n",
       "      <th>Crude 1</th>\n",
       "      <th>Crude 2</th>\n",
       "      <th>ABT Nr. 305 (ABT-2/1) (Crude 01)</th>\n",
       "      <th>ABT Nr. 202 (ABT-2/2) (Crude 02)</th>\n",
       "      <th>ABT-6 (Crude 01)</th>\n",
       "      <th>Crude Unit</th>\n",
       "      <th>Crude (Unit 700)</th>\n",
       "      <th>CDU 4 (Crude)</th>\n",
       "      <th>CDU 3 (Crude) (J63)</th>\n",
       "      <th>AD 1 (Atmospheric Distillation)</th>\n",
       "      <th>...</th>\n",
       "      <th>CTU 2</th>\n",
       "      <th>Crude</th>\n",
       "      <th>Pipestill 1</th>\n",
       "      <th>Pipestill 3</th>\n",
       "      <th>Crude 1 (CDU 1)</th>\n",
       "      <th>Crude 2 (Unit-23)</th>\n",
       "      <th>Crude</th>\n",
       "      <th>Crude</th>\n",
       "      <th>CDU 4</th>\n",
       "      <th>CDU 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2015-02-01</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-03-01</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-04-01</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-05-01</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-06-01</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>105.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-01-01</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>121.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-02-01</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>220.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-01</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-01</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-05-01</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>112 rows × 171 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "PLANT_NAME Schwechat Refinery          \\\n",
       "UNIT_NAME             Crude 1 Crude 2   \n",
       "2015-02-01                0.0     0.0   \n",
       "2015-03-01                0.0     0.0   \n",
       "2015-04-01                0.0     0.0   \n",
       "2015-05-01                0.0     0.0   \n",
       "2015-06-01                0.0     0.0   \n",
       "...                       ...     ...   \n",
       "2024-01-01                0.0     0.0   \n",
       "2024-02-01                0.0     0.0   \n",
       "2024-03-01                0.0     0.0   \n",
       "2024-04-01                0.0     0.0   \n",
       "2024-05-01                0.0     0.0   \n",
       "\n",
       "PLANT_NAME Bakinsk Heydar Aliyev Lower Refinery (Azerneftyag)  \\\n",
       "UNIT_NAME                    ABT Nr. 305 (ABT-2/1) (Crude 01)   \n",
       "2015-02-01                                                0.0   \n",
       "2015-03-01                                                0.0   \n",
       "2015-04-01                                                0.0   \n",
       "2015-05-01                                                0.0   \n",
       "2015-06-01                                                0.0   \n",
       "...                                                       ...   \n",
       "2024-01-01                                                0.0   \n",
       "2024-02-01                                                0.0   \n",
       "2024-03-01                                                0.0   \n",
       "2024-04-01                                                0.0   \n",
       "2024-05-01                                                0.0   \n",
       "\n",
       "PLANT_NAME                                   \\\n",
       "UNIT_NAME  ABT Nr. 202 (ABT-2/2) (Crude 02)   \n",
       "2015-02-01                              0.0   \n",
       "2015-03-01                              0.0   \n",
       "2015-04-01                              0.0   \n",
       "2015-05-01                              0.0   \n",
       "2015-06-01                              0.0   \n",
       "...                                     ...   \n",
       "2024-01-01                              0.0   \n",
       "2024-02-01                              0.0   \n",
       "2024-03-01                              0.0   \n",
       "2024-04-01                              0.0   \n",
       "2024-05-01                              0.0   \n",
       "\n",
       "PLANT_NAME Bakinsk Heydar Aliyev Upper Refinery Antwerp Refinery  \\\n",
       "UNIT_NAME                      ABT-6 (Crude 01)       Crude Unit   \n",
       "2015-02-01                                  0.0              0.0   \n",
       "2015-03-01                                  0.0              0.0   \n",
       "2015-04-01                                  0.0              0.0   \n",
       "2015-05-01                                  0.0              0.0   \n",
       "2015-06-01                                133.0              0.0   \n",
       "...                                         ...              ...   \n",
       "2024-01-01                                  0.0              0.0   \n",
       "2024-02-01                                  0.0              0.0   \n",
       "2024-03-01                                  0.0              0.0   \n",
       "2024-04-01                                108.0              0.0   \n",
       "2024-05-01                                120.0              0.0   \n",
       "\n",
       "PLANT_NAME GPA (Gunvor Petroleum Antwerp) Refinery Antwerpen Refinery  \\\n",
       "UNIT_NAME                         Crude (Unit 700)      CDU 4 (Crude)   \n",
       "2015-02-01                                     0.0                0.0   \n",
       "2015-03-01                                     0.0                0.0   \n",
       "2015-04-01                                     0.0                0.0   \n",
       "2015-05-01                                    57.0                0.0   \n",
       "2015-06-01                                   103.0                0.0   \n",
       "...                                            ...                ...   \n",
       "2024-01-01                                     0.0                0.0   \n",
       "2024-02-01                                     0.0                0.0   \n",
       "2024-03-01                                     0.0                0.0   \n",
       "2024-04-01                                     0.0              148.0   \n",
       "2024-05-01                                     0.0               68.0   \n",
       "\n",
       "PLANT_NAME                     Lukoil Neftochim Burgas Refinery  ...  \\\n",
       "UNIT_NAME  CDU 3 (Crude) (J63)  AD 1 (Atmospheric Distillation)  ...   \n",
       "2015-02-01                 0.0                              0.0  ...   \n",
       "2015-03-01                 0.0                              0.0  ...   \n",
       "2015-04-01                 0.0                              0.0  ...   \n",
       "2015-05-01                 0.0                              0.0  ...   \n",
       "2015-06-01                 0.0                              0.0  ...   \n",
       "...                        ...                              ...  ...   \n",
       "2024-01-01                 0.0                              0.0  ...   \n",
       "2024-02-01                 0.0                              0.0  ...   \n",
       "2024-03-01                 0.0                              0.0  ...   \n",
       "2024-04-01                 0.0                              0.0  ...   \n",
       "2024-05-01                 0.0                              0.0  ...   \n",
       "\n",
       "PLANT_NAME Humber Refinery Milford Haven Refinery Fawley Refinery              \\\n",
       "UNIT_NAME            CTU 2                  Crude     Pipestill 1 Pipestill 3   \n",
       "2015-02-01             0.0                    0.0             0.0         0.0   \n",
       "2015-03-01             0.0                    0.0             0.0         0.0   \n",
       "2015-04-01             0.0                    0.0             0.0         0.0   \n",
       "2015-05-01            58.0                    0.0             0.0         0.0   \n",
       "2015-06-01           105.0                    0.0             0.0         0.0   \n",
       "...                    ...                    ...             ...         ...   \n",
       "2024-01-01             0.0                    0.0             0.0         0.0   \n",
       "2024-02-01             0.0                    0.0             0.0         0.0   \n",
       "2024-03-01             0.0                    0.0             0.0         0.0   \n",
       "2024-04-01             0.0                    0.0             0.0         0.0   \n",
       "2024-05-01             0.0                    0.0             0.0         0.0   \n",
       "\n",
       "PLANT_NAME Lindsey Refinery                   Pembroke Refinery  \\\n",
       "UNIT_NAME   Crude 1 (CDU 1) Crude 2 (Unit-23)             Crude   \n",
       "2015-02-01              0.0               0.0               0.0   \n",
       "2015-03-01              0.0               0.0               0.0   \n",
       "2015-04-01              0.0               0.0               0.0   \n",
       "2015-05-01              0.0               0.0               0.0   \n",
       "2015-06-01              0.0               0.0               0.0   \n",
       "...                     ...               ...               ...   \n",
       "2024-01-01              0.0               0.0               0.0   \n",
       "2024-02-01              0.0               0.0               0.0   \n",
       "2024-03-01              0.0              71.0               0.0   \n",
       "2024-04-01              0.0              73.0               0.0   \n",
       "2024-05-01              0.0               0.0               0.0   \n",
       "\n",
       "PLANT_NAME Eastham Refinery Stanlow Refinery        \n",
       "UNIT_NAME             Crude            CDU 4 CDU 3  \n",
       "2015-02-01              2.0              0.0   0.0  \n",
       "2015-03-01              0.0              0.0   0.0  \n",
       "2015-04-01              0.0              0.0   0.0  \n",
       "2015-05-01              0.0              0.0   0.0  \n",
       "2015-06-01              0.0              0.0   0.0  \n",
       "...                     ...              ...   ...  \n",
       "2024-01-01             13.0            121.0   0.0  \n",
       "2024-02-01              1.0            220.0   0.0  \n",
       "2024-03-01              0.0              7.0   0.0  \n",
       "2024-04-01              0.0              0.0   0.0  \n",
       "2024-05-01              0.0              0.0   0.0  \n",
       "\n",
       "[112 rows x 171 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Refinery_outage.round(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4f6885b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "Refinery_outage.groupby(level=0,axis=1).sum().round(0).T.to_csv('offline_outage.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "7a767ea3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Capacity1.to_csv('Russia_war_outage.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3f2f4e19",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Length of names must match number of levels in MultiIndex.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[18], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m Capacity_o \u001b[38;5;241m=\u001b[39m \u001b[43mRefineryData\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_capacity\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mCOUNTRY\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43mc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mCDU\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[1;32mIn[17], line 249\u001b[0m, in \u001b[0;36mRefineryData.get_capacity\u001b[1;34m(self, key, values, unit_type, pdate, max_date, verbose)\u001b[0m\n\u001b[0;32m    237\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    238\u001b[0m \u001b[38;5;124;03mGet refining capacity\u001b[39;00m\n\u001b[0;32m    239\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    240\u001b[0m table \u001b[38;5;241m=\u001b[39m get_refinery_table_capacity(\n\u001b[0;32m    241\u001b[0m     key,\n\u001b[0;32m    242\u001b[0m     values,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    247\u001b[0m     verbose,\n\u001b[0;32m    248\u001b[0m )\n\u001b[1;32m--> 249\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mflatten_refinery_capacity\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtable\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmax_date\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m1e3\u001b[39m\n",
      "Cell \u001b[1;32mIn[17], line 202\u001b[0m, in \u001b[0;36mflatten_refinery_capacity\u001b[1;34m(data, maxdate)\u001b[0m\n\u001b[0;32m    195\u001b[0m result \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    196\u001b[0m     pivoted\n\u001b[0;32m    197\u001b[0m     \u001b[38;5;241m.\u001b[39munstack(ids)\n\u001b[0;32m    198\u001b[0m     \u001b[38;5;241m.\u001b[39mreindex(index)\n\u001b[0;32m    199\u001b[0m     \u001b[38;5;241m.\u001b[39mfillna(\u001b[38;5;241m0\u001b[39m)\n\u001b[0;32m    200\u001b[0m )\n\u001b[0;32m    201\u001b[0m proper_names \u001b[38;5;241m=\u001b[39m [(c, plants[x], units[y]) \u001b[38;5;28;01mfor\u001b[39;00m c, x, y \u001b[38;5;129;01min\u001b[39;00m result\u001b[38;5;241m.\u001b[39mcolumns]\n\u001b[1;32m--> 202\u001b[0m result\u001b[38;5;241m.\u001b[39mcolumns \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mMultiIndex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfrom_tuples\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    203\u001b[0m \u001b[43m    \u001b[49m\u001b[43mproper_names\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnames\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mPLANT_NAME\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mUNIT_NAME\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    204\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32mC:\\conda\\lib\\site-packages\\pandas\\core\\indexes\\multi.py:204\u001b[0m, in \u001b[0;36mnames_compat.<locals>.new_meth\u001b[1;34m(self_or_cls, *args, **kwargs)\u001b[0m\n\u001b[0;32m    201\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m kwargs:\n\u001b[0;32m    202\u001b[0m     kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnames\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 204\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m meth(self_or_cls, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mC:\\conda\\lib\\site-packages\\pandas\\core\\indexes\\multi.py:566\u001b[0m, in \u001b[0;36mMultiIndex.from_tuples\u001b[1;34m(cls, tuples, sortorder, names)\u001b[0m\n\u001b[0;32m    563\u001b[0m     arrs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mzip\u001b[39m(\u001b[38;5;241m*\u001b[39mtuples)\n\u001b[0;32m    564\u001b[0m     arrays \u001b[38;5;241m=\u001b[39m cast(List[Sequence[Hashable]], arrs)\n\u001b[1;32m--> 566\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mcls\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfrom_arrays\u001b[49m\u001b[43m(\u001b[49m\u001b[43marrays\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msortorder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msortorder\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnames\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnames\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mC:\\conda\\lib\\site-packages\\pandas\\core\\indexes\\multi.py:493\u001b[0m, in \u001b[0;36mMultiIndex.from_arrays\u001b[1;34m(cls, arrays, sortorder, names)\u001b[0m\n\u001b[0;32m    490\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m names \u001b[38;5;129;01mis\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mno_default:\n\u001b[0;32m    491\u001b[0m     names \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mgetattr\u001b[39m(arr, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;28;01mfor\u001b[39;00m arr \u001b[38;5;129;01min\u001b[39;00m arrays]\n\u001b[1;32m--> 493\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mcls\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[0;32m    494\u001b[0m \u001b[43m    \u001b[49m\u001b[43mlevels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    495\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcodes\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcodes\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    496\u001b[0m \u001b[43m    \u001b[49m\u001b[43msortorder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msortorder\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    497\u001b[0m \u001b[43m    \u001b[49m\u001b[43mnames\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnames\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    498\u001b[0m \u001b[43m    \u001b[49m\u001b[43mverify_integrity\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    499\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mC:\\conda\\lib\\site-packages\\pandas\\core\\indexes\\multi.py:335\u001b[0m, in \u001b[0;36mMultiIndex.__new__\u001b[1;34m(cls, levels, codes, sortorder, names, dtype, copy, name, verify_integrity)\u001b[0m\n\u001b[0;32m    332\u001b[0m result\u001b[38;5;241m.\u001b[39m_names \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28;01mNone\u001b[39;00m] \u001b[38;5;241m*\u001b[39m \u001b[38;5;28mlen\u001b[39m(levels)  \u001b[38;5;66;03m# type: ignore[assignment]\u001b[39;00m\n\u001b[0;32m    333\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m names \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    334\u001b[0m     \u001b[38;5;66;03m# handles name validation\u001b[39;00m\n\u001b[1;32m--> 335\u001b[0m     \u001b[43mresult\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_set_names\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnames\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    337\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m sortorder \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    338\u001b[0m     result\u001b[38;5;241m.\u001b[39msortorder \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mint\u001b[39m(sortorder)\n",
      "File \u001b[1;32mC:\\conda\\lib\\site-packages\\pandas\\core\\indexes\\multi.py:1436\u001b[0m, in \u001b[0;36mMultiIndex._set_names\u001b[1;34m(self, names, level, validate)\u001b[0m\n\u001b[0;32m   1434\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLength of names must match length of level.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   1435\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m level \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(names) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnlevels:\n\u001b[1;32m-> 1436\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1437\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLength of names must match number of levels in MultiIndex.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1438\u001b[0m         )\n\u001b[0;32m   1440\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m level \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   1441\u001b[0m     level \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnlevels)\n",
      "\u001b[1;31mValueError\u001b[0m: Length of names must match number of levels in MultiIndex."
     ]
    }
   ],
   "source": [
    "Capacity_o = RefineryData().get_capacity('COUNTRY',c, 'CDU')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3fd9e060",
   "metadata": {},
   "outputs": [],
   "source": [
    "Capacity_o =Capacity_o[8500:8501].T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "74c993b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>2023-04-10</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>PLANT_NAME</th>\n",
       "      <th>UNIT_NAME</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AZERBAIJAN</th>\n",
       "      <th>Bakinsk Heydar Aliyev Upper Refinery</th>\n",
       "      <th>Delayed Coker</th>\n",
       "      <td>30.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BELGIUM</th>\n",
       "      <th>Antwerp Refinery</th>\n",
       "      <th>Delayed Coker (ANWERUP)</th>\n",
       "      <td>50.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CROATIA</th>\n",
       "      <th>Sisak Refinery</th>\n",
       "      <th>Coker</th>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">GERMANY</th>\n",
       "      <th>MiRO Refinery Karlsruhe</th>\n",
       "      <th>Delayed Coker</th>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burghausen Refinery</th>\n",
       "      <th>Delayed Coker</th>\n",
       "      <td>31.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Lingen Emsland Refinery</th>\n",
       "      <th>Delayed Coker 1</th>\n",
       "      <td>14.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delayed Coker 2</th>\n",
       "      <td>14.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rheinland Wesseling Refinery (South)</th>\n",
       "      <th>Delayed Coker</th>\n",
       "      <td>16.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gelsenkirchen Horst Refinery</th>\n",
       "      <th>Coker</th>\n",
       "      <td>8.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HUNGARY</th>\n",
       "      <th>Szazhalombatta Duna Refinery</th>\n",
       "      <th>Delayed Coker</th>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ITALY</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Gela Refinery</th>\n",
       "      <th>Delayed Coking 1</th>\n",
       "      <td>32.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delayed Coking 2</th>\n",
       "      <td>24.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NORWAY</th>\n",
       "      <th>Mongstad Refinery</th>\n",
       "      <th>Delayed Coker</th>\n",
       "      <td>28.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">ROMANIA</th>\n",
       "      <th>Petrobrazi Refinery</th>\n",
       "      <th>Delayed Coker</th>\n",
       "      <td>20.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Petromidia Refinery</th>\n",
       "      <th>Delayed Coker (CX)</th>\n",
       "      <td>23.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Petrotel-Lukoil Refinery</th>\n",
       "      <th>Delayed Coker (Cx)</th>\n",
       "      <td>12.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">SPAIN</th>\n",
       "      <th>Castellon Refinery</th>\n",
       "      <th>Delayed Coker</th>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Puertollano Refinery</th>\n",
       "      <th>Delayed Coker (624)</th>\n",
       "      <td>24.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>La Coruna Refinery</th>\n",
       "      <th>Coker</th>\n",
       "      <td>23.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bilbao Refinery</th>\n",
       "      <th>Delayed Coker (CK6)</th>\n",
       "      <td>43.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cartagena Refinery (Repsol)</th>\n",
       "      <th>Delayed Coker (U-652)</th>\n",
       "      <td>53.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">TURKEY</th>\n",
       "      <th>Izmit Refinery</th>\n",
       "      <th>Delayed Coker (Plt 177)</th>\n",
       "      <td>52.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aegean Aliaga (Star Ege) Refinery</th>\n",
       "      <th>Delayed Coker (U-190)</th>\n",
       "      <td>40.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">UNITED KINGDOM</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Humber Refinery</th>\n",
       "      <th>Delayed Coker 2</th>\n",
       "      <td>32.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delayed Coker 1</th>\n",
       "      <td>32.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GREECE</th>\n",
       "      <th>Elefsina Refinery</th>\n",
       "      <th>Flexicoker</th>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NETHERLANDS</th>\n",
       "      <th>Rotterdam Refinery</th>\n",
       "      <th>Flexicoker</th>\n",
       "      <td>39.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                             2023-04-10\n",
       "COUNTRY        PLANT_NAME                           UNIT_NAME                          \n",
       "AZERBAIJAN     Bakinsk Heydar Aliyev Upper Refinery Delayed Coker                 30.00\n",
       "BELGIUM        Antwerp Refinery                     Delayed Coker (ANWERUP)       50.00\n",
       "CROATIA        Sisak Refinery                       Coker                          0.00\n",
       "GERMANY        MiRO Refinery Karlsruhe              Delayed Coker                 34.00\n",
       "               Burghausen Refinery                  Delayed Coker                 31.20\n",
       "               Lingen Emsland Refinery              Delayed Coker 1               14.00\n",
       "                                                    Delayed Coker 2               14.00\n",
       "               Rheinland Wesseling Refinery (South) Delayed Coker                 16.00\n",
       "               Gelsenkirchen Horst Refinery         Coker                          8.80\n",
       "HUNGARY        Szazhalombatta Duna Refinery         Delayed Coker                 20.00\n",
       "ITALY          Gela Refinery                        Delayed Coking 1              32.80\n",
       "                                                    Delayed Coking 2              24.78\n",
       "NORWAY         Mongstad Refinery                    Delayed Coker                 28.00\n",
       "ROMANIA        Petrobrazi Refinery                  Delayed Coker                 20.30\n",
       "               Petromidia Refinery                  Delayed Coker (CX)            23.40\n",
       "               Petrotel-Lukoil Refinery             Delayed Coker (Cx)            12.00\n",
       "SPAIN          Castellon Refinery                   Delayed Coker                 20.00\n",
       "               Puertollano Refinery                 Delayed Coker (624)           24.00\n",
       "               La Coruna Refinery                   Coker                         23.30\n",
       "               Bilbao Refinery                      Delayed Coker (CK6)           43.70\n",
       "               Cartagena Refinery (Repsol)          Delayed Coker (U-652)         53.00\n",
       "TURKEY         Izmit Refinery                       Delayed Coker (Plt 177)       52.00\n",
       "               Aegean Aliaga (Star Ege) Refinery    Delayed Coker (U-190)         40.00\n",
       "UNITED KINGDOM Humber Refinery                      Delayed Coker 2               32.00\n",
       "                                                    Delayed Coker 1               32.00\n",
       "GREECE         Elefsina Refinery                    Flexicoker                    20.00\n",
       "NETHERLANDS    Rotterdam Refinery                   Flexicoker                    39.00"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.concat([Capacity,Capacity_o])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d276fac6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2023-05-01</th>\n",
       "      <th>2023-05-02</th>\n",
       "      <th>2023-05-03</th>\n",
       "      <th>2023-05-04</th>\n",
       "      <th>2023-05-05</th>\n",
       "      <th>2023-05-06</th>\n",
       "      <th>2023-05-07</th>\n",
       "      <th>2023-05-08</th>\n",
       "      <th>2023-05-09</th>\n",
       "      <th>2023-05-10</th>\n",
       "      <th>...</th>\n",
       "      <th>2023-10-23</th>\n",
       "      <th>2023-10-24</th>\n",
       "      <th>2023-10-25</th>\n",
       "      <th>2023-10-26</th>\n",
       "      <th>2023-10-27</th>\n",
       "      <th>2023-10-28</th>\n",
       "      <th>2023-10-29</th>\n",
       "      <th>2023-10-30</th>\n",
       "      <th>2023-10-31</th>\n",
       "      <th>2023-11-01</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PLANT_NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Texas City Refinery (Bay Plant)</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Deer Park Refinery</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Houston Refinery (Houston Refining)</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lake Charles Refinery (Phillips 66)</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Meraux Refinery</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Newcastle Refinery</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Great Falls Refinery</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Laurel Refinery</th>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Salt Lake City Refinery (Chevron)</th>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Denver Refinery - Plant 2 (East)</th>\n",
       "      <td>8.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>110 rows × 185 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     2023-05-01  2023-05-02  2023-05-03  \\\n",
       "PLANT_NAME                                                                \n",
       "Texas City Refinery (Bay Plant)             0.0         0.0         0.0   \n",
       "Deer Park Refinery                          0.0         0.0         0.0   \n",
       "Houston Refinery (Houston Refining)         0.0         0.0         0.0   \n",
       "Lake Charles Refinery (Phillips 66)         0.0         0.0         0.0   \n",
       "Meraux Refinery                             0.0         0.0         0.0   \n",
       "...                                         ...         ...         ...   \n",
       "Newcastle Refinery                          0.0         0.0         0.0   \n",
       "Great Falls Refinery                        0.0         0.0         0.0   \n",
       "Laurel Refinery                            16.0        16.0        16.0   \n",
       "Salt Lake City Refinery (Chevron)          13.0        13.0        13.0   \n",
       "Denver Refinery - Plant 2 (East)            8.5         8.5         8.5   \n",
       "\n",
       "                                     2023-05-04  2023-05-05  2023-05-06  \\\n",
       "PLANT_NAME                                                                \n",
       "Texas City Refinery (Bay Plant)             0.0         0.0         0.0   \n",
       "Deer Park Refinery                          0.0         0.0         0.0   \n",
       "Houston Refinery (Houston Refining)         0.0         0.0         0.0   \n",
       "Lake Charles Refinery (Phillips 66)         0.0         0.0         0.0   \n",
       "Meraux Refinery                             0.0         0.0         0.0   \n",
       "...                                         ...         ...         ...   \n",
       "Newcastle Refinery                          0.0         0.0         0.0   \n",
       "Great Falls Refinery                        0.0         0.0         0.0   \n",
       "Laurel Refinery                            16.0        16.0        16.0   \n",
       "Salt Lake City Refinery (Chevron)          13.0        13.0        13.0   \n",
       "Denver Refinery - Plant 2 (East)            8.5         8.5         8.5   \n",
       "\n",
       "                                     2023-05-07  2023-05-08  2023-05-09  \\\n",
       "PLANT_NAME                                                                \n",
       "Texas City Refinery (Bay Plant)             0.0         0.0         0.0   \n",
       "Deer Park Refinery                          0.0         0.0         0.0   \n",
       "Houston Refinery (Houston Refining)         0.0         0.0         0.0   \n",
       "Lake Charles Refinery (Phillips 66)         0.0         0.0         0.0   \n",
       "Meraux Refinery                             0.0         0.0         0.0   \n",
       "...                                         ...         ...         ...   \n",
       "Newcastle Refinery                          0.0         0.0         0.0   \n",
       "Great Falls Refinery                        0.0         0.0         0.0   \n",
       "Laurel Refinery                            16.0        16.0        16.0   \n",
       "Salt Lake City Refinery (Chevron)          13.0        13.0        13.0   \n",
       "Denver Refinery - Plant 2 (East)            8.5         8.5         8.5   \n",
       "\n",
       "                                     2023-05-10  ...  2023-10-23  2023-10-24  \\\n",
       "PLANT_NAME                                       ...                           \n",
       "Texas City Refinery (Bay Plant)             0.0  ...         0.0         0.0   \n",
       "Deer Park Refinery                          0.0  ...         0.0         0.0   \n",
       "Houston Refinery (Houston Refining)         0.0  ...        90.0        90.0   \n",
       "Lake Charles Refinery (Phillips 66)         0.0  ...         0.0         0.0   \n",
       "Meraux Refinery                             0.0  ...         0.0         0.0   \n",
       "...                                         ...  ...         ...         ...   \n",
       "Newcastle Refinery                          0.0  ...         0.0         0.0   \n",
       "Great Falls Refinery                        0.0  ...         0.0         0.0   \n",
       "Laurel Refinery                            16.0  ...         0.0         0.0   \n",
       "Salt Lake City Refinery (Chevron)          13.0  ...         0.0         0.0   \n",
       "Denver Refinery - Plant 2 (East)            8.5  ...         0.0         0.0   \n",
       "\n",
       "                                     2023-10-25  2023-10-26  2023-10-27  \\\n",
       "PLANT_NAME                                                                \n",
       "Texas City Refinery (Bay Plant)             0.0         0.0         0.0   \n",
       "Deer Park Refinery                          0.0         0.0         0.0   \n",
       "Houston Refinery (Houston Refining)        90.0        90.0        90.0   \n",
       "Lake Charles Refinery (Phillips 66)         0.0         0.0         0.0   \n",
       "Meraux Refinery                             0.0         0.0         0.0   \n",
       "...                                         ...         ...         ...   \n",
       "Newcastle Refinery                          0.0         0.0         0.0   \n",
       "Great Falls Refinery                        0.0         0.0         0.0   \n",
       "Laurel Refinery                             0.0         0.0         0.0   \n",
       "Salt Lake City Refinery (Chevron)           0.0         0.0         0.0   \n",
       "Denver Refinery - Plant 2 (East)            0.0         0.0         0.0   \n",
       "\n",
       "                                     2023-10-28  2023-10-29  2023-10-30  \\\n",
       "PLANT_NAME                                                                \n",
       "Texas City Refinery (Bay Plant)             0.0         0.0         0.0   \n",
       "Deer Park Refinery                          0.0         0.0         0.0   \n",
       "Houston Refinery (Houston Refining)        90.0        90.0        90.0   \n",
       "Lake Charles Refinery (Phillips 66)         0.0         0.0         0.0   \n",
       "Meraux Refinery                             0.0         0.0         0.0   \n",
       "...                                         ...         ...         ...   \n",
       "Newcastle Refinery                          0.0         0.0         0.0   \n",
       "Great Falls Refinery                        0.0         0.0         0.0   \n",
       "Laurel Refinery                             0.0         0.0         0.0   \n",
       "Salt Lake City Refinery (Chevron)           0.0         0.0         0.0   \n",
       "Denver Refinery - Plant 2 (East)            0.0         0.0         0.0   \n",
       "\n",
       "                                     2023-10-31  2023-11-01  \n",
       "PLANT_NAME                                                   \n",
       "Texas City Refinery (Bay Plant)             0.0         0.0  \n",
       "Deer Park Refinery                          0.0         0.0  \n",
       "Houston Refinery (Houston Refining)        90.0        90.0  \n",
       "Lake Charles Refinery (Phillips 66)         0.0         0.0  \n",
       "Meraux Refinery                             0.0         0.0  \n",
       "...                                         ...         ...  \n",
       "Newcastle Refinery                          0.0         0.0  \n",
       "Great Falls Refinery                        0.0         0.0  \n",
       "Laurel Refinery                             0.0         0.0  \n",
       "Salt Lake City Refinery (Chevron)           0.0         0.0  \n",
       "Denver Refinery - Plant 2 (East)            0.0         0.0  \n",
       "\n",
       "[110 rows x 185 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Outage['2023-05-01':'2023-11-01'].T.droplevel([0,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5631f87b",
   "metadata": {},
   "outputs": [],
   "source": [
    "Capacity['SAUDI ARABIA']['Jazan Refinery'].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "941f4fe3",
   "metadata": {},
   "outputs": [],
   "source": [
    "planned_outages = RefineryData().get_outage('COUNTRY',OECD_EU_COUNTRIES, unit_type='CDU', outage_type='Planned')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6aa8afb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "planned_outages = planned_outages.resample('MS').mean()['2023-02-01':'2023-05-01']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "d04458ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2023-02-01</th>\n",
       "      <th>2023-03-01</th>\n",
       "      <th>2023-04-01</th>\n",
       "      <th>2023-05-01</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COUNTRY</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AUSTRIA</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BELGIUM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CZECH REPUBLIC</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DENMARK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FINLAND</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRANCE</th>\n",
       "      <td>47.500000</td>\n",
       "      <td>31.612903</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GERMANY</th>\n",
       "      <td>100.571429</td>\n",
       "      <td>246.322581</td>\n",
       "      <td>234.466667</td>\n",
       "      <td>192.354839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GREECE</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>126.129032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HUNGARY</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IRELAND</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ITALY</th>\n",
       "      <td>274.601286</td>\n",
       "      <td>240.500097</td>\n",
       "      <td>56.076667</td>\n",
       "      <td>228.070968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NETHERLANDS</th>\n",
       "      <td>153.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>146.666667</td>\n",
       "      <td>19.354839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NORWAY</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>POLAND</th>\n",
       "      <td>2.480429</td>\n",
       "      <td>69.452000</td>\n",
       "      <td>6.945200</td>\n",
       "      <td>40.326968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PORTUGAL</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SLOVAKIA</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SPAIN</th>\n",
       "      <td>90.000000</td>\n",
       "      <td>238.741935</td>\n",
       "      <td>93.716667</td>\n",
       "      <td>117.096774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SWEDEN</th>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>37.333333</td>\n",
       "      <td>59.354839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TURKEY</th>\n",
       "      <td>283.069143</td>\n",
       "      <td>91.303226</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNITED KINGDOM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>49.833333</td>\n",
       "      <td>105.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                2023-02-01  2023-03-01  2023-04-01  2023-05-01\n",
       "COUNTRY                                                       \n",
       "AUSTRIA           0.000000    0.000000    0.000000    0.000000\n",
       "BELGIUM           0.000000    0.000000    0.000000    0.000000\n",
       "CZECH REPUBLIC    0.000000    0.000000    0.000000    0.000000\n",
       "DENMARK           0.000000    0.000000    0.000000    0.000000\n",
       "FINLAND           0.000000    0.000000    0.000000    0.000000\n",
       "FRANCE           47.500000   31.612903    0.000000    0.000000\n",
       "GERMANY         100.571429  246.322581  234.466667  192.354839\n",
       "GREECE            0.000000    0.000000    0.000000  126.129032\n",
       "HUNGARY           0.000000    0.000000    0.000000    0.000000\n",
       "IRELAND           0.000000    0.000000    0.000000    0.000000\n",
       "ITALY           274.601286  240.500097   56.076667  228.070968\n",
       "NETHERLANDS     153.000000    0.000000  146.666667   19.354839\n",
       "NORWAY            0.000000    0.000000    0.000000    0.000000\n",
       "POLAND            2.480429   69.452000    6.945200   40.326968\n",
       "PORTUGAL          0.000000    0.000000    0.000000    0.000000\n",
       "SLOVAKIA          0.000000    0.000000    0.000000    0.000000\n",
       "SPAIN            90.000000  238.741935   93.716667  117.096774\n",
       "SWEDEN            8.000000    0.000000   37.333333   59.354839\n",
       "TURKEY          283.069143   91.303226    0.000000    0.000000\n",
       "UNITED KINGDOM    0.000000    0.000000   49.833333  105.000000"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "planned_outages.T.groupby('COUNTRY').sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "66a56c22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>2023-02-01</th>\n",
       "      <th>2023-03-01</th>\n",
       "      <th>2023-04-01</th>\n",
       "      <th>2023-05-01</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PLANT_NAME</th>\n",
       "      <th>UNIT_NAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Api Ancona Refinery</th>\n",
       "      <th>Topping (1000)</th>\n",
       "      <td>15.178571</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Priolo Gargallo ISAB Refinery (North)</th>\n",
       "      <th>Topping (CR 30)</th>\n",
       "      <td>124.000000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Saras Refinery</th>\n",
       "      <th>Topping T1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>81.967742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Topping T2</th>\n",
       "      <td>67.714286</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Topping RT2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IES Italiana</th>\n",
       "      <th>U100 (Topping)</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Venezia Refinery</th>\n",
       "      <th>Topping</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Sannazzaro Refinery</th>\n",
       "      <th>Topping Unit 2 (Unit 10)</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Topping 1 (Unit 53)</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Sarpom Refinery</th>\n",
       "      <th>PS 2 (Topping)</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>APS3 (Topping 3)</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Augusta Refinery</th>\n",
       "      <th>Topping 4 (T-4)</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Topping 5 (T-5)</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iplom Refinery</th>\n",
       "      <th>Topping U100</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>32.903226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Livorno Refinery</th>\n",
       "      <th>TPG (Topping)</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>18.866667</td>\n",
       "      <td>113.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Milazzo Refinery</th>\n",
       "      <th>U013 TP3 (Topping 3)</th>\n",
       "      <td>19.694143</td>\n",
       "      <td>75.600097</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>U017 TP4 (Topping 4)</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Priolo Gargallo ISAB Refinery (South)</th>\n",
       "      <th>Unit 100 Topping</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alma Petroli Refinery</th>\n",
       "      <th>Primary Distillation (CDU)</th>\n",
       "      <td>6.228571</td>\n",
       "      <td>10.900000</td>\n",
       "      <td>2.543333</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gela Refinery</th>\n",
       "      <th>Topping 2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Taranto Refinery</th>\n",
       "      <th>CDU (U100)</th>\n",
       "      <td>41.785714</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>34.666667</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                  2023-02-01  \\\n",
       "PLANT_NAME                            UNIT_NAME                                \n",
       "Api Ancona Refinery                   Topping (1000)               15.178571   \n",
       "Priolo Gargallo ISAB Refinery (North) Topping (CR 30)             124.000000   \n",
       "Saras Refinery                        Topping T1                    0.000000   \n",
       "                                      Topping T2                   67.714286   \n",
       "                                      Topping RT2                   0.000000   \n",
       "IES Italiana                          U100 (Topping)                0.000000   \n",
       "Venezia Refinery                      Topping                       0.000000   \n",
       "Sannazzaro Refinery                   Topping Unit 2 (Unit 10)      0.000000   \n",
       "                                      Topping 1 (Unit 53)           0.000000   \n",
       "Sarpom Refinery                       PS 2 (Topping)                0.000000   \n",
       "                                      APS3 (Topping 3)              0.000000   \n",
       "Augusta Refinery                      Topping 4 (T-4)               0.000000   \n",
       "                                      Topping 5 (T-5)               0.000000   \n",
       "Iplom Refinery                        Topping U100                  0.000000   \n",
       "Livorno Refinery                      TPG (Topping)                 0.000000   \n",
       "Milazzo Refinery                      U013 TP3 (Topping 3)         19.694143   \n",
       "                                      U017 TP4 (Topping 4)          0.000000   \n",
       "Priolo Gargallo ISAB Refinery (South) Unit 100 Topping              0.000000   \n",
       "Alma Petroli Refinery                 Primary Distillation (CDU)    6.228571   \n",
       "Gela Refinery                         Topping 2                     0.000000   \n",
       "Taranto Refinery                      CDU (U100)                   41.785714   \n",
       "\n",
       "                                                                  2023-03-01  \\\n",
       "PLANT_NAME                            UNIT_NAME                                \n",
       "Api Ancona Refinery                   Topping (1000)                0.000000   \n",
       "Priolo Gargallo ISAB Refinery (North) Topping (CR 30)              24.000000   \n",
       "Saras Refinery                        Topping T1                    0.000000   \n",
       "                                      Topping T2                    0.000000   \n",
       "                                      Topping RT2                   0.000000   \n",
       "IES Italiana                          U100 (Topping)                0.000000   \n",
       "Venezia Refinery                      Topping                       0.000000   \n",
       "Sannazzaro Refinery                   Topping Unit 2 (Unit 10)      0.000000   \n",
       "                                      Topping 1 (Unit 53)           0.000000   \n",
       "Sarpom Refinery                       PS 2 (Topping)                0.000000   \n",
       "                                      APS3 (Topping 3)              0.000000   \n",
       "Augusta Refinery                      Topping 4 (T-4)               0.000000   \n",
       "                                      Topping 5 (T-5)               0.000000   \n",
       "Iplom Refinery                        Topping U100                  0.000000   \n",
       "Livorno Refinery                      TPG (Topping)                 0.000000   \n",
       "Milazzo Refinery                      U013 TP3 (Topping 3)         75.600097   \n",
       "                                      U017 TP4 (Topping 4)          0.000000   \n",
       "Priolo Gargallo ISAB Refinery (South) Unit 100 Topping              0.000000   \n",
       "Alma Petroli Refinery                 Primary Distillation (CDU)   10.900000   \n",
       "Gela Refinery                         Topping 2                     0.000000   \n",
       "Taranto Refinery                      CDU (U100)                  130.000000   \n",
       "\n",
       "                                                                  2023-04-01  \\\n",
       "PLANT_NAME                            UNIT_NAME                                \n",
       "Api Ancona Refinery                   Topping (1000)                0.000000   \n",
       "Priolo Gargallo ISAB Refinery (North) Topping (CR 30)               0.000000   \n",
       "Saras Refinery                        Topping T1                    0.000000   \n",
       "                                      Topping T2                    0.000000   \n",
       "                                      Topping RT2                   0.000000   \n",
       "IES Italiana                          U100 (Topping)                0.000000   \n",
       "Venezia Refinery                      Topping                       0.000000   \n",
       "Sannazzaro Refinery                   Topping Unit 2 (Unit 10)      0.000000   \n",
       "                                      Topping 1 (Unit 53)           0.000000   \n",
       "Sarpom Refinery                       PS 2 (Topping)                0.000000   \n",
       "                                      APS3 (Topping 3)              0.000000   \n",
       "Augusta Refinery                      Topping 4 (T-4)               0.000000   \n",
       "                                      Topping 5 (T-5)               0.000000   \n",
       "Iplom Refinery                        Topping U100                  0.000000   \n",
       "Livorno Refinery                      TPG (Topping)                18.866667   \n",
       "Milazzo Refinery                      U013 TP3 (Topping 3)          0.000000   \n",
       "                                      U017 TP4 (Topping 4)          0.000000   \n",
       "Priolo Gargallo ISAB Refinery (South) Unit 100 Topping              0.000000   \n",
       "Alma Petroli Refinery                 Primary Distillation (CDU)    2.543333   \n",
       "Gela Refinery                         Topping 2                     0.000000   \n",
       "Taranto Refinery                      CDU (U100)                   34.666667   \n",
       "\n",
       "                                                                  2023-05-01  \n",
       "PLANT_NAME                            UNIT_NAME                               \n",
       "Api Ancona Refinery                   Topping (1000)                0.000000  \n",
       "Priolo Gargallo ISAB Refinery (North) Topping (CR 30)               0.000000  \n",
       "Saras Refinery                        Topping T1                   81.967742  \n",
       "                                      Topping T2                    0.000000  \n",
       "                                      Topping RT2                   0.000000  \n",
       "IES Italiana                          U100 (Topping)                0.000000  \n",
       "Venezia Refinery                      Topping                       0.000000  \n",
       "Sannazzaro Refinery                   Topping Unit 2 (Unit 10)      0.000000  \n",
       "                                      Topping 1 (Unit 53)           0.000000  \n",
       "Sarpom Refinery                       PS 2 (Topping)                0.000000  \n",
       "                                      APS3 (Topping 3)              0.000000  \n",
       "Augusta Refinery                      Topping 4 (T-4)               0.000000  \n",
       "                                      Topping 5 (T-5)               0.000000  \n",
       "Iplom Refinery                        Topping U100                 32.903226  \n",
       "Livorno Refinery                      TPG (Topping)               113.200000  \n",
       "Milazzo Refinery                      U013 TP3 (Topping 3)          0.000000  \n",
       "                                      U017 TP4 (Topping 4)          0.000000  \n",
       "Priolo Gargallo ISAB Refinery (South) Unit 100 Topping              0.000000  \n",
       "Alma Petroli Refinery                 Primary Distillation (CDU)    0.000000  \n",
       "Gela Refinery                         Topping 2                     0.000000  \n",
       "Taranto Refinery                      CDU (U100)                    0.000000  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "planned_outages.T.xs('ITALY', level='COUNTRY')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d40d77d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2023-02-01</th>\n",
       "      <th>2023-03-01</th>\n",
       "      <th>2023-04-01</th>\n",
       "      <th>2023-05-01</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COUNTRY</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AUSTRIA</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BELGIUM</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CZECH REPUBLIC</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>26.322581</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DENMARK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FINLAND</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRANCE</th>\n",
       "      <td>166.100000</td>\n",
       "      <td>561.516129</td>\n",
       "      <td>462.800000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GERMANY</th>\n",
       "      <td>178.000000</td>\n",
       "      <td>214.129032</td>\n",
       "      <td>133.666667</td>\n",
       "      <td>143.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GREECE</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HUNGARY</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IRELAND</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ITALY</th>\n",
       "      <td>80.000000</td>\n",
       "      <td>7.225806</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>112.451613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NETHERLANDS</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>38.709677</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>34.548387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NORWAY</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>POLAND</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>34.679613</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PORTUGAL</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SLOVAKIA</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>20.161290</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>37.258065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SPAIN</th>\n",
       "      <td>144.000000</td>\n",
       "      <td>23.274194</td>\n",
       "      <td>40.973333</td>\n",
       "      <td>142.425806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SWEDEN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TURKEY</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>41.080645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNITED KINGDOM</th>\n",
       "      <td>14.285714</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                2023-02-01  2023-03-01  2023-04-01  2023-05-01\n",
       "COUNTRY                                                       \n",
       "AUSTRIA           0.000000    0.000000    0.000000    0.000000\n",
       "BELGIUM           0.000000    0.000000    0.000000    0.000000\n",
       "CZECH REPUBLIC    0.000000   26.322581    0.000000    0.000000\n",
       "DENMARK           0.000000    0.000000    0.000000    0.000000\n",
       "FINLAND           0.000000    0.000000    0.000000    0.000000\n",
       "FRANCE          166.100000  561.516129  462.800000    0.000000\n",
       "GERMANY         178.000000  214.129032  133.666667  143.000000\n",
       "GREECE            0.000000    0.000000    0.000000    0.000000\n",
       "HUNGARY           0.000000    0.000000    0.000000    0.000000\n",
       "IRELAND           0.000000    0.000000    0.000000    0.000000\n",
       "ITALY            80.000000    7.225806    0.000000  112.451613\n",
       "NETHERLANDS       0.000000   38.709677    0.000000   34.548387\n",
       "NORWAY            0.000000    0.000000    0.000000    0.000000\n",
       "POLAND            0.000000   34.679613    0.000000    0.000000\n",
       "PORTUGAL          0.000000    0.000000    0.000000    0.000000\n",
       "SLOVAKIA          0.000000   20.161290    0.000000   37.258065\n",
       "SPAIN           144.000000   23.274194   40.973333  142.425806\n",
       "SWEDEN            0.000000    0.000000    0.000000    0.000000\n",
       "TURKEY            0.000000    0.000000    0.000000   41.080645\n",
       "UNITED KINGDOM   14.285714    0.000000    0.000000    0.000000"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unplanned_outages = RefineryData().get_outage('COUNTRY',OECD_EU_COUNTRIES, unit_type='CDU', outage_type='Unplanned')\n",
    "unplanned_outages = unplanned_outages.resample('MS').mean()['2023-02-01':'2023-05-01']\n",
    "unplanned_outages.T.groupby('COUNTRY').sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "515d983c",
   "metadata": {},
   "outputs": [],
   "source": [
    "o= [x.upper() for x in OECD_EU_COUNTRIES]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3f56baf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['AUSTRIA',\n",
       " 'BELGIUM',\n",
       " 'DENMARK',\n",
       " 'FINLAND',\n",
       " 'FRANCE',\n",
       " 'GERMANY',\n",
       " 'GREECE',\n",
       " 'IRELAND',\n",
       " 'ITALY',\n",
       " 'NETHERLANDS',\n",
       " 'NORWAY',\n",
       " 'PORTUGAL',\n",
       " 'SPAIN',\n",
       " 'SWEDEN',\n",
       " 'UNITED KINGDOM',\n",
       " 'TURKEY',\n",
       " 'CZECH REPUBLIC',\n",
       " 'HUNGARY',\n",
       " 'POLAND',\n",
       " 'SLOVAKIA',\n",
       " 'SWITZERLAND']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "o"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f12d5daa",
   "metadata": {},
   "outputs": [],
   "source": [
    "OECD_EU_COUNTRIES = [\n",
    "        'Austria',\n",
    "        'Belgium',\n",
    "        'Denmark',\n",
    "        'Finland',\n",
    "        'France',\n",
    "        'Germany',\n",
    "        'Greece',\n",
    "        'Ireland',\n",
    "        'Lithuania',\n",
    "        'Italy',\n",
    "        'Netherlands',\n",
    "        'Norway',\n",
    "        'Portugal',\n",
    "        'Spain',\n",
    "        'Sweden',\n",
    "        'United Kingdom',\n",
    "        'Turkey',\n",
    "        'Czech Republic',\n",
    "        'Hungary',\n",
    "        'Poland',\n",
    "        'Slovakia',\n",
    "        'Switzerland'\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "338f8e96",
   "metadata": {},
   "outputs": [],
   "source": [
    "def bo_get_data(query):\n",
    "    data = DataAccessApi.GetDataframe(query)\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c6e15c05",
   "metadata": {},
   "outputs": [],
   "source": [
    "ctry_qry = \"\"\"SELECT DISTINCT(RU.COUNTRY)\n",
    "\t\tfrom dataengineering.oil_refinery_unit_view AS RU\n",
    "    LEFT JOIN dataengineering.oil_refinery_plant AS R \n",
    "  ON RU.PLANT_ID = R.Plant_Id\n",
    "  WHERE UNIT_GROUP = 'CDU' \"\"\"\n",
    "countries = bo_get_data(ctry_qry)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b6349f23",
   "metadata": {},
   "outputs": [],
   "source": [
    "year_tar = \"\"\"SELECT\n",
    "                tu.COUNTRY\n",
    "                ,t.COMMENTS\n",
    "                ,tu.UNIT_NAME\n",
    "                ,tu.PLANT_NAME\n",
    "                ,EVENT_TYPE\n",
    "                ,START_DATE\n",
    "                ,END_DATE\n",
    "                ,(1. + DATEDIFF(END_DATE, START_DATE)) * CAP_OFFLINE  / 1000000. as lost_barrels\n",
    "                ,tu.U_CAPACITY / 1000 as capacity\n",
    "                ,t.CAP_OFFLINE  / 1000 as offline\n",
    "                ,E_CAUSE\n",
    "                FROM dataengineering.oil_refinery_outage_latest t\n",
    "            inner join (\n",
    "                select UNIT_ID, COUNTRY, U_CAPACITY, UNIT_NAME, PLANT_NAME\n",
    "                FROM dataengineering.oil_refinery_unit_view\n",
    "                where COUNTRY in ('AUSTRIA',\n",
    " 'BELGIUM',\n",
    " 'DENMARK',\n",
    " 'FINLAND',\n",
    " 'FRANCE',\n",
    " 'GERMANY',\n",
    " 'GREECE',\n",
    " 'IRELAND',\n",
    " 'ITALY',\n",
    " 'NETHERLANDS',\n",
    " 'NORWAY',\n",
    " 'LITHUANIA',\n",
    " 'PORTUGAL',\n",
    " 'SPAIN',\n",
    " 'SWEDEN',\n",
    " 'UNITED KINGDOM',\n",
    " 'TURKEY',\n",
    " 'CZECH REPUBLIC',\n",
    " 'HUNGARY',\n",
    " 'POLAND',\n",
    " 'SLOVAKIA',\n",
    " 'SWITZERLAND',\n",
    " 'BULGARIA',\n",
    " 'CROATIA',\n",
    " 'ROMANIA',\n",
    " 'SERBIA',\n",
    " 'BOSNIA AND HERZEGOVINA') and UNIT_GROUP = 'CDU'\n",
    "            ) tu on t.UNIT_ID = tu.UNIT_ID\n",
    "            where START_DATE > '2018-01-01' and START_DATE < '2025-01-01' and t.EVENT_TYPE = 'Planned'\n",
    "            order by last_day(START_DATE), lost_barrels desc\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "96755bff",
   "metadata": {},
   "outputs": [],
   "source": [
    "refi = bo_get_data(year_tar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e4d6b27d",
   "metadata": {},
   "outputs": [],
   "source": [
    "refin = refi.set_index('START_DATE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8e9d24b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "refin['Year'] = refin.index.astype(str).str[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "654832ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "refin.to_csv('future_tar_eu.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "32e60e6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "refin = refin.drop(columns =['UNIT_NAME'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "04aeb8bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "refi.to_csv('past_tar_eu.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "f59fdebf",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_model = pd.read_excel('C:/Users/shreyagarwal/Downloads/scripts/platts_cap.xlsx', header=[0, 1, 2, 3, 4], index_col = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "6a4d5fdc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>City</th>\n",
       "      <th>Abadan</th>\n",
       "      <th>Abu Dhabi</th>\n",
       "      <th>Al Diwaniya</th>\n",
       "      <th>Al Hamriya</th>\n",
       "      <th>Al Jubail</th>\n",
       "      <th>Al Mawsil</th>\n",
       "      <th>Al-Zour</th>\n",
       "      <th>Alexandria</th>\n",
       "      <th>Aliaga</th>\n",
       "      <th>Arak</th>\n",
       "      <th>...</th>\n",
       "      <th>Sohar</th>\n",
       "      <th>Suez</th>\n",
       "      <th>Tabriz</th>\n",
       "      <th>Tanta</th>\n",
       "      <th>Tasour</th>\n",
       "      <th>Tawke</th>\n",
       "      <th>Tehran</th>\n",
       "      <th>Umm Saead</th>\n",
       "      <th>Wadi Feiran</th>\n",
       "      <th>Yanbu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Q1 2000</th>\n",
       "      <td>338.039998</td>\n",
       "      <td>78.989998</td>\n",
       "      <td>0.0</td>\n",
       "      <td>77.25</td>\n",
       "      <td>304.999997</td>\n",
       "      <td>4.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>139.999995</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>165.000004</td>\n",
       "      <td>95.999999</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>56.899998</td>\n",
       "      <td>10.0</td>\n",
       "      <td>589.999996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q2 2000</th>\n",
       "      <td>338.039998</td>\n",
       "      <td>78.989998</td>\n",
       "      <td>0.0</td>\n",
       "      <td>77.25</td>\n",
       "      <td>334.999997</td>\n",
       "      <td>4.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>139.999995</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>165.000004</td>\n",
       "      <td>95.999999</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>56.899998</td>\n",
       "      <td>10.0</td>\n",
       "      <td>589.999996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q3 2000</th>\n",
       "      <td>338.039998</td>\n",
       "      <td>78.989998</td>\n",
       "      <td>0.0</td>\n",
       "      <td>77.25</td>\n",
       "      <td>334.999997</td>\n",
       "      <td>4.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>139.999995</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>165.000004</td>\n",
       "      <td>95.999999</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>56.899998</td>\n",
       "      <td>10.0</td>\n",
       "      <td>589.999996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q4 2000</th>\n",
       "      <td>338.039998</td>\n",
       "      <td>78.989998</td>\n",
       "      <td>0.0</td>\n",
       "      <td>77.25</td>\n",
       "      <td>334.999997</td>\n",
       "      <td>4.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>139.999995</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>165.000004</td>\n",
       "      <td>95.999999</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>225.0</td>\n",
       "      <td>56.899998</td>\n",
       "      <td>10.0</td>\n",
       "      <td>589.999996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q1 2001</th>\n",
       "      <td>338.039998</td>\n",
       "      <td>78.989998</td>\n",
       "      <td>0.0</td>\n",
       "      <td>77.25</td>\n",
       "      <td>334.999997</td>\n",
       "      <td>4.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>139.999995</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>165.000004</td>\n",
       "      <td>95.999999</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>225.0</td>\n",
       "      <td>56.899998</td>\n",
       "      <td>10.0</td>\n",
       "      <td>589.999996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q1 2028</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q2 2028</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q3 2028</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NaN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NaN</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>117 rows × 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "City         Abadan  Abu Dhabi  Al Diwaniya  Al Hamriya   Al Jubail  \\\n",
       "Q1 2000  338.039998  78.989998          0.0       77.25  304.999997   \n",
       "Q2 2000  338.039998  78.989998          0.0       77.25  334.999997   \n",
       "Q3 2000  338.039998  78.989998          0.0       77.25  334.999997   \n",
       "Q4 2000  338.039998  78.989998          0.0       77.25  334.999997   \n",
       "Q1 2001  338.039998  78.989998          0.0       77.25  334.999997   \n",
       "...             ...        ...          ...         ...         ...   \n",
       "Q1 2028    0.000000   0.000000          0.0        0.00    0.000000   \n",
       "Q2 2028    0.000000   0.000000          0.0        0.00    0.000000   \n",
       "Q3 2028    0.000000   0.000000          0.0        0.00    0.000000   \n",
       "NaN        0.000000   0.000000          0.0        0.00    0.000000   \n",
       "NaN        0.000000   0.000000          0.0        0.00    0.000000   \n",
       "\n",
       "City     Al Mawsil  Al-Zour Alexandria  Aliaga        Arak  ...  Sohar  \\\n",
       "Q1 2000        4.3      0.0      176.0     0.0  139.999995  ...    0.0   \n",
       "Q2 2000        4.3      0.0      176.0     0.0  139.999995  ...    0.0   \n",
       "Q3 2000        4.3      0.0      176.0     0.0  139.999995  ...    0.0   \n",
       "Q4 2000        4.3      0.0      176.0     0.0  139.999995  ...    0.0   \n",
       "Q1 2001        4.3      0.0      176.0     0.0  139.999995  ...    0.0   \n",
       "...            ...      ...        ...     ...         ...  ...    ...   \n",
       "Q1 2028        0.0      0.0          0     0.0    0.000000  ...    0.0   \n",
       "Q2 2028        0.0      0.0          0     0.0    0.000000  ...    0.0   \n",
       "Q3 2028        0.0      0.0          0     0.0    0.000000  ...    0.0   \n",
       "NaN            0.0      0.0          0     0.0    0.000000  ...    0.0   \n",
       "NaN            0.0      0.0          0     0.0    0.000000  ...    0.0   \n",
       "\n",
       "City           Suez     Tabriz  Tanta  Tasour  Tawke  Tehran  Umm Saead  \\\n",
       "Q1 2000  165.000004  95.999999   40.0     0.0    0.0   250.0  56.899998   \n",
       "Q2 2000  165.000004  95.999999   40.0     0.0    0.0   250.0  56.899998   \n",
       "Q3 2000  165.000004  95.999999   40.0     0.0    0.0   250.0  56.899998   \n",
       "Q4 2000  165.000004  95.999999   40.0     0.0    0.0   225.0  56.899998   \n",
       "Q1 2001  165.000004  95.999999   40.0     0.0    0.0   225.0  56.899998   \n",
       "...             ...        ...    ...     ...    ...     ...        ...   \n",
       "Q1 2028    0.000000   0.000000   40.0     0.0    0.0     0.0   0.000000   \n",
       "Q2 2028    0.000000   0.000000   40.0     0.0    0.0     0.0   0.000000   \n",
       "Q3 2028    0.000000   0.000000    0.0     0.0    0.0     0.0   0.000000   \n",
       "NaN        0.000000   0.000000    0.0     0.0    0.0     0.0   0.000000   \n",
       "NaN        0.000000   0.000000    0.0     0.0    0.0     0.0   0.000000   \n",
       "\n",
       "City     Wadi Feiran       Yanbu  \n",
       "Q1 2000         10.0  589.999996  \n",
       "Q2 2000         10.0  589.999996  \n",
       "Q3 2000         10.0  589.999996  \n",
       "Q4 2000         10.0  589.999996  \n",
       "Q1 2001         10.0  589.999996  \n",
       "...              ...         ...  \n",
       "Q1 2028          0.0    0.000000  \n",
       "Q2 2028          0.0    0.000000  \n",
       "Q3 2028          0.0    0.000000  \n",
       "NaN              0.0    0.000000  \n",
       "NaN              0.0    0.000000  \n",
       "\n",
       "[117 rows x 78 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_model.groupby(axis=1, level= 'City').sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4a6fcf80",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_c = countries['COUNTRY'].to_list()\n",
    "dd = ['INDIA']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "752250b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tshistory.api import timeseries\n",
    "from BlueOcean import DataAccessApi\n",
    "from saturn_server.cross.helpers import safe_register_formula"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "820fed28",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import requests\n",
    "import json\n",
    "from pathlib import Path\n",
    "from requests import Request\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "97945f24",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_excel('C:/Users/shreyagarwal/Downloads/scripts/kpler_vessel.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "99f68749",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_country_names(data):\n",
    "    df = data.copy()\n",
    "    df['Vessel'] = df['Vessel'].str.lower()\n",
    "    df['Vessel'] = df['Vessel'].str.title()\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e1275082",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Generate a date range from January 2002 to December 2024\n",
    "dates = pd.date_range(start='2002-01-01', end='2027-12-01', freq='MS')\n",
    "\n",
    "# Create a series with all values set to 0\n",
    "values = np.zeros(len(dates))\n",
    "\n",
    "# Set the value for March 2024 to 320\n",
    "values[dates.get_loc('2024-05-01')] = -0.009\n",
    "\n",
    "# Create the DataFrame\n",
    "df = pd.DataFrame({'Date': dates, 'Value': values})\n",
    "series = df.set_index('Date')['Value']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "85b92218",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from tshistory.api import timeseries\n",
    "\n",
    "tsa = timeseries('http://tst-qdev-ap9/api')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "da63cb7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2024-05-01   -0.009\n",
       "Name: oil.analyst.util.kbd.override, dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tsa.update('oil.analyst.util.kbd.override',series,'Shrey Agarwal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e8c1cf52",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = clean_country_names(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d48761da",
   "metadata": {},
   "outputs": [],
   "source": [
    "vessel_name = df['Vessel'].to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "18173891",
   "metadata": {},
   "outputs": [],
   "source": [
    "ctry_qry = \"\"\"select \n",
    "trade_id,\n",
    "shipment_id,\n",
    "status,\n",
    "vessel_imo,\n",
    "vessel_name,\n",
    "closest_ancestor_grade,\n",
    "cargo_origin_barrels_split_by_product,\n",
    "voyage_start,\n",
    "voyage_end,\n",
    "installation_origin_name,\n",
    "origin_country_name,\n",
    "zone_origin_name,\n",
    "origin_subcontinent_name,\n",
    "continent_origin_name,\n",
    "initial_seller_name,\n",
    "charterer_name,\n",
    "destination_location_name,\n",
    "installation_destination_name,\n",
    "destination_country_name,\n",
    "zone_destination_name,\n",
    "destination_subcontinent_name,\n",
    "continent_destination_name,\n",
    "final_buyer_name,\n",
    "origin_eta_source,\n",
    "LoadTimeStamp\n",
    " from dataengineering.oil_kpler_kplertrades \n",
    "    where origin_country_name = 'United States' and closest_ancestor_group = 'Crude/Co' and isactive = true \"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "1dc3b264",
   "metadata": {},
   "outputs": [],
   "source": [
    "ctry_qry = \"\"\"SELECT\n",
    "                tu.COUNTRY\n",
    "                ,tu.UNIT_NAME\n",
    "                ,tu.PLANT_NAME\n",
    "                ,EVENT_TYPE\n",
    "                ,START_DATE\n",
    "                ,END_DATE\n",
    "                ,(1. + DATEDIFF(END_DATE, START_DATE)) * CAP_OFFLINE  / 1000000. as lost_barrels\n",
    "                ,tu.U_CAPACITY / 1000 as capacity\n",
    "                ,t.CAP_OFFLINE  / 1000 as offline\n",
    "                ,E_CAUSE\n",
    "                FROM dataengineering.oil_refinery_outage_latest t\n",
    "            inner join (\n",
    "                select UNIT_ID, COUNTRY, U_CAPACITY, UNIT_NAME, PLANT_NAME\n",
    "                FROM dataengineering.oil_refinery_unit_view\n",
    "                where COUNTRY in ('AUSTRIA',\n",
    " 'BELGIUM',\n",
    " 'DENMARK',\n",
    " 'FINLAND',\n",
    " 'FRANCE',\n",
    " 'GERMANY',\n",
    " 'GREECE',\n",
    " 'IRELAND',\n",
    " 'ITALY',\n",
    " 'NETHERLANDS',\n",
    " 'NORWAY',\n",
    " 'LITHUANIA',\n",
    " 'PORTUGAL',\n",
    " 'SPAIN',\n",
    " 'SWEDEN',\n",
    " 'UNITED KINGDOM',\n",
    " 'TURKEY',\n",
    " 'CZECH REPUBLIC',\n",
    " 'HUNGARY',\n",
    " 'POLAND',\n",
    " 'SLOVAKIA',\n",
    " 'SWITZERLAND') and UNIT_GROUP = 'CDU'\n",
    "            ) tu on t.UNIT_ID = tu.UNIT_ID\n",
    "            where START_DATE > '2020-01-01' and START_DATE < '2025-01-01' and t.EVENT_TYPE = 'Planned'\n",
    "            order by last_day(START_DATE), lost_barrels desc\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "fd3a933b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def bo_get_data(query):\n",
    "    data = DataAccessApi.GetDataframe(query)\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "b286f53c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tshistory.api import timeseries\n",
    "from BlueOcean import DataAccessApi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b5eda900",
   "metadata": {},
   "outputs": [],
   "source": [
    "us_flows = bo_get_data(ctry_qry)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "449a1c26",
   "metadata": {},
   "outputs": [],
   "source": [
    "us_flows.to_csv('us_flows.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a93e5a09",
   "metadata": {},
   "outputs": [],
   "source": [
    "vn_ts_m_new = aggregate_daily_kbd(venezuela_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "65c22f53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date\n",
       "2015-01-01    482.839500\n",
       "2015-02-01    364.853393\n",
       "2015-03-01    535.783581\n",
       "2015-04-01    345.474067\n",
       "2015-05-01    330.048613\n",
       "                 ...    \n",
       "2023-09-01      0.000000\n",
       "2023-10-01      0.000000\n",
       "2023-11-01      0.000000\n",
       "2023-12-01    127.064452\n",
       "2024-01-01    190.544952\n",
       "Freq: MS, Name: volume, Length: 109, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vn_ts_m_new.resample('MS').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f6ac8aa5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def aggregate_daily_kbd(df):\n",
    "    df.index = pd.to_datetime(df['date'])\n",
    "    df_grouped = df.resample('D').sum().astype(float)\n",
    "    df_grouped.index = df_grouped.index.tz_localize(None)\n",
    "    return df_grouped['volume']/1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4c06f34f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def aggregate_monthly_kbd(df):\n",
    "    df.index = pd.to_datetime(df.date)\n",
    "    df_grouped = df.resample('MS').sum().astype(float)\n",
    "    df_grouped['volume'] = df_grouped['volume']/(df_grouped.index.daysinmonth*1000)\n",
    "    df_grouped.index = df_grouped.index.tz_localize(None)\n",
    "    return df_grouped['volume']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7d77729f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_names(str_list):\n",
    "    new_list = []\n",
    "    for i in range(len(str_list)):\n",
    "        new_list.append(str_list[i].lower())\n",
    "        new_list[i] = new_list[i].replace(' ','_')\n",
    "    return new_list\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d5a5c99e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date\n",
       "2024-01-01       0.000\n",
       "2024-01-02       0.000\n",
       "2024-01-03       0.000\n",
       "2024-01-04       0.000\n",
       "2024-01-05       0.000\n",
       "2024-01-06       0.000\n",
       "2024-01-07     985.059\n",
       "2024-01-08       0.000\n",
       "2024-01-09       0.000\n",
       "2024-01-10       0.000\n",
       "2024-01-11     985.053\n",
       "2024-01-12       0.000\n",
       "2024-01-13       0.000\n",
       "2024-01-14       0.000\n",
       "2024-01-15       0.000\n",
       "2024-01-16       0.000\n",
       "2024-01-17       0.000\n",
       "2024-01-18       0.000\n",
       "2024-01-19       0.000\n",
       "2024-01-20       0.000\n",
       "2024-01-21    2031.332\n",
       "Name: volume, dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vn_ts_m_new['2024-01-01':'2024-01-21']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ac644fb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "vn_ts_m = aggregate_monthly_kbd(venezuela_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "69506016",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\"token\":\"GsFszb5K0JExm6LUhQNMdOwrW46y7X10qC_SoeRbOW1XI\",\"user\":{\"accounts\":[\"lpg\",\"oil\",\"cpp\"]}}\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import json\n",
    "\n",
    "url = \"https://api.kpler.com/v1/login\"\n",
    "\n",
    "payload = json.dumps({\n",
    "  \"email\": \"shreyagarwal@petroineos.co.uk\",\n",
    "  \"password\": \"Petro@123\"\n",
    "})\n",
    "headers = {\n",
    "  'Content-Type': 'application/json'\n",
    "}\n",
    "\n",
    "response = requests.request(\"POST\", url, headers=headers, data=payload)\n",
    "\n",
    "print(response.text)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c543b2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "config = Configuration(\n",
    "        Platform.Liquids, \n",
    "        os.environ.get(\"KPLER_EMAIL\"), \n",
    "        os.environ.get(\"KPLER_PASSWORD\")\n",
    "    )\n",
    "fleet_metrics_client = FleetMetrics(config)\n",
    "oow = fleet_metrics_client.get(\n",
    "        metric=FleetMetricsAlgo.LoadedVessels,\n",
    "        unit=FleetMetricsMeasurementUnit.BBL,\n",
    "        period=FleetMetricsPeriod.Daily,\n",
    "        split=FleetMetricsSplit.Total,\n",
    "        products=['Crude/Condensate']\n",
    "    ).set_index('Date')    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b23c197b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date, timedelta\n",
    "from kpler.sdk.resources.inventories import Inventories\n",
    "from kpler.sdk.resources.fleet_metrics import FleetMetrics\n",
    "from kpler.sdk import InventoriesSplit, FleetMetricsAlgo, FleetMetricsSplit, FleetMetricsPeriod, FleetMetricsMeasurementUnit\n",
    "import pandas as pd\n",
    "from tshistory.api import timeseries\n",
    "from kpler.sdk import Platform\n",
    "from kpler.sdk.configuration import Configuration\n",
    "from kpler.sdk.resources.trades import Trades\n",
    "\n",
    "\n",
    "config = Configuration(Platform.Liquids, \"shreyagarwal@petroineos.co.uk\", \"Petro@123\")\n",
    "\n",
    "fleet_metrics_client = FleetMetrics(config)\n",
    "inventories_client = Inventories(config)\n",
    "\n",
    "oow = fleet_metrics_client.get(\n",
    "        start_date = date(2020,1,1),\n",
    "        metric=FleetMetricsAlgo.LoadedVessels,\n",
    "        zones=[\"China\"],\n",
    "        unit=FleetMetricsMeasurementUnit.BBL,\n",
    "        period=FleetMetricsPeriod.Daily,\n",
    "        split=FleetMetricsSplit.Total,\n",
    "        products=['Crude/Co']\n",
    "    ).set_index('Date')    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5c46ef9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "Africa = ['Angola', 'Chad', 'Gabon', 'Ghana', 'Ivory Coast', 'Nigeria', 'Republic of the Congo', 'South Africa',\n",
    "          'Sudan']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "13f75647",
   "metadata": {},
   "outputs": [],
   "source": [
    "inventories = inventories_client.get(\n",
    "        start_date=date(2017, 1, 1),\n",
    "        end_date=pd.Timestamp.now(),\n",
    "        zones=Africa,\n",
    "        split=InventoriesSplit.Total\n",
    "    )\n",
    "a_country = inventories.set_index('Date')[['Level (kb)']].astype(float).sum(axis=1) / 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d3b23714",
   "metadata": {},
   "outputs": [],
   "source": [
    "aa= a_country.rename('Africa')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7595f014",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Africa'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\pandas\\_libs\\tslibs\\parsing.pyx:362\u001b[0m, in \u001b[0;36mpandas._libs.tslibs.parsing.parse_datetime_string_with_reso\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\pandas\\_libs\\tslibs\\parsing.pyx:570\u001b[0m, in \u001b[0;36mpandas._libs.tslibs.parsing.dateutil_parse\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Unknown datetime string format, unable to parse: Africa",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mDateParseError\u001b[0m                            Traceback (most recent call last)",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\pandas\\core\\indexes\\datetimes.py:644\u001b[0m, in \u001b[0;36mDatetimeIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m    643\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 644\u001b[0m     parsed, reso \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_parse_with_reso\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    645\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\pandas\\core\\indexes\\datetimelike.py:231\u001b[0m, in \u001b[0;36mDatetimeIndexOpsMixin._parse_with_reso\u001b[1;34m(self, label)\u001b[0m\n\u001b[0;32m    229\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_parse_with_reso\u001b[39m(\u001b[38;5;28mself\u001b[39m, label: \u001b[38;5;28mstr\u001b[39m):\n\u001b[0;32m    230\u001b[0m     \u001b[38;5;66;03m# overridden by TimedeltaIndex\u001b[39;00m\n\u001b[1;32m--> 231\u001b[0m     parsed, reso_str \u001b[38;5;241m=\u001b[39m \u001b[43mparsing\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparse_time_string\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfreq\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    232\u001b[0m     reso \u001b[38;5;241m=\u001b[39m Resolution\u001b[38;5;241m.\u001b[39mfrom_attrname(reso_str)\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\pandas\\_libs\\tslibs\\parsing.pyx:321\u001b[0m, in \u001b[0;36mpandas._libs.tslibs.parsing.parse_time_string\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\pandas\\_libs\\tslibs\\parsing.pyx:367\u001b[0m, in \u001b[0;36mpandas._libs.tslibs.parsing.parse_datetime_string_with_reso\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mDateParseError\u001b[0m: Unknown datetime string format, unable to parse: Africa",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[24], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43maa\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mAfrica\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\pandas\\core\\series.py:958\u001b[0m, in \u001b[0;36mSeries.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    955\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_values[key]\n\u001b[0;32m    957\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m key_is_scalar:\n\u001b[1;32m--> 958\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_value\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    960\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_hashable(key):\n\u001b[0;32m    961\u001b[0m     \u001b[38;5;66;03m# Otherwise index.get_value will raise InvalidIndexError\u001b[39;00m\n\u001b[0;32m    962\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    963\u001b[0m         \u001b[38;5;66;03m# For labels that don't resolve as scalars like tuples and frozensets\u001b[39;00m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\pandas\\core\\series.py:1069\u001b[0m, in \u001b[0;36mSeries._get_value\u001b[1;34m(self, label, takeable)\u001b[0m\n\u001b[0;32m   1066\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_values[label]\n\u001b[0;32m   1068\u001b[0m \u001b[38;5;66;03m# Similar to Index.get_value, but we do not fall back to positional\u001b[39;00m\n\u001b[1;32m-> 1069\u001b[0m loc \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1070\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex\u001b[38;5;241m.\u001b[39m_get_values_for_loc(\u001b[38;5;28mself\u001b[39m, loc, label)\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\pandas\\core\\indexes\\datetimes.py:646\u001b[0m, in \u001b[0;36mDatetimeIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m    644\u001b[0m     parsed, reso \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_parse_with_reso(key)\n\u001b[0;32m    645\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m--> 646\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m    648\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_can_partial_date_slice(reso):\n\u001b[0;32m    649\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Africa'"
     ]
    }
   ],
   "source": [
    "aa['Africa']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "428cf4d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting data for Algeria\n",
      "getting data for Angola\n",
      "getting data for Argentina\n",
      "getting data for Aruba\n",
      "getting data for Australia\n",
      "getting data for Austria\n",
      "getting data for Azerbaijan\n",
      "getting data for Bahamas\n",
      "getting data for Bahrain\n",
      "getting data for Bangladesh\n",
      "getting data for Belarus\n",
      "getting data for Belgium\n",
      "getting data for Bolivia\n",
      "getting data for Bonaire\n",
      "getting data for Brazil\n",
      "getting data for Brunei\n",
      "getting data for Bulgaria\n",
      "getting data for Cape Verde\n",
      "getting data for Cambodia\n",
      "getting data for Cameroon\n",
      "getting data for Canada\n",
      "getting data for Chad\n",
      "getting data for Chile\n",
      "getting data for China\n",
      "getting data for Colombia\n",
      "getting data for Republic of the Congo\n",
      "getting data for Democratic Republic of the Congo\n",
      "getting data for Ivory Coast\n",
      "getting data for Croatia\n",
      "getting data for Cuba\n",
      "getting data for Curacao\n",
      "getting data for Cyprus\n",
      "getting data for Czech Republic\n",
      "getting data for Denmark\n",
      "getting data for Dominican Republic\n",
      "getting data for Ecuador\n",
      "getting data for Egypt\n",
      "getting data for El Salvador\n",
      "getting data for Equatorial Guinea\n",
      "getting data for Finland\n",
      "getting data for France\n",
      "getting data for Gabon\n",
      "getting data for Georgia\n",
      "getting data for Germany\n",
      "getting data for Ghana\n",
      "getting data for Greece\n",
      "getting data for Guatemala\n",
      "getting data for Guyana\n",
      "getting data for Hungary\n",
      "getting data for India\n",
      "getting data for Indonesia\n",
      "getting data for Iran\n",
      "getting data for Iraq\n",
      "getting data for Ireland\n",
      "getting data for Israel\n",
      "getting data for Italy\n",
      "getting data for Jamaica\n",
      "getting data for Japan\n",
      "getting data for Jordan\n",
      "getting data for Kazakhstan\n",
      "getting data for Kuwait\n",
      "getting data for Latvia\n",
      "getting data for Libya\n",
      "getting data for Lithuania\n",
      "getting data for Malaysia\n",
      "getting data for Mexico\n",
      "getting data for Myanmar\n",
      "getting data for Netherlands\n",
      "getting data for New Zealand\n",
      "getting data for Nigeria\n",
      "getting data for North Korea\n",
      "getting data for Norway\n",
      "getting data for Oman\n",
      "getting data for Pakistan\n",
      "getting data for Panama\n",
      "getting data for Papua New Guinea\n",
      "getting data for Peru\n",
      "getting data for Philippines\n",
      "getting data for Poland\n",
      "getting data for Portugal\n",
      "getting data for Qatar\n",
      "getting data for Romania\n",
      "getting data for Russian Federation\n",
      "getting data for Saint Lucia\n",
      "getting data for Saudi Arabia\n",
      "getting data for Singapore Republic\n",
      "getting data for Slovakia\n",
      "getting data for South Africa\n",
      "getting data for South Korea\n",
      "getting data for Spain\n",
      "getting data for Sri Lanka\n",
      "getting data for Sudan\n",
      "getting data for Sweden\n",
      "getting data for Switzerland\n",
      "getting data for Syria\n",
      "getting data for Taiwan\n",
      "getting data for Thailand\n",
      "getting data for Trinidad and Tobago\n",
      "getting data for Tunisia\n",
      "getting data for Turkey\n",
      "getting data for Turkmenistan\n",
      "getting data for Ukraine\n",
      "getting data for United Arab Emirates\n",
      "getting data for United Kingdom\n",
      "getting data for Uruguay\n",
      "getting data for United States\n",
      "getting data for Venezuela\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[68], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m kpler_name, column_name \u001b[38;5;129;01min\u001b[39;00m data\u001b[38;5;241m.\u001b[39mvalues:\n\u001b[0;32m      2\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgetting data for \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkpler_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m----> 3\u001b[0m     oow \u001b[38;5;241m=\u001b[39m \u001b[43mfleet_metrics_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m      4\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstart_date\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdate\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m2021\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      5\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmetric\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFleetMetricsAlgo\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mLoadedVessels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      6\u001b[0m \u001b[43m        \u001b[49m\u001b[43mzones\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[43mkpler_name\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      7\u001b[0m \u001b[43m        \u001b[49m\u001b[43munit\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFleetMetricsMeasurementUnit\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mBBL\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      8\u001b[0m \u001b[43m        \u001b[49m\u001b[43mperiod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFleetMetricsPeriod\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mDaily\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      9\u001b[0m \u001b[43m        \u001b[49m\u001b[43msplit\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFleetMetricsSplit\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mTotal\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m     10\u001b[0m \u001b[43m        \u001b[49m\u001b[43mproducts\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mCrude/Co\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[0;32m     11\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mset_index(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m     12\u001b[0m     oow\u001b[38;5;241m.\u001b[39mcolumns \u001b[38;5;241m=\u001b[39m  [column_name]   \n\u001b[0;32m     13\u001b[0m     commercial \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mconcat([commercial, oow], axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\kpler\\sdk\\resources\\fleet_metrics.py:102\u001b[0m, in \u001b[0;36mFleetMetrics.get\u001b[1;34m(self, start_date, end_date, zones, metric, period, floating_storage_duration_min, floating_storage_duration_max, products, unit, split, with_freight_view, vessel_types, vessel_types_alt)\u001b[0m\n\u001b[0;32m     48\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m     49\u001b[0m \u001b[38;5;124;03mArgs:\u001b[39;00m\n\u001b[0;32m     50\u001b[0m \u001b[38;5;124;03m    start_date: Optional[date] Start of the period (YYYY-MM-DD)\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     84\u001b[0m \u001b[38;5;124;03m        \"..\",\"..\",\"..\",\"..\",\"..\",\"..\",\"..\",\"..\",\"..\",\"..\",\"..\"\u001b[39;00m\n\u001b[0;32m     85\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m     87\u001b[0m query_parameters \u001b[38;5;241m=\u001b[39m {\n\u001b[0;32m     88\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstartDate\u001b[39m\u001b[38;5;124m\"\u001b[39m: process_date_parameter(start_date),\n\u001b[0;32m     89\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mendDate\u001b[39m\u001b[38;5;124m\"\u001b[39m: process_date_parameter(end_date),\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    100\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvesselTypesAlt\u001b[39m\u001b[38;5;124m\"\u001b[39m: process_enum_parameters(vessel_types_alt, to_lower_case\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m),\n\u001b[0;32m    101\u001b[0m }\n\u001b[1;32m--> 102\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_dataframe\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mRESOURCE_NAME\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mquery_parameters\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\kpler\\sdk\\client.py:126\u001b[0m, in \u001b[0;36mKplerClient._get_dataframe\u001b[1;34m(self, resource, params, header_parameters)\u001b[0m\n\u001b[0;32m    122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m RestrictedPlatformException(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mavailable_platforms)\n\u001b[0;32m    124\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalidate()\n\u001b[1;32m--> 126\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_raw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresource\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparams\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    127\u001b[0m content: \u001b[38;5;28mbytes\u001b[39m \u001b[38;5;241m=\u001b[39m response\u001b[38;5;241m.\u001b[39mcontent\n\u001b[0;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\kpler\\sdk\\client.py:98\u001b[0m, in \u001b[0;36mKplerClient._get_raw\u001b[1;34m(self, resource, params)\u001b[0m\n\u001b[0;32m     95\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumn_ids:\n\u001b[0;32m     96\u001b[0m     headers[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX-use-columns-ids-headers\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m---> 98\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[43mrequests\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m     99\u001b[0m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    100\u001b[0m \u001b[43m    \u001b[49m\u001b[43mparams\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparams\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# type: ignore\u001b[39;49;00m\n\u001b[0;32m    101\u001b[0m \u001b[43m    \u001b[49m\u001b[43mauth\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mHTTPBasicAuth\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconfiguration\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43memail\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconfiguration\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpassword\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    102\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    103\u001b[0m \u001b[43m    \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    104\u001b[0m \u001b[43m    \u001b[49m\u001b[43mproxies\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconfiguration\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mproxies\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    105\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconfiguration\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcertificates\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43mverify\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconfiguration\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mverify\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    107\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    108\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m response\u001b[38;5;241m.\u001b[39mstatus_code \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m200\u001b[39m:\n\u001b[0;32m    109\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m response\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\requests\\api.py:75\u001b[0m, in \u001b[0;36mget\u001b[1;34m(url, params, **kwargs)\u001b[0m\n\u001b[0;32m     64\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget\u001b[39m(url, params\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m     65\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124;03m\"\"\"Sends a GET request.\u001b[39;00m\n\u001b[0;32m     66\u001b[0m \n\u001b[0;32m     67\u001b[0m \u001b[38;5;124;03m    :param url: URL for the new :class:`Request` object.\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     72\u001b[0m \u001b[38;5;124;03m    :rtype: requests.Response\u001b[39;00m\n\u001b[0;32m     73\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m---> 75\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m request(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mget\u001b[39m\u001b[38;5;124m'\u001b[39m, url, params\u001b[38;5;241m=\u001b[39mparams, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\requests\\api.py:61\u001b[0m, in \u001b[0;36mrequest\u001b[1;34m(method, url, **kwargs)\u001b[0m\n\u001b[0;32m     57\u001b[0m \u001b[38;5;66;03m# By using the 'with' statement we are sure the session is closed, thus we\u001b[39;00m\n\u001b[0;32m     58\u001b[0m \u001b[38;5;66;03m# avoid leaving sockets open which can trigger a ResourceWarning in some\u001b[39;00m\n\u001b[0;32m     59\u001b[0m \u001b[38;5;66;03m# cases, and look like a memory leak in others.\u001b[39;00m\n\u001b[0;32m     60\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m sessions\u001b[38;5;241m.\u001b[39mSession() \u001b[38;5;28;01mas\u001b[39;00m session:\n\u001b[1;32m---> 61\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m session\u001b[38;5;241m.\u001b[39mrequest(method\u001b[38;5;241m=\u001b[39mmethod, url\u001b[38;5;241m=\u001b[39murl, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\requests\\sessions.py:529\u001b[0m, in \u001b[0;36mSession.request\u001b[1;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[0;32m    524\u001b[0m send_kwargs \u001b[38;5;241m=\u001b[39m {\n\u001b[0;32m    525\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtimeout\u001b[39m\u001b[38;5;124m'\u001b[39m: timeout,\n\u001b[0;32m    526\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mallow_redirects\u001b[39m\u001b[38;5;124m'\u001b[39m: allow_redirects,\n\u001b[0;32m    527\u001b[0m }\n\u001b[0;32m    528\u001b[0m send_kwargs\u001b[38;5;241m.\u001b[39mupdate(settings)\n\u001b[1;32m--> 529\u001b[0m resp \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msend(prep, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39msend_kwargs)\n\u001b[0;32m    531\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m resp\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\requests\\sessions.py:645\u001b[0m, in \u001b[0;36mSession.send\u001b[1;34m(self, request, **kwargs)\u001b[0m\n\u001b[0;32m    642\u001b[0m start \u001b[38;5;241m=\u001b[39m preferred_clock()\n\u001b[0;32m    644\u001b[0m \u001b[38;5;66;03m# Send the request\u001b[39;00m\n\u001b[1;32m--> 645\u001b[0m r \u001b[38;5;241m=\u001b[39m adapter\u001b[38;5;241m.\u001b[39msend(request, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    647\u001b[0m \u001b[38;5;66;03m# Total elapsed time of the request (approximately)\u001b[39;00m\n\u001b[0;32m    648\u001b[0m elapsed \u001b[38;5;241m=\u001b[39m preferred_clock() \u001b[38;5;241m-\u001b[39m start\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\requests\\adapters.py:440\u001b[0m, in \u001b[0;36mHTTPAdapter.send\u001b[1;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[0;32m    438\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    439\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m chunked:\n\u001b[1;32m--> 440\u001b[0m         resp \u001b[38;5;241m=\u001b[39m \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43murlopen\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    441\u001b[0m \u001b[43m            \u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    442\u001b[0m \u001b[43m            \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    443\u001b[0m \u001b[43m            \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    444\u001b[0m \u001b[43m            \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    445\u001b[0m \u001b[43m            \u001b[49m\u001b[43mredirect\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    446\u001b[0m \u001b[43m            \u001b[49m\u001b[43massert_same_host\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    447\u001b[0m \u001b[43m            \u001b[49m\u001b[43mpreload_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    448\u001b[0m \u001b[43m            \u001b[49m\u001b[43mdecode_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    449\u001b[0m \u001b[43m            \u001b[49m\u001b[43mretries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmax_retries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    450\u001b[0m \u001b[43m            \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\n\u001b[0;32m    451\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    453\u001b[0m     \u001b[38;5;66;03m# Send the request.\u001b[39;00m\n\u001b[0;32m    454\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    455\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(conn, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mproxy_pool\u001b[39m\u001b[38;5;124m'\u001b[39m):\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\urllib3\\connectionpool.py:699\u001b[0m, in \u001b[0;36mHTTPConnectionPool.urlopen\u001b[1;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\u001b[0m\n\u001b[0;32m    696\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_prepare_proxy(conn)\n\u001b[0;32m    698\u001b[0m \u001b[38;5;66;03m# Make the request on the httplib connection object.\u001b[39;00m\n\u001b[1;32m--> 699\u001b[0m httplib_response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    700\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconn\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    701\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    702\u001b[0m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    703\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    704\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    705\u001b[0m \u001b[43m    \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    706\u001b[0m \u001b[43m    \u001b[49m\u001b[43mchunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchunked\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    707\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    709\u001b[0m \u001b[38;5;66;03m# If we're going to release the connection in ``finally:``, then\u001b[39;00m\n\u001b[0;32m    710\u001b[0m \u001b[38;5;66;03m# the response doesn't need to know about the connection. Otherwise\u001b[39;00m\n\u001b[0;32m    711\u001b[0m \u001b[38;5;66;03m# it will also try to release it and we'll have a double-release\u001b[39;00m\n\u001b[0;32m    712\u001b[0m \u001b[38;5;66;03m# mess.\u001b[39;00m\n\u001b[0;32m    713\u001b[0m response_conn \u001b[38;5;241m=\u001b[39m conn \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m release_conn \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\urllib3\\connectionpool.py:445\u001b[0m, in \u001b[0;36mHTTPConnectionPool._make_request\u001b[1;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[0;32m    440\u001b[0m             httplib_response \u001b[38;5;241m=\u001b[39m conn\u001b[38;5;241m.\u001b[39mgetresponse()\n\u001b[0;32m    441\u001b[0m         \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mBaseException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    442\u001b[0m             \u001b[38;5;66;03m# Remove the TypeError from the exception chain in\u001b[39;00m\n\u001b[0;32m    443\u001b[0m             \u001b[38;5;66;03m# Python 3 (including for exceptions like SystemExit).\u001b[39;00m\n\u001b[0;32m    444\u001b[0m             \u001b[38;5;66;03m# Otherwise it looks like a bug in the code.\u001b[39;00m\n\u001b[1;32m--> 445\u001b[0m             \u001b[43msix\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mraise_from\u001b[49m\u001b[43m(\u001b[49m\u001b[43me\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[0;32m    446\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (SocketTimeout, BaseSSLError, SocketError) \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    447\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_raise_timeout(err\u001b[38;5;241m=\u001b[39me, url\u001b[38;5;241m=\u001b[39murl, timeout_value\u001b[38;5;241m=\u001b[39mread_timeout)\n",
      "File \u001b[1;32m<string>:3\u001b[0m, in \u001b[0;36mraise_from\u001b[1;34m(value, from_value)\u001b[0m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\urllib3\\connectionpool.py:440\u001b[0m, in \u001b[0;36mHTTPConnectionPool._make_request\u001b[1;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[0;32m    437\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m    438\u001b[0m     \u001b[38;5;66;03m# Python 3\u001b[39;00m\n\u001b[0;32m    439\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 440\u001b[0m         httplib_response \u001b[38;5;241m=\u001b[39m \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgetresponse\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    441\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mBaseException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    442\u001b[0m         \u001b[38;5;66;03m# Remove the TypeError from the exception chain in\u001b[39;00m\n\u001b[0;32m    443\u001b[0m         \u001b[38;5;66;03m# Python 3 (including for exceptions like SystemExit).\u001b[39;00m\n\u001b[0;32m    444\u001b[0m         \u001b[38;5;66;03m# Otherwise it looks like a bug in the code.\u001b[39;00m\n\u001b[0;32m    445\u001b[0m         six\u001b[38;5;241m.\u001b[39mraise_from(e, \u001b[38;5;28;01mNone\u001b[39;00m)\n",
      "File \u001b[1;32mc:\\conda\\lib\\http\\client.py:1371\u001b[0m, in \u001b[0;36mHTTPConnection.getresponse\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1369\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m   1370\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 1371\u001b[0m         \u001b[43mresponse\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbegin\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1372\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mConnectionError\u001b[39;00m:\n\u001b[0;32m   1373\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mclose()\n",
      "File \u001b[1;32mc:\\conda\\lib\\http\\client.py:319\u001b[0m, in \u001b[0;36mHTTPResponse.begin\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    317\u001b[0m \u001b[38;5;66;03m# read until we get a non-100 response\u001b[39;00m\n\u001b[0;32m    318\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m:\n\u001b[1;32m--> 319\u001b[0m     version, status, reason \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_read_status\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    320\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m status \u001b[38;5;241m!=\u001b[39m CONTINUE:\n\u001b[0;32m    321\u001b[0m         \u001b[38;5;28;01mbreak\u001b[39;00m\n",
      "File \u001b[1;32mc:\\conda\\lib\\http\\client.py:280\u001b[0m, in \u001b[0;36mHTTPResponse._read_status\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    279\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_read_status\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m--> 280\u001b[0m     line \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mreadline\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_MAXLINE\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124miso-8859-1\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    281\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(line) \u001b[38;5;241m>\u001b[39m _MAXLINE:\n\u001b[0;32m    282\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m LineTooLong(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstatus line\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32mc:\\conda\\lib\\socket.py:704\u001b[0m, in \u001b[0;36mSocketIO.readinto\u001b[1;34m(self, b)\u001b[0m\n\u001b[0;32m    702\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m:\n\u001b[0;32m    703\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 704\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrecv_into\u001b[49m\u001b[43m(\u001b[49m\u001b[43mb\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    705\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m timeout:\n\u001b[0;32m    706\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_timeout_occurred \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n",
      "File \u001b[1;32mc:\\conda\\lib\\ssl.py:1241\u001b[0m, in \u001b[0;36mSSLSocket.recv_into\u001b[1;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[0;32m   1237\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m flags \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m   1238\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1239\u001b[0m           \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnon-zero flags not allowed in calls to recv_into() on \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m\n\u001b[0;32m   1240\u001b[0m           \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m)\n\u001b[1;32m-> 1241\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnbytes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbuffer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1242\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1243\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39mrecv_into(buffer, nbytes, flags)\n",
      "File \u001b[1;32mc:\\conda\\lib\\ssl.py:1099\u001b[0m, in \u001b[0;36mSSLSocket.read\u001b[1;34m(self, len, buffer)\u001b[0m\n\u001b[0;32m   1097\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m   1098\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m buffer \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m-> 1099\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sslobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbuffer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1100\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1101\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_sslobj\u001b[38;5;241m.\u001b[39mread(\u001b[38;5;28mlen\u001b[39m)\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "for kpler_name, column_name in data.values:\n",
    "    print(f'getting data for {kpler_name}')\n",
    "    oow = fleet_metrics_client.get(\n",
    "        start_date = date(2021,1,1),\n",
    "        metric=FleetMetricsAlgo.LoadedVessels,\n",
    "        zones=[kpler_name],\n",
    "        unit=FleetMetricsMeasurementUnit.BBL,\n",
    "        period=FleetMetricsPeriod.Daily,\n",
    "        split=FleetMetricsSplit.Total,\n",
    "        products=['Crude/Co']\n",
    "    ).set_index('Date')\n",
    "    oow.columns =  [column_name]   \n",
    "    commercial = pd.concat([commercial, oow], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "6b08f55f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting data for Albania\n",
      "getting data for Algeria\n",
      "getting data for Angola\n",
      "getting data for Argentina\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[91], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m kpler_name, column_name \u001b[38;5;129;01min\u001b[39;00m data\u001b[38;5;241m.\u001b[39mvalues[:, \u001b[38;5;241m0\u001b[39m:\u001b[38;5;241m2\u001b[39m]:\n\u001b[0;32m      2\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgetting data for \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkpler_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m----> 3\u001b[0m     fs \u001b[38;5;241m=\u001b[39m \u001b[43mfleet_metrics_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m      4\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmetric\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFleetMetricsAlgo\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFloatingStorage\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      5\u001b[0m \u001b[43m        \u001b[49m\u001b[43mzones\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[43mkpler_name\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      6\u001b[0m \u001b[43m        \u001b[49m\u001b[43munit\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFleetMetricsMeasurementUnit\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mBBL\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      7\u001b[0m \u001b[43m        \u001b[49m\u001b[43mperiod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFleetMetricsPeriod\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mDaily\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      8\u001b[0m \u001b[43m        \u001b[49m\u001b[43msplit\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFleetMetricsSplit\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mTotal\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      9\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfloating_storage_duration_min\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m7\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m     10\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfloating_storage_duration_max\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43minf\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m     11\u001b[0m \u001b[43m        \u001b[49m\u001b[43mproducts\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mCrude/Co\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[0;32m     12\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mset_index(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m     13\u001b[0m     fs\u001b[38;5;241m.\u001b[39mcolumns \u001b[38;5;241m=\u001b[39m  [column_name]   \n\u001b[0;32m     14\u001b[0m     commercial \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mconcat([commercial, fs], axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\kpler\\sdk\\resources\\fleet_metrics.py:102\u001b[0m, in \u001b[0;36mFleetMetrics.get\u001b[1;34m(self, start_date, end_date, zones, metric, period, floating_storage_duration_min, floating_storage_duration_max, products, unit, split, with_freight_view, vessel_types, vessel_types_alt)\u001b[0m\n\u001b[0;32m     48\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m     49\u001b[0m \u001b[38;5;124;03mArgs:\u001b[39;00m\n\u001b[0;32m     50\u001b[0m \u001b[38;5;124;03m    start_date: Optional[date] Start of the period (YYYY-MM-DD)\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     84\u001b[0m \u001b[38;5;124;03m        \"..\",\"..\",\"..\",\"..\",\"..\",\"..\",\"..\",\"..\",\"..\",\"..\",\"..\"\u001b[39;00m\n\u001b[0;32m     85\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m     87\u001b[0m query_parameters \u001b[38;5;241m=\u001b[39m {\n\u001b[0;32m     88\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstartDate\u001b[39m\u001b[38;5;124m\"\u001b[39m: process_date_parameter(start_date),\n\u001b[0;32m     89\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mendDate\u001b[39m\u001b[38;5;124m\"\u001b[39m: process_date_parameter(end_date),\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    100\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvesselTypesAlt\u001b[39m\u001b[38;5;124m\"\u001b[39m: process_enum_parameters(vessel_types_alt, to_lower_case\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m),\n\u001b[0;32m    101\u001b[0m }\n\u001b[1;32m--> 102\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_dataframe\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mRESOURCE_NAME\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mquery_parameters\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\kpler\\sdk\\client.py:126\u001b[0m, in \u001b[0;36mKplerClient._get_dataframe\u001b[1;34m(self, resource, params, header_parameters)\u001b[0m\n\u001b[0;32m    122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m RestrictedPlatformException(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mavailable_platforms)\n\u001b[0;32m    124\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalidate()\n\u001b[1;32m--> 126\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_raw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresource\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparams\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    127\u001b[0m content: \u001b[38;5;28mbytes\u001b[39m \u001b[38;5;241m=\u001b[39m response\u001b[38;5;241m.\u001b[39mcontent\n\u001b[0;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\kpler\\sdk\\client.py:98\u001b[0m, in \u001b[0;36mKplerClient._get_raw\u001b[1;34m(self, resource, params)\u001b[0m\n\u001b[0;32m     95\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumn_ids:\n\u001b[0;32m     96\u001b[0m     headers[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX-use-columns-ids-headers\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m---> 98\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[43mrequests\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m     99\u001b[0m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    100\u001b[0m \u001b[43m    \u001b[49m\u001b[43mparams\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparams\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# type: ignore\u001b[39;49;00m\n\u001b[0;32m    101\u001b[0m \u001b[43m    \u001b[49m\u001b[43mauth\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mHTTPBasicAuth\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconfiguration\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43memail\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconfiguration\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpassword\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    102\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    103\u001b[0m \u001b[43m    \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    104\u001b[0m \u001b[43m    \u001b[49m\u001b[43mproxies\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconfiguration\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mproxies\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    105\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconfiguration\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcertificates\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43mverify\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconfiguration\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mverify\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    107\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    108\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m response\u001b[38;5;241m.\u001b[39mstatus_code \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m200\u001b[39m:\n\u001b[0;32m    109\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m response\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\requests\\api.py:75\u001b[0m, in \u001b[0;36mget\u001b[1;34m(url, params, **kwargs)\u001b[0m\n\u001b[0;32m     64\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget\u001b[39m(url, params\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m     65\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124;03m\"\"\"Sends a GET request.\u001b[39;00m\n\u001b[0;32m     66\u001b[0m \n\u001b[0;32m     67\u001b[0m \u001b[38;5;124;03m    :param url: URL for the new :class:`Request` object.\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     72\u001b[0m \u001b[38;5;124;03m    :rtype: requests.Response\u001b[39;00m\n\u001b[0;32m     73\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m---> 75\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m request(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mget\u001b[39m\u001b[38;5;124m'\u001b[39m, url, params\u001b[38;5;241m=\u001b[39mparams, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\requests\\api.py:61\u001b[0m, in \u001b[0;36mrequest\u001b[1;34m(method, url, **kwargs)\u001b[0m\n\u001b[0;32m     57\u001b[0m \u001b[38;5;66;03m# By using the 'with' statement we are sure the session is closed, thus we\u001b[39;00m\n\u001b[0;32m     58\u001b[0m \u001b[38;5;66;03m# avoid leaving sockets open which can trigger a ResourceWarning in some\u001b[39;00m\n\u001b[0;32m     59\u001b[0m \u001b[38;5;66;03m# cases, and look like a memory leak in others.\u001b[39;00m\n\u001b[0;32m     60\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m sessions\u001b[38;5;241m.\u001b[39mSession() \u001b[38;5;28;01mas\u001b[39;00m session:\n\u001b[1;32m---> 61\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m session\u001b[38;5;241m.\u001b[39mrequest(method\u001b[38;5;241m=\u001b[39mmethod, url\u001b[38;5;241m=\u001b[39murl, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\requests\\sessions.py:529\u001b[0m, in \u001b[0;36mSession.request\u001b[1;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[0;32m    524\u001b[0m send_kwargs \u001b[38;5;241m=\u001b[39m {\n\u001b[0;32m    525\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtimeout\u001b[39m\u001b[38;5;124m'\u001b[39m: timeout,\n\u001b[0;32m    526\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mallow_redirects\u001b[39m\u001b[38;5;124m'\u001b[39m: allow_redirects,\n\u001b[0;32m    527\u001b[0m }\n\u001b[0;32m    528\u001b[0m send_kwargs\u001b[38;5;241m.\u001b[39mupdate(settings)\n\u001b[1;32m--> 529\u001b[0m resp \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msend(prep, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39msend_kwargs)\n\u001b[0;32m    531\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m resp\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\requests\\sessions.py:645\u001b[0m, in \u001b[0;36mSession.send\u001b[1;34m(self, request, **kwargs)\u001b[0m\n\u001b[0;32m    642\u001b[0m start \u001b[38;5;241m=\u001b[39m preferred_clock()\n\u001b[0;32m    644\u001b[0m \u001b[38;5;66;03m# Send the request\u001b[39;00m\n\u001b[1;32m--> 645\u001b[0m r \u001b[38;5;241m=\u001b[39m adapter\u001b[38;5;241m.\u001b[39msend(request, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    647\u001b[0m \u001b[38;5;66;03m# Total elapsed time of the request (approximately)\u001b[39;00m\n\u001b[0;32m    648\u001b[0m elapsed \u001b[38;5;241m=\u001b[39m preferred_clock() \u001b[38;5;241m-\u001b[39m start\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\requests\\adapters.py:440\u001b[0m, in \u001b[0;36mHTTPAdapter.send\u001b[1;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[0;32m    438\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    439\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m chunked:\n\u001b[1;32m--> 440\u001b[0m         resp \u001b[38;5;241m=\u001b[39m \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43murlopen\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    441\u001b[0m \u001b[43m            \u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    442\u001b[0m \u001b[43m            \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    443\u001b[0m \u001b[43m            \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    444\u001b[0m \u001b[43m            \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    445\u001b[0m \u001b[43m            \u001b[49m\u001b[43mredirect\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    446\u001b[0m \u001b[43m            \u001b[49m\u001b[43massert_same_host\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    447\u001b[0m \u001b[43m            \u001b[49m\u001b[43mpreload_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    448\u001b[0m \u001b[43m            \u001b[49m\u001b[43mdecode_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    449\u001b[0m \u001b[43m            \u001b[49m\u001b[43mretries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmax_retries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    450\u001b[0m \u001b[43m            \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\n\u001b[0;32m    451\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    453\u001b[0m     \u001b[38;5;66;03m# Send the request.\u001b[39;00m\n\u001b[0;32m    454\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    455\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(conn, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mproxy_pool\u001b[39m\u001b[38;5;124m'\u001b[39m):\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\urllib3\\connectionpool.py:699\u001b[0m, in \u001b[0;36mHTTPConnectionPool.urlopen\u001b[1;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\u001b[0m\n\u001b[0;32m    696\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_prepare_proxy(conn)\n\u001b[0;32m    698\u001b[0m \u001b[38;5;66;03m# Make the request on the httplib connection object.\u001b[39;00m\n\u001b[1;32m--> 699\u001b[0m httplib_response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    700\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconn\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    701\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    702\u001b[0m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    703\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    704\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    705\u001b[0m \u001b[43m    \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    706\u001b[0m \u001b[43m    \u001b[49m\u001b[43mchunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchunked\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    707\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    709\u001b[0m \u001b[38;5;66;03m# If we're going to release the connection in ``finally:``, then\u001b[39;00m\n\u001b[0;32m    710\u001b[0m \u001b[38;5;66;03m# the response doesn't need to know about the connection. Otherwise\u001b[39;00m\n\u001b[0;32m    711\u001b[0m \u001b[38;5;66;03m# it will also try to release it and we'll have a double-release\u001b[39;00m\n\u001b[0;32m    712\u001b[0m \u001b[38;5;66;03m# mess.\u001b[39;00m\n\u001b[0;32m    713\u001b[0m response_conn \u001b[38;5;241m=\u001b[39m conn \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m release_conn \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\urllib3\\connectionpool.py:445\u001b[0m, in \u001b[0;36mHTTPConnectionPool._make_request\u001b[1;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[0;32m    440\u001b[0m             httplib_response \u001b[38;5;241m=\u001b[39m conn\u001b[38;5;241m.\u001b[39mgetresponse()\n\u001b[0;32m    441\u001b[0m         \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mBaseException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    442\u001b[0m             \u001b[38;5;66;03m# Remove the TypeError from the exception chain in\u001b[39;00m\n\u001b[0;32m    443\u001b[0m             \u001b[38;5;66;03m# Python 3 (including for exceptions like SystemExit).\u001b[39;00m\n\u001b[0;32m    444\u001b[0m             \u001b[38;5;66;03m# Otherwise it looks like a bug in the code.\u001b[39;00m\n\u001b[1;32m--> 445\u001b[0m             \u001b[43msix\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mraise_from\u001b[49m\u001b[43m(\u001b[49m\u001b[43me\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[0;32m    446\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (SocketTimeout, BaseSSLError, SocketError) \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    447\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_raise_timeout(err\u001b[38;5;241m=\u001b[39me, url\u001b[38;5;241m=\u001b[39murl, timeout_value\u001b[38;5;241m=\u001b[39mread_timeout)\n",
      "File \u001b[1;32m<string>:3\u001b[0m, in \u001b[0;36mraise_from\u001b[1;34m(value, from_value)\u001b[0m\n",
      "File \u001b[1;32mc:\\conda\\lib\\site-packages\\urllib3\\connectionpool.py:440\u001b[0m, in \u001b[0;36mHTTPConnectionPool._make_request\u001b[1;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[0;32m    437\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m    438\u001b[0m     \u001b[38;5;66;03m# Python 3\u001b[39;00m\n\u001b[0;32m    439\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 440\u001b[0m         httplib_response \u001b[38;5;241m=\u001b[39m \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgetresponse\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    441\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mBaseException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    442\u001b[0m         \u001b[38;5;66;03m# Remove the TypeError from the exception chain in\u001b[39;00m\n\u001b[0;32m    443\u001b[0m         \u001b[38;5;66;03m# Python 3 (including for exceptions like SystemExit).\u001b[39;00m\n\u001b[0;32m    444\u001b[0m         \u001b[38;5;66;03m# Otherwise it looks like a bug in the code.\u001b[39;00m\n\u001b[0;32m    445\u001b[0m         six\u001b[38;5;241m.\u001b[39mraise_from(e, \u001b[38;5;28;01mNone\u001b[39;00m)\n",
      "File \u001b[1;32mc:\\conda\\lib\\http\\client.py:1371\u001b[0m, in \u001b[0;36mHTTPConnection.getresponse\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1369\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m   1370\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 1371\u001b[0m         \u001b[43mresponse\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbegin\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1372\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mConnectionError\u001b[39;00m:\n\u001b[0;32m   1373\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mclose()\n",
      "File \u001b[1;32mc:\\conda\\lib\\http\\client.py:319\u001b[0m, in \u001b[0;36mHTTPResponse.begin\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    317\u001b[0m \u001b[38;5;66;03m# read until we get a non-100 response\u001b[39;00m\n\u001b[0;32m    318\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m:\n\u001b[1;32m--> 319\u001b[0m     version, status, reason \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_read_status\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    320\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m status \u001b[38;5;241m!=\u001b[39m CONTINUE:\n\u001b[0;32m    321\u001b[0m         \u001b[38;5;28;01mbreak\u001b[39;00m\n",
      "File \u001b[1;32mc:\\conda\\lib\\http\\client.py:280\u001b[0m, in \u001b[0;36mHTTPResponse._read_status\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    279\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_read_status\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m--> 280\u001b[0m     line \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mreadline\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_MAXLINE\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124miso-8859-1\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    281\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(line) \u001b[38;5;241m>\u001b[39m _MAXLINE:\n\u001b[0;32m    282\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m LineTooLong(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstatus line\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32mc:\\conda\\lib\\socket.py:704\u001b[0m, in \u001b[0;36mSocketIO.readinto\u001b[1;34m(self, b)\u001b[0m\n\u001b[0;32m    702\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m:\n\u001b[0;32m    703\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 704\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrecv_into\u001b[49m\u001b[43m(\u001b[49m\u001b[43mb\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    705\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m timeout:\n\u001b[0;32m    706\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_timeout_occurred \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n",
      "File \u001b[1;32mc:\\conda\\lib\\ssl.py:1241\u001b[0m, in \u001b[0;36mSSLSocket.recv_into\u001b[1;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[0;32m   1237\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m flags \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m   1238\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1239\u001b[0m           \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnon-zero flags not allowed in calls to recv_into() on \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m\n\u001b[0;32m   1240\u001b[0m           \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m)\n\u001b[1;32m-> 1241\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnbytes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbuffer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1242\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1243\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39mrecv_into(buffer, nbytes, flags)\n",
      "File \u001b[1;32mc:\\conda\\lib\\ssl.py:1099\u001b[0m, in \u001b[0;36mSSLSocket.read\u001b[1;34m(self, len, buffer)\u001b[0m\n\u001b[0;32m   1097\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m   1098\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m buffer \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m-> 1099\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sslobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbuffer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1100\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1101\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_sslobj\u001b[38;5;241m.\u001b[39mread(\u001b[38;5;28mlen\u001b[39m)\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "for kpler_name, column_name in data.values[:, 0:2]:\n",
    "    print(f'getting data for {kpler_name}')\n",
    "    fs = fleet_metrics_client.get(\n",
    "        metric=FleetMetricsAlgo.FloatingStorage,\n",
    "        zones=[kpler_name],\n",
    "        unit=FleetMetricsMeasurementUnit.BBL,\n",
    "        period=FleetMetricsPeriod.Daily,\n",
    "        split=FleetMetricsSplit.Total,\n",
    "        floating_storage_duration_min='7',\n",
    "        floating_storage_duration_max='inf',\n",
    "        products=['Crude/Co']\n",
    "    ).set_index('Date')\n",
    "    fs.columns =  [column_name]   \n",
    "    commercial = pd.concat([commercial, fs], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "db3b1161",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "inventories = inventories_client.get(\n",
    "        start_date=date(2017,1,1),\n",
    "        end_date=pd.Timestamp.now(),\n",
    "        zones=['Cushing'],\n",
    "        split=InventoriesSplit.ByTankType\n",
    "        )\n",
    "both = inventories.set_index('Date')[['Level (kb)']].astype(float).sum(axis=1) / 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "5fab0875",
   "metadata": {},
   "outputs": [],
   "source": [
    "cushing =  inventories.set_index('Date')[['Relative Fill Level']].astype(float).sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "27b6a7f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "2017-01-01    0.785\n",
       "2017-01-02    0.785\n",
       "2017-01-03    0.785\n",
       "2017-01-04    0.785\n",
       "2017-01-05    0.785\n",
       "              ...  \n",
       "2024-07-04    0.448\n",
       "2024-07-05    0.448\n",
       "2024-07-06    0.448\n",
       "2024-07-07    0.448\n",
       "2024-07-08    0.448\n",
       "Length: 2746, dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cushing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "83243eb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2017-01-01    0.785\n",
       "2017-01-02    0.785\n",
       "2017-01-03    0.785\n",
       "2017-01-04    0.785\n",
       "2017-01-05    0.785\n",
       "              ...  \n",
       "2024-07-04    0.448\n",
       "2024-07-05    0.448\n",
       "2024-07-06    0.448\n",
       "2024-07-07    0.448\n",
       "2024-07-08    0.448\n",
       "Name: crude.kpler.cushing.inventories.utilization, Length: 1105, dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tsa.update('crude.kpler.cushing.inventories.utilization',cushing, 'Shrey Agarwal')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cc399104",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "7525d017",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_country = pd.read_excel('S:/~Analysis Department/crude/fleet_metrics/kpler_map.xlsx', sheet_name='inventories_country')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "857a8b56",
   "metadata": {},
   "outputs": [],
   "source": [
    "def inventories_by_region():\n",
    "    both_region = pd.DataFrame()\n",
    "    data = data_country.dropna()\n",
    "    for region in data['Trading Region'].unique():\n",
    "        data_new = data.loc[data['Trading Region'] == region]\n",
    "        kpler_name = data_new['Country'].to_list()\n",
    "        print(f'getting data for {region}')\n",
    "        inventories = inventories_client.get(\n",
    "            start_date=date(2017, 1, 1),\n",
    "            end_date=pd.Timestamp.now(),\n",
    "            zones=kpler_name,\n",
    "            split=InventoriesSplit.Total\n",
    "        ).set_index('Date')[['Level (kb)']].astype(float).sum(axis=1) / 1000\n",
    "        inventory = inventories.to_frame()\n",
    "        inventory.columns = [region]\n",
    "        both_region = pd.concat([both_region, inventory], axis=1)\n",
    "    return both_region"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ddb2bbc5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting data for MED Non OECD\n",
      "getting data for WAF\n",
      "getting data for Other LatAm\n",
      "getting data for ANZ\n",
      "getting data for MED OECD\n",
      "getting data for FSU\n",
      "getting data for Middle East\n",
      "getting data for Other Asia\n",
      "getting data for NWE\n",
      "getting data for EAF\n",
      "getting data for Eastern Asia\n",
      "getting data for South-Central Asia\n",
      "getting data for JKT\n",
      "getting data for SAF\n"
     ]
    }
   ],
   "source": [
    "gg = inventories_by_region()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c195f43d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_onfs = pd.read_excel('S:/~Analysis Department/crude/fleet_metrics/kpler_map.xlsx', sheet_name='onfs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d4148b8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data_onfs.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "d6976555",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>kpler_name</th>\n",
       "      <th>column_name</th>\n",
       "      <th>Crude Trading Region</th>\n",
       "      <th>OPEC</th>\n",
       "      <th>Crude EoS/WoS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Albania</td>\n",
       "      <td>Albania</td>\n",
       "      <td>MED Non OECD</td>\n",
       "      <td>Non OPEC</td>\n",
       "      <td>WoS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>MED Non OECD</td>\n",
       "      <td>OPEC</td>\n",
       "      <td>WoS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Angola</td>\n",
       "      <td>WAF</td>\n",
       "      <td>OPEC</td>\n",
       "      <td>WoS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>Other LatAm</td>\n",
       "      <td>Non OPEC</td>\n",
       "      <td>WoS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>Aruba</td>\n",
       "      <td>Other LatAm</td>\n",
       "      <td>Non OPEC</td>\n",
       "      <td>WoS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>United States Virgin Islands</td>\n",
       "      <td>United States Virgin Islands</td>\n",
       "      <td>Other LatAm</td>\n",
       "      <td>Non OPEC</td>\n",
       "      <td>WoS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>Yemen</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>Middle East</td>\n",
       "      <td>Non OPEC</td>\n",
       "      <td>EoS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>French Antilles</td>\n",
       "      <td>French Antilles</td>\n",
       "      <td>Other LatAm</td>\n",
       "      <td>Non OPEC</td>\n",
       "      <td>WoS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>Saudi-Kuwaiti Neutral Zone</td>\n",
       "      <td>Saudi-Kuwaiti Neutral Zone</td>\n",
       "      <td>Middle East</td>\n",
       "      <td>OPEC</td>\n",
       "      <td>EoS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>Sint Eustatius</td>\n",
       "      <td>Sint Eustatius</td>\n",
       "      <td>Other LatAm</td>\n",
       "      <td>Non OPEC</td>\n",
       "      <td>WoS</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>129 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       kpler_name                   column_name  \\\n",
       "0                         Albania                       Albania   \n",
       "1                         Algeria                       Algeria   \n",
       "2                          Angola                        Angola   \n",
       "3                       Argentina                     Argentina   \n",
       "4                           Aruba                         Aruba   \n",
       "..                            ...                           ...   \n",
       "132  United States Virgin Islands  United States Virgin Islands   \n",
       "133                         Yemen                         Yemen   \n",
       "134               French Antilles               French Antilles   \n",
       "135    Saudi-Kuwaiti Neutral Zone    Saudi-Kuwaiti Neutral Zone   \n",
       "136                Sint Eustatius                Sint Eustatius   \n",
       "\n",
       "    Crude Trading Region      OPEC Crude EoS/WoS  \n",
       "0           MED Non OECD  Non OPEC           WoS  \n",
       "1           MED Non OECD      OPEC           WoS  \n",
       "2                    WAF      OPEC           WoS  \n",
       "3            Other LatAm  Non OPEC           WoS  \n",
       "4            Other LatAm  Non OPEC           WoS  \n",
       "..                   ...       ...           ...  \n",
       "132          Other LatAm  Non OPEC           WoS  \n",
       "133          Middle East  Non OPEC           EoS  \n",
       "134          Other LatAm  Non OPEC           WoS  \n",
       "135          Middle East      OPEC           EoS  \n",
       "136          Other LatAm  Non OPEC           WoS  \n",
       "\n",
       "[129 rows x 5 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c07a08fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['MED Non OECD', 'WAF', 'Other LatAm', 'ANZ', 'MED OECD', 'FSU',\n",
       "       'Middle East', 'Other Asia', 'NWE', 'EAF', 'Eastern Asia',\n",
       "       'South-Central Asia', 'JKT', 'SAF'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "983dec7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting data for MED Non OECD\n",
      "getting data for WAF\n",
      "getting data for Other LatAm\n",
      "getting data for ANZ\n",
      "getting data for MED OECD\n",
      "getting data for FSU\n",
      "getting data for Middle East\n",
      "getting data for Other Asia\n",
      "getting data for NWE\n",
      "getting data for nan\n",
      "getting data for EAF\n",
      "getting data for Eastern Asia\n",
      "getting data for South-Central Asia\n",
      "getting data for JKT\n",
      "getting data for SAF\n"
     ]
    }
   ],
   "source": [
    "for region in data_country['Trading Region'].unique():\n",
    "        data_new = data_country.loc[data_country['Trading Region'] == region]\n",
    "        kpler_name = data_new['Country'].to_list()\n",
    "        print(f'getting data for {region}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0e59743e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def inventories_get() :  \n",
    "    both_country = pd.DataFrame()\n",
    "    commercial_country = pd.DataFrame()\n",
    "    refinery_country = pd.DataFrame()\n",
    "    for country in data_map['country_both']:\n",
    "        print(f'getting data for {country}')\n",
    "        inventories = inventories_client.get(\n",
    "            start_date=date(2024,1,1),\n",
    "            end_date=pd.Timestamp.now(),\n",
    "            zones=[country],\n",
    "            split=InventoriesSplit.ByTankType\n",
    "        )\n",
    "        both = inventories.set_index('Date')[['Commercial', 'Refinery']].astype(float).sum(axis=1) / 1000\n",
    "        both.columns = [country]\n",
    "        both_country = pd.concat([both_country, both], axis=1)\n",
    "\n",
    "    for country in data_map['country_commercial']:\n",
    "        print(f'getting data for {country}')\n",
    "        if pd.isna(country):\n",
    "             pass\n",
    "        inventories = inventories_client.get(\n",
    "            start_date=date(2024,1,1),\n",
    "            end_date=pd.Timestamp.now(),\n",
    "            zones=[country],\n",
    "            split=InventoriesSplit.ByTankType\n",
    "        )\n",
    "        commercial = inventories.set_index('Date')[['Commercial']].astype(float).sum(axis=1) / 1000\n",
    "        commercial.columns = [country]\n",
    "        commercial_country = pd.concat([commercial_country, commercial], axis=1)\n",
    "\n",
    "    for country in data_map['country_refinery']:\n",
    "        print(f'getting data for {country}')\n",
    "        if pd.isna(country):\n",
    "             pass\n",
    "        inventories = inventories_client.get(\n",
    "            start_date=date(2024,1,1),\n",
    "            end_date=pd.Timestamp.now(),\n",
    "            zones=[country],\n",
    "            split=InventoriesSplit.ByTankType\n",
    "        )\n",
    "        refinery = inventories.set_index('Date')[['Refinery']].astype(float).sum(axis=1) / 1000\n",
    "        refinery.columns = [country]\n",
    "        refinery_country = pd.concat([refinery_country, refinery], axis=1)\n",
    "    final = pd.concat([both_country, commercial_country, refinery_country], axis=1)\n",
    "    return final\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b4e086ba",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'data_map' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[18], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m trial \u001b[38;5;241m=\u001b[39m \u001b[43minventories_get\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[1;32mIn[17], line 5\u001b[0m, in \u001b[0;36minventories_get\u001b[1;34m()\u001b[0m\n\u001b[0;32m      3\u001b[0m commercial_country \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame()\n\u001b[0;32m      4\u001b[0m refinery_country \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame()\n\u001b[1;32m----> 5\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m country \u001b[38;5;129;01min\u001b[39;00m \u001b[43mdata_map\u001b[49m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcountry_both\u001b[39m\u001b[38;5;124m'\u001b[39m]:\n\u001b[0;32m      6\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgetting data for \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcountry\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      7\u001b[0m     inventories \u001b[38;5;241m=\u001b[39m inventories_client\u001b[38;5;241m.\u001b[39mget(\n\u001b[0;32m      8\u001b[0m         start_date\u001b[38;5;241m=\u001b[39mdate(\u001b[38;5;241m2024\u001b[39m,\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m1\u001b[39m),\n\u001b[0;32m      9\u001b[0m         end_date\u001b[38;5;241m=\u001b[39mpd\u001b[38;5;241m.\u001b[39mTimestamp\u001b[38;5;241m.\u001b[39mnow(),\n\u001b[0;32m     10\u001b[0m         zones\u001b[38;5;241m=\u001b[39m[country],\n\u001b[0;32m     11\u001b[0m         split\u001b[38;5;241m=\u001b[39mInventoriesSplit\u001b[38;5;241m.\u001b[39mByTankType\n\u001b[0;32m     12\u001b[0m     )\n",
      "\u001b[1;31mNameError\u001b[0m: name 'data_map' is not defined"
     ]
    }
   ],
   "source": [
    "trial = inventories_get()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "46a0f6ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "def kpler_list():\n",
    "    for region in data['Crude Trading Region']:\n",
    "         data_new = data.loc[data['Crude Trading Region']== region]\n",
    "         return data_new.kpler_name.to_list(), data_new.column_name.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "4b33910b",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_onfs = pd.read_excel('S:/~Analysis Department/crude/fleet_metrics/kpler_map.xlsx', sheet_name='onfs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "11d10db5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting data for WoS\n",
      "getting data for EoS\n"
     ]
    }
   ],
   "source": [
    "\n",
    "     for region in data_oow['Crude EoS/WoS'].unique():\n",
    "         data_new = data_oow.loc[data_oow['Crude EoS/WoS']== region]\n",
    "         kpler_name = data_new['Current Sea'].to_list()\n",
    "         print(f'getting data for {region}')\n",
    "         oow = fleet_metrics_client.get(\n",
    "            start_date=date(2019, 1, 1),\n",
    "            metric=FleetMetricsAlgo.LoadedVessels,\n",
    "            zones= kpler_name,\n",
    "            unit=FleetMetricsMeasurementUnit.BBL,\n",
    "            period=FleetMetricsPeriod.Daily,\n",
    "            split=FleetMetricsSplit.Total,\n",
    "            products=['Crude/Co']\n",
    "         ).set_index('Date').astype(float) / 1000\n",
    "         oow.columns = [region]   \n",
    "         commercial = pd.concat([commercial, oow], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "a34e987a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Date'>"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "commercial.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "a21a2ca5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-01</th>\n",
       "      <td>748963.75371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-02</th>\n",
       "      <td>732865.68172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-03</th>\n",
       "      <td>715943.58795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-04</th>\n",
       "      <td>724246.17564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-05</th>\n",
       "      <td>722373.97578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-05</th>\n",
       "      <td>686383.09475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-06</th>\n",
       "      <td>674460.21160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-07</th>\n",
       "      <td>673530.61534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-08</th>\n",
       "      <td>676450.13155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-09</th>\n",
       "      <td>681847.93377</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1926 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Total\n",
       "Date                    \n",
       "2019-01-01  748963.75371\n",
       "2019-01-02  732865.68172\n",
       "2019-01-03  715943.58795\n",
       "2019-01-04  724246.17564\n",
       "2019-01-05  722373.97578\n",
       "...                  ...\n",
       "2024-04-05  686383.09475\n",
       "2024-04-06  674460.21160\n",
       "2024-04-07  673530.61534\n",
       "2024-04-08  676450.13155\n",
       "2024-04-09  681847.93377\n",
       "\n",
       "[1926 rows x 1 columns]"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "08a3c53b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Arabian Sea',\n",
       " 'Banda Arafura Timor Sea',\n",
       " 'Bay of Bengal',\n",
       " 'Celebes Sea',\n",
       " 'Central Indian Ocean',\n",
       " 'Central West Pacific Ocean',\n",
       " 'Coral Sea',\n",
       " 'East Indian Ocean',\n",
       " 'East Siberian Sea',\n",
       " 'Eastern China Sea',\n",
       " 'Gulf of Oman',\n",
       " 'Gulf of Thailand',\n",
       " 'Japan Sea',\n",
       " 'Java Sea',\n",
       " 'Laptev Sea',\n",
       " 'Makassar Strait',\n",
       " 'Malacca Strait',\n",
       " 'Mideast Gulf',\n",
       " 'North West Pacific Ocean',\n",
       " 'Philippine Sea',\n",
       " 'Red Sea',\n",
       " 'Singapore Strait',\n",
       " 'South China Sea',\n",
       " 'South West Pacific Ocean',\n",
       " 'Sulu Sea',\n",
       " 'Sundra Strait',\n",
       " 'West Indian Ocean',\n",
       " 'Yangtze river',\n",
       " 'Yellow Sea']"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kpler_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "c78308ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WoS</th>\n",
       "      <th>EoS</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-01</th>\n",
       "      <td>400000.50</td>\n",
       "      <td>400000.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-02</th>\n",
       "      <td>400000.50</td>\n",
       "      <td>400000.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-03</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-04</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-05</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-04</th>\n",
       "      <td>1544651.68</td>\n",
       "      <td>1544651.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-05</th>\n",
       "      <td>1684191.13</td>\n",
       "      <td>1684191.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-06</th>\n",
       "      <td>1544651.68</td>\n",
       "      <td>1544651.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-07</th>\n",
       "      <td>1544651.68</td>\n",
       "      <td>1544651.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-08</th>\n",
       "      <td>1544651.68</td>\n",
       "      <td>1544651.68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3021 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   WoS         EoS\n",
       "Date                              \n",
       "2016-01-01   400000.50   400000.50\n",
       "2016-01-02   400000.50   400000.50\n",
       "2016-01-03        0.00        0.00\n",
       "2016-01-04        0.00        0.00\n",
       "2016-01-05        0.00        0.00\n",
       "...                ...         ...\n",
       "2024-04-04  1544651.68  1544651.68\n",
       "2024-04-05  1684191.13  1684191.13\n",
       "2024-04-06  1544651.68  1544651.68\n",
       "2024-04-07  1544651.68  1544651.68\n",
       "2024-04-08  1544651.68  1544651.68\n",
       "\n",
       "[3021 rows x 2 columns]"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regional"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "c39b8179",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MED Non OECD\n",
      "WAF\n",
      "LatAm\n",
      "ANZ\n",
      "MED OECD\n",
      "FSU\n",
      "Middle East\n",
      "Other Asia\n",
      "NWE\n",
      "Brazil\n",
      "Canada\n",
      "EAF\n",
      "China\n",
      "India\n",
      "JKT\n",
      "Mexico\n",
      "SAF\n",
      "Russia\n",
      "US\n",
      "Venezuela\n"
     ]
    }
   ],
   "source": [
    "for region in data_map['Crude Trading Region'].unique():\n",
    "    print(region)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "e4be3402",
   "metadata": {},
   "outputs": [],
   "source": [
    "fs = fleet_metrics_client.get(\n",
    "         metric=FleetMetricsAlgo.FloatingStorage,\n",
    "         zones=['Angola', 'China'],\n",
    "         unit=FleetMetricsMeasurementUnit.BBL,\n",
    "         period=FleetMetricsPeriod.Daily,\n",
    "         split=FleetMetricsSplit.Total,\n",
    "         floating_storage_duration_min='7',\n",
    "         floating_storage_duration_max='inf',\n",
    "         products=['Crude/Co']\n",
    "         ).set_index('Date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "dff4a68e",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "cannot assign to function call (4142776070.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[112], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    for kpler_name.to_list(), column_name.to_list() in data_new:\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m cannot assign to function call\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for kpler_name.to_list(), column_name.to_list() in data_new:\n",
    "    print(kpler_name.to_list())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f27098c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('kpler_map_inventories.csv')\n",
    "inventories_client = Inventories(config)\n",
    "\n",
    "for kpler_name, ff in data.values:\n",
    "    print(f'getting data for {kpler_name}')\n",
    "    inventories = inventories_client.get(\n",
    "        start_date=date(2017,1,1),\n",
    "        end_date=pd.Timestamp.now(),\n",
    "        zones= kpler_name,\n",
    "        split=InventoriesSplit.ByTankType\n",
    "    ).set_index('Date')[['commercial and refinery']].astype(float).sum(axis=1) / 1000\n",
    "    commercial = pd.concat([commercial, inventories])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "e115e47c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-01-01</th>\n",
       "      <td>8.919435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-02</th>\n",
       "      <td>8.919435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-03</th>\n",
       "      <td>8.955401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-04</th>\n",
       "      <td>9.190219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-05</th>\n",
       "      <td>9.190219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-04</th>\n",
       "      <td>2.077179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-05</th>\n",
       "      <td>2.077179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-06</th>\n",
       "      <td>2.077179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-07</th>\n",
       "      <td>2.077179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-08</th>\n",
       "      <td>2.077179</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7965 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   0\n",
       "2017-01-01  8.919435\n",
       "2017-01-02  8.919435\n",
       "2017-01-03  8.955401\n",
       "2017-01-04  9.190219\n",
       "2017-01-05  9.190219\n",
       "...              ...\n",
       "2024-04-04  2.077179\n",
       "2024-04-05  2.077179\n",
       "2024-04-06  2.077179\n",
       "2024-04-07  2.077179\n",
       "2024-04-08  2.077179\n",
       "\n",
       "[7965 rows x 1 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "commercial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3651a110",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "2017-01-01    3.441766\n",
       "2017-01-02    3.441766\n",
       "2017-01-03    3.441766\n",
       "2017-01-04    4.190895\n",
       "2017-01-05    4.190895\n",
       "                ...   \n",
       "2024-04-04    3.716668\n",
       "2024-04-05    3.716668\n",
       "2024-04-06    3.716668\n",
       "2024-04-07    3.716668\n",
       "2024-04-08    3.716668\n",
       "Length: 2655, dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inventories.set_index('Date')[['Commercial', 'Refinery']].astype(float).sum(axis=1) / 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "c721f813",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_tsa(name, new_name, start, end):\n",
    "    df = pd.DataFrame(tsa.get(name))\n",
    "    df = df.rename(columns={name: new_name})\n",
    "    sliced_df = df.loc[start:end]\n",
    "    return sliced_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "ea600d97",
   "metadata": {},
   "outputs": [],
   "source": [
    "start = '2015-01-01'\n",
    "end = '2024-2-14'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "46293153",
   "metadata": {},
   "outputs": [],
   "source": [
    "runs = get_tsa('crude.kpler.venezuela.exports.kbd.weekly', 'Venezuela_exports', start, end)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "b3f847ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "moving_avg = runs.rolling(window=4).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "23afb8dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Venezuela_exports</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2015-01-04</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-11</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-18</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-25</th>\n",
       "      <td>2303.411643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-02-01</th>\n",
       "      <td>2215.825179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-01-14</th>\n",
       "      <td>589.379429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-01-21</th>\n",
       "      <td>552.909286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-01-28</th>\n",
       "      <td>577.864536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-02-04</th>\n",
       "      <td>541.533821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-02-11</th>\n",
       "      <td>593.929964</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>476 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Venezuela_exports\n",
       "2015-01-04                NaN\n",
       "2015-01-11                NaN\n",
       "2015-01-18                NaN\n",
       "2015-01-25        2303.411643\n",
       "2015-02-01        2215.825179\n",
       "...                       ...\n",
       "2024-01-14         589.379429\n",
       "2024-01-21         552.909286\n",
       "2024-01-28         577.864536\n",
       "2024-02-04         541.533821\n",
       "2024-02-11         593.929964\n",
       "\n",
       "[476 rows x 1 columns]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "moving_avg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "b75754ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1ce03b96700>]"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 4000x1500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(40, 15))\n",
    "plt.plot(runs, label='Weekly Data', color='blue')\n",
    "plt.plot(moving_avg, label='4-Week Moving Average', color='red', linestyle='--')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "a054488e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d5d78627",
   "metadata": {},
   "outputs": [],
   "source": [
    "lag_jodi = tsa.staircase('crude.jodi.oecd_europe.throughput.kbd.monthly',\n",
    "                         from_value_date=pd.Timestamp('2018-01-10'),\n",
    "                         to_value_date=pd.Timestamp('2023-10-30'),\n",
    "                         delta=pd.Timedelta())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4ea491aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lag_jodi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "911f8686",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from tshistory.tsio import historycache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "807e4726",
   "metadata": {},
   "outputs": [],
   "source": [
    "hist = tsa.history('crude.jodi.oecd_europe.throughput.kbd.monthly', from_value_date=pd.Timestamp('2022-09-01'),\n",
    "                   to_value_date=pd.Timestamp('2023-11-01'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2be4c525",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{Timestamp('2022-12-19 00:00:00+0000', tz='UTC'): 2022-09-01    11595.5\n",
       " 2022-10-01    10773.2\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-01-19 00:00:00+0000', tz='UTC'): 2022-09-01    11595.5\n",
       " 2022-10-01    10979.8\n",
       " 2022-11-01    11429.7\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-02-20 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10979.8\n",
       " 2022-11-01    11418.1\n",
       " 2022-12-01    11593.5\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-03-16 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10979.8\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.0\n",
       " 2023-01-01    11752.3\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-04-17 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10979.8\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.0\n",
       " 2023-01-01    11634.1\n",
       " 2023-02-01    11396.9\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-05-18 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10979.8\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.0\n",
       " 2023-01-01    11634.1\n",
       " 2023-02-01    11344.6\n",
       " 2023-03-01    10690.4\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-06-19 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10979.8\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.0\n",
       " 2023-01-01    11634.6\n",
       " 2023-02-01    11344.6\n",
       " 2023-03-01    10750.2\n",
       " 2023-04-01    10984.7\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-07-17 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10979.8\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.0\n",
       " 2023-01-01    11634.6\n",
       " 2023-02-01    11389.0\n",
       " 2023-03-01    10750.2\n",
       " 2023-04-01    11317.7\n",
       " 2023-05-01    11122.7\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-08-16 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10979.8\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.0\n",
       " 2023-01-01    11634.6\n",
       " 2023-02-01    11389.0\n",
       " 2023-03-01    10750.2\n",
       " 2023-04-01    11333.6\n",
       " 2023-05-01    11129.1\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-08-17 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10979.8\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.0\n",
       " 2023-01-01    11634.3\n",
       " 2023-02-01    11388.7\n",
       " 2023-03-01    10851.9\n",
       " 2023-04-01    11331.6\n",
       " 2023-05-01    10974.6\n",
       " 2023-06-01    11155.9\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-09-18 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10981.5\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.5\n",
       " 2023-01-01    11634.3\n",
       " 2023-02-01    11388.7\n",
       " 2023-03-01    10851.9\n",
       " 2023-04-01    11331.6\n",
       " 2023-05-01    10974.6\n",
       " 2023-06-01    11061.5\n",
       " 2023-07-01    11357.1\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-10-16 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10981.5\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.5\n",
       " 2023-01-01    11634.3\n",
       " 2023-02-01    11388.7\n",
       " 2023-03-01    10851.9\n",
       " 2023-04-01    11331.6\n",
       " 2023-05-01    10974.6\n",
       " 2023-06-01    11061.5\n",
       " 2023-07-01    11580.7\n",
       " 2023-08-01    11573.7\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-11-16 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10981.5\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.5\n",
       " 2023-01-01    11634.3\n",
       " 2023-02-01    11388.7\n",
       " 2023-03-01    10851.9\n",
       " 2023-04-01    11331.6\n",
       " 2023-05-01    10974.6\n",
       " 2023-06-01    11030.2\n",
       " 2023-07-01    11580.7\n",
       " 2023-08-01    11826.6\n",
       " 2023-09-01    11782.2\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64,\n",
       " Timestamp('2023-12-19 00:00:00+0000', tz='UTC'): 2022-09-01    11596.0\n",
       " 2022-10-01    10981.5\n",
       " 2022-11-01    11419.6\n",
       " 2022-12-01    11779.5\n",
       " 2023-01-01    11634.3\n",
       " 2023-02-01    11388.7\n",
       " 2023-03-01    10851.9\n",
       " 2023-04-01    11331.6\n",
       " 2023-05-01    10974.6\n",
       " 2023-06-01    11030.2\n",
       " 2023-07-01    11580.7\n",
       " 2023-08-01    11927.6\n",
       " 2023-09-01    11719.1\n",
       " 2023-10-01    11248.5\n",
       " Name: crude.jodi.oecd_europe.throughput.kbd.monthly, dtype: float64}"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fba0bcff",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from kpler.sdk.resources.inventories import Inventories\n",
    "from kpler.sdk.resources.fleet_metrics import FleetMetrics\n",
    "from kpler.sdk import InventoriesSplit, FleetMetricsAlgo, FleetMetricsSplit, FleetMetricsPeriod, \\\n",
    "    FleetMetricsMeasurementUnit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "10ea5f38",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_onfs = pd.read_excel('S:/~Analysis Department/crude/fleet_metrics/kpler_map.xlsx', sheet_name='onfs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f3f6bd61",
   "metadata": {},
   "outputs": [],
   "source": [
    "loating_region = pd.DataFrame()\n",
    "for region in data_onfs['Crude Trading Region'].unique() :\n",
    "    data_new = data_onfs.loc[data_onfs['Crude Trading Region'] == region]\n",
    "    kpler_name = data_new.kpler_name.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6e2eb4c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "dat = data_onfs['Crude Trading Region'].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "62df6d19",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'numpy.dtype[object_]' object is not callable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[36], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43mdat\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'numpy.dtype[object_]' object is not callable"
     ]
    }
   ],
   "source": [
    "dat.dtype()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e2220a1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "a8296dc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_values_after_nan(row):\n",
    "    values_after_nan = []\n",
    "    found_nan = False\n",
    "\n",
    "    for value in row:\n",
    "        if pd.isna(value) and not found_nan:\n",
    "            found_nan = True\n",
    "        elif found_nan and not pd.isna(value):\n",
    "            values_after_nan.append(value)\n",
    "            if len(values_after_nan) == 1:\n",
    "                break\n",
    "    return values_after_nan\n",
    "\n",
    "# Applying the function to each row\n",
    "results = df.apply(lambda row: find_values_after_nan(row[1:]), axis=1)\n",
    "result_jodi= pd.DataFrame(list(results), columns=['M-1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "30f71ccb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>M-1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11593.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11752.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>11396.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10690.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10984.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>11122.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>11155.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11357.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11573.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>11782.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>11248.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        M-1\n",
       "0       NaN\n",
       "1       NaN\n",
       "2       NaN\n",
       "3   11593.5\n",
       "4   11752.3\n",
       "5   11396.9\n",
       "6   10690.4\n",
       "7   10984.7\n",
       "8   11122.7\n",
       "9   11155.9\n",
       "10  11357.1\n",
       "11  11573.7\n",
       "12  11782.2\n",
       "13  11248.5"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_jodi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "21696146",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_tsa(name, new_name, start, end):\n",
    "    df = pd.DataFrame(tsa.get(name))\n",
    "    df = df.rename(columns={name: new_name})\n",
    "    sliced_df = df.loc[start:end]\n",
    "    return sliced_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "08634ab2",
   "metadata": {},
   "outputs": [],
   "source": [
    "iea_runs = get_tsa('crude.iea.oecd_europe.throughput.kbd.monthly', 'IEA Runs', start, end)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "5f2fb93b",
   "metadata": {},
   "outputs": [],
   "source": [
    "start = '2022-09-01'\n",
    "end = '2023-10-01'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "bbc1f6fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IEA Runs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-09-01</th>\n",
       "      <td>11597.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-10-01</th>\n",
       "      <td>10982.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-11-01</th>\n",
       "      <td>11420.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-01</th>\n",
       "      <td>11780.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-01</th>\n",
       "      <td>11635.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-01</th>\n",
       "      <td>11390.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-01</th>\n",
       "      <td>10852.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-01</th>\n",
       "      <td>11332.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-01</th>\n",
       "      <td>10975.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-06-01</th>\n",
       "      <td>11031.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-07-01</th>\n",
       "      <td>11581.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-08-01</th>\n",
       "      <td>11928.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-09-01</th>\n",
       "      <td>11719.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            IEA Runs\n",
       "2022-09-01  11597.13\n",
       "2022-10-01  10982.32\n",
       "2022-11-01  11420.27\n",
       "2022-12-01  11780.03\n",
       "2023-01-01  11635.35\n",
       "2023-02-01  11390.18\n",
       "2023-03-01  10852.94\n",
       "2023-04-01  11332.87\n",
       "2023-05-01  10975.65\n",
       "2023-06-01  11031.50\n",
       "2023-07-01  11581.74\n",
       "2023-08-01  11928.74\n",
       "2023-09-01  11719.40"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iea_runs.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "4e5b3be1",
   "metadata": {},
   "outputs": [],
   "source": [
    "timestamps = pd.date_range(start='2022-09-01',end= '2023-10-01', freq='MS')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "347a598b",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_jodi['Date'] = timestamps\n",
    "result_jodi.set_index('Date', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "id": "81b94a07",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "import urllib3\n",
    "from BlueOcean import DataAccessApi\n",
    "from pandas import DataFrame\n",
    " \n",
    "def bo_get_data(query):\n",
    "    data = DataAccessApi.GetDataframe(query)\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "id": "ac69e6f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "bo_get_data(query).to_csv('OECD_europe_cap.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "id": "92c4f137",
   "metadata": {},
   "outputs": [],
   "source": [
    "query = f\"\"\"select UNIT_GROUP, COUNTRY, UNIT_ID, UNIT_NAME, UNIT_TYPE, PLANT_NAME, OWNER_NAME, U_CAPACITY, U_STATUS from hive_metastore.dataengineering.oil_refinery_unit_view where COUNTRY in ('AUSTRIA',\n",
    " 'BELGIUM',\n",
    " 'DENMARK',\n",
    " 'FINLAND',\n",
    " 'FRANCE',\n",
    " 'GERMANY',\n",
    " 'GREECE',\n",
    " 'IRELAND',\n",
    " 'ITALY',\n",
    " 'NETHERLANDS',\n",
    " 'NORWAY',\n",
    " 'PORTUGAL',\n",
    " 'SPAIN',\n",
    " 'SWEDEN',\n",
    " 'UNITED KINGDOM',\n",
    " 'TURKEY',\n",
    " 'CZECH REPUBLIC',\n",
    " 'HUNGARY',\n",
    " 'POLAND',\n",
    " 'SLOVAKIA',\n",
    " 'SWITZERLAND')\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "26efa14e",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = result_jodi.join(iea_runs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "d71b7252",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Date'>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1f75bc9d",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "block_staircase() missing 2 required positional arguments: 'revision_time' and 'maturity_time'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32mc:\\Users\\shreyagarwal\\Downloads\\scripts\\Refinery_admin_capacity_changes.ipynb Cell 71\u001b[0m line \u001b[0;36m1\n\u001b[1;32m----> <a href='vscode-notebook-cell:/c%3A/Users/shreyagarwal/Downloads/scripts/Refinery_admin_capacity_changes.ipynb#Y131sZmlsZQ%3D%3D?line=0'>1</a>\u001b[0m ts_1da \u001b[39m=\u001b[39m hcache\u001b[39m.\u001b[39;49mblock_staircase(from_value_date\u001b[39m=\u001b[39;49mpd\u001b[39m.\u001b[39;49mTimestamp(\u001b[39m'\u001b[39;49m\u001b[39m2022-12-01\u001b[39;49m\u001b[39m'\u001b[39;49m, tz\u001b[39m=\u001b[39;49m\u001b[39m\"\u001b[39;49m\u001b[39mutc\u001b[39;49m\u001b[39m\"\u001b[39;49m),\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/shreyagarwal/Downloads/scripts/Refinery_admin_capacity_changes.ipynb#Y131sZmlsZQ%3D%3D?line=1'>2</a>\u001b[0m                                      to_value_date\u001b[39m=\u001b[39;49mpd\u001b[39m.\u001b[39;49mTimestamp(\u001b[39m'\u001b[39;49m\u001b[39m2023-11-01\u001b[39;49m\u001b[39m'\u001b[39;49m, tz\u001b[39m=\u001b[39;49m\u001b[39m\"\u001b[39;49m\u001b[39mutc\u001b[39;49m\u001b[39m\"\u001b[39;49m),\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/shreyagarwal/Downloads/scripts/Refinery_admin_capacity_changes.ipynb#Y131sZmlsZQ%3D%3D?line=2'>3</a>\u001b[0m                                      revision_freq\u001b[39m=\u001b[39;49m{\u001b[39m'\u001b[39;49m\u001b[39mmonths\u001b[39;49m\u001b[39m'\u001b[39;49m: \u001b[39m1\u001b[39;49m},\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/shreyagarwal/Downloads/scripts/Refinery_admin_capacity_changes.ipynb#Y131sZmlsZQ%3D%3D?line=3'>4</a>\u001b[0m                                      revision_tz\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39mutc\u001b[39;49m\u001b[39m'\u001b[39;49m,\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/shreyagarwal/Downloads/scripts/Refinery_admin_capacity_changes.ipynb#Y131sZmlsZQ%3D%3D?line=4'>5</a>\u001b[0m                                      maturity_offset\u001b[39m=\u001b[39;49m{\u001b[39m'\u001b[39;49m\u001b[39mmonths\u001b[39;49m\u001b[39m'\u001b[39;49m: \u001b[39m1\u001b[39;49m})\n",
      "\u001b[1;31mTypeError\u001b[0m: block_staircase() missing 2 required positional arguments: 'revision_time' and 'maturity_time'"
     ]
    }
   ],
   "source": [
    "ts_1da = hcache.block_staircase(from_value_date=pd.Timestamp('2022-12-01', tz=\"utc\"),\n",
    "                                     to_value_date=pd.Timestamp('2023-11-01', tz=\"utc\"),\n",
    "                                     revision_freq={'months': 1},\n",
    "                                     revision_tz='utc',\n",
    "                                     maturity_offset={'months': 1})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "546df9cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_euromargin(tsa, date=None):\n",
    "    date = date or (pd.Timestamp.now().floor('D') - pd.DateOffset(days=1))\n",
    "    query = f\"\"\"\n",
    "    SELECT ddate, pdate, nwecomplex, medcomplex\n",
    "    FROM dataengineering.oil_crude_euromargin\n",
    "    where type = 2 and ddate >= '{date:%Y-%m-%d}' and isactive is true\n",
    "    \"\"\"\n",
    "    print(query)\n",
    "    data = DataAccessApi.GetDataframe(query=query)\n",
    "    data['pdate'] = pd.to_datetime(data['pdate']).dt.to_period(freq='M').dt.start_time\n",
    "    data['ddate'] = pd.to_datetime(data['ddate'])\n",
    "    for pdate, per_day in tqdm(data.groupby(['ddate'])):\n",
    "        df = per_day.groupby('pdate').mean().iloc[:, -2:]\n",
    "        for col in df.columns:\n",
    "                safe_update(\n",
    "                tsa,\n",
    "                f\"oil.petroineos.euromargin.{col}.usd_bbl.monthly\",\n",
    "                df[col],\n",
    "                insertion_date=pdate,\n",
    "            )\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "08f96417",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ddate</th>\n",
       "      <th>pdate</th>\n",
       "      <th>nwecomplex</th>\n",
       "      <th>medcomplex</th>\n",
       "      <th>nwehydroskim</th>\n",
       "      <th>nwetopping</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-02-01</td>\n",
       "      <td>5.91</td>\n",
       "      <td>7.30</td>\n",
       "      <td>6.97</td>\n",
       "      <td>1.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-03-01</td>\n",
       "      <td>6.04</td>\n",
       "      <td>7.34</td>\n",
       "      <td>7.11</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-04-01</td>\n",
       "      <td>7.12</td>\n",
       "      <td>7.57</td>\n",
       "      <td>8.13</td>\n",
       "      <td>0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-05-01</td>\n",
       "      <td>7.49</td>\n",
       "      <td>7.67</td>\n",
       "      <td>8.40</td>\n",
       "      <td>1.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-06-01</td>\n",
       "      <td>7.78</td>\n",
       "      <td>7.83</td>\n",
       "      <td>8.56</td>\n",
       "      <td>1.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-07-01</td>\n",
       "      <td>7.46</td>\n",
       "      <td>7.49</td>\n",
       "      <td>8.17</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-08-01</td>\n",
       "      <td>7.23</td>\n",
       "      <td>7.28</td>\n",
       "      <td>7.85</td>\n",
       "      <td>1.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-09-01</td>\n",
       "      <td>6.96</td>\n",
       "      <td>7.00</td>\n",
       "      <td>7.41</td>\n",
       "      <td>1.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-10-01</td>\n",
       "      <td>5.85</td>\n",
       "      <td>6.39</td>\n",
       "      <td>6.26</td>\n",
       "      <td>1.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-11-01</td>\n",
       "      <td>5.35</td>\n",
       "      <td>5.94</td>\n",
       "      <td>5.85</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2024-12-01</td>\n",
       "      <td>5.01</td>\n",
       "      <td>5.61</td>\n",
       "      <td>5.67</td>\n",
       "      <td>1.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-01-01</td>\n",
       "      <td>5.01</td>\n",
       "      <td>5.18</td>\n",
       "      <td>5.75</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-02-01</td>\n",
       "      <td>5.24</td>\n",
       "      <td>5.41</td>\n",
       "      <td>6.01</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-03-01</td>\n",
       "      <td>5.52</td>\n",
       "      <td>5.70</td>\n",
       "      <td>6.33</td>\n",
       "      <td>1.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-04-01</td>\n",
       "      <td>6.68</td>\n",
       "      <td>6.89</td>\n",
       "      <td>7.53</td>\n",
       "      <td>1.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-05-01</td>\n",
       "      <td>6.88</td>\n",
       "      <td>7.09</td>\n",
       "      <td>7.70</td>\n",
       "      <td>1.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-06-01</td>\n",
       "      <td>6.90</td>\n",
       "      <td>7.11</td>\n",
       "      <td>7.73</td>\n",
       "      <td>1.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-07-01</td>\n",
       "      <td>7.03</td>\n",
       "      <td>7.38</td>\n",
       "      <td>7.88</td>\n",
       "      <td>1.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-08-01</td>\n",
       "      <td>7.16</td>\n",
       "      <td>7.50</td>\n",
       "      <td>8.03</td>\n",
       "      <td>1.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-09-01</td>\n",
       "      <td>7.32</td>\n",
       "      <td>7.66</td>\n",
       "      <td>8.21</td>\n",
       "      <td>2.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-10-01</td>\n",
       "      <td>7.35</td>\n",
       "      <td>7.69</td>\n",
       "      <td>8.30</td>\n",
       "      <td>2.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-11-01</td>\n",
       "      <td>7.32</td>\n",
       "      <td>7.66</td>\n",
       "      <td>8.33</td>\n",
       "      <td>2.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2025-12-01</td>\n",
       "      <td>7.28</td>\n",
       "      <td>7.61</td>\n",
       "      <td>8.38</td>\n",
       "      <td>2.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2024-01-12</td>\n",
       "      <td>2026-01-01</td>\n",
       "      <td>7.40</td>\n",
       "      <td>7.52</td>\n",
       "      <td>8.56</td>\n",
       "      <td>2.44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        ddate      pdate  nwecomplex  medcomplex  nwehydroskim  nwetopping\n",
       "27 2024-01-12 2024-02-01        5.91        7.30          6.97        1.14\n",
       "31 2024-01-12 2024-03-01        6.04        7.34          7.11        1.00\n",
       "39 2024-01-12 2024-04-01        7.12        7.57          8.13        0.92\n",
       "0  2024-01-12 2024-05-01        7.49        7.67          8.40        1.17\n",
       "38 2024-01-12 2024-06-01        7.78        7.83          8.56        1.41\n",
       "13 2024-01-12 2024-07-01        7.46        7.49          8.17        1.25\n",
       "12 2024-01-12 2024-08-01        7.23        7.28          7.85        1.16\n",
       "34 2024-01-12 2024-09-01        6.96        7.00          7.41        1.09\n",
       "24 2024-01-12 2024-10-01        5.85        6.39          6.26        1.08\n",
       "29 2024-01-12 2024-11-01        5.35        5.94          5.85        1.06\n",
       "1  2024-01-12 2024-12-01        5.01        5.61          5.67        1.09\n",
       "25 2024-01-12 2025-01-01        5.01        5.18          5.75        1.25\n",
       "6  2024-01-12 2025-02-01        5.24        5.41          6.01        1.34\n",
       "26 2024-01-12 2025-03-01        5.52        5.70          6.33        1.37\n",
       "14 2024-01-12 2025-04-01        6.68        6.89          7.53        1.41\n",
       "15 2024-01-12 2025-05-01        6.88        7.09          7.70        1.53\n",
       "36 2024-01-12 2025-06-01        6.90        7.11          7.73        1.67\n",
       "2  2024-01-12 2025-07-01        7.03        7.38          7.88        1.81\n",
       "4  2024-01-12 2025-08-01        7.16        7.50          8.03        1.95\n",
       "3  2024-01-12 2025-09-01        7.32        7.66          8.21        2.13\n",
       "7  2024-01-12 2025-10-01        7.35        7.69          8.30        2.22\n",
       "28 2024-01-12 2025-11-01        7.32        7.66          8.33        2.25\n",
       "37 2024-01-12 2025-12-01        7.28        7.61          8.38        2.30\n",
       "22 2024-01-12 2026-01-01        7.40        7.52          8.56        2.44"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['ddate'] == '2024-01-12'].sort_values(by=['pdate'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "e1b361dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_euromargin(tsa, date=None):\n",
    "    date = date or (pd.Timestamp.now().floor('D') - pd.DateOffset(days=5))\n",
    "    query = f\"\"\"\n",
    "    SELECT ddate, pdate, nwecomplex, medcomplex, nwehydroskim, nwetopping\n",
    "    FROM dataengineering.oil_crude_euromargin\n",
    "    where type = 2 and ddate >= '{date:%Y-%m-%d}' and isactive is true\n",
    "    \"\"\"\n",
    "    print(query)\n",
    "    data = DataAccessApi.GetDataframe(query=query)\n",
    "    data['pdate'] = pd.to_datetime(data['pdate']).dt.to_period(freq='M').dt.start_time\n",
    "    data['ddate'] = pd.to_datetime(data['ddate'])\n",
    "    for pdate, per_day in tqdm(data.groupby(['ddate'])):\n",
    "        df = per_day.groupby('pdate').mean().iloc[:, -2:]\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "e46520bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9fcbb5c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    UNIT_ID         COUNTRY  U_CAPACITY                      UNIT_NAME  \\\n",
      "0   1064747          POLAND     69452.0                         CDU VI   \n",
      "1   1075466          GREECE     77500.0  Crude Distillation (Crude 01)   \n",
      "2   1072554        SLOVAKIA     55000.0     AVD 6 (Crude-Vacuum Combo)   \n",
      "3   1076698          POLAND     90000.0                  CDU/VDU (120)   \n",
      "4   1074035          GREECE     85000.0                 Crude 1 (2100)   \n",
      "..      ...             ...         ...                            ...   \n",
      "82  1037918           SPAIN    105700.0                Crude 2 (U-602)   \n",
      "83  1061121         GERMANY    109300.0                      Topping 3   \n",
      "84  1038067           SPAIN    130000.0                        Crude 3   \n",
      "85  1035936  UNITED KINGDOM     40000.0                          CDU 2   \n",
      "86  1037955           SPAIN     69200.0                        Crude 2   \n",
      "\n",
      "       U_STATUS UNIT_GROUP                    PLANT_NAME  \n",
      "0   Operational        CDU                Plock Refinery  \n",
      "1   Operational        CDU             Elefsina Refinery  \n",
      "2   Operational        CDU  Slovnaft Refinery (MOL Nyrt)  \n",
      "3   Operational        CDU               Gdansk Refinery  \n",
      "4   Operational        CDU          Aspropyrgos Refinery  \n",
      "..          ...        ...                           ...  \n",
      "82  Operational        CDU          Puertollano Refinery  \n",
      "83  Operational        CDU       MiRO Refinery Karlsruhe  \n",
      "84  Operational        CDU            Gibraltar Refinery  \n",
      "85  Operational        CDU          Grangemouth Refinery  \n",
      "86  Operational        CDU            La Coruna Refinery  \n",
      "\n",
      "[87 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "from BlueOcean import DataAccessApi\n",
    "query = f\"\"\"\n",
    "SELECT UNIT_ID, COUNTRY, U_CAPACITY, UNIT_NAME,U_STATUS, UNIT_GROUP,tu.PLANT_NAME\n",
    "FROM dataengineering.oil_refinery_unit_view \n",
    "INNER JOIN (\n",
    "    SELECT PLANT_NAME\n",
    "    FROM dataengineering.oil_refinery_unit_view\n",
    "    WHERE COUNTRY IN (\n",
    "        'AUSTRIA',\n",
    "        'BELGIUM',\n",
    "        'DENMARK',\n",
    "        'FINLAND',\n",
    "        'FRANCE',\n",
    "        'GERMANY',\n",
    "        'GREECE',\n",
    "        'IRELAND',\n",
    "        'ITALY',\n",
    "        'NETHERLANDS',\n",
    "        'NORWAY',\n",
    "        'LITHUANIA',\n",
    "        'PORTUGAL',\n",
    "        'SPAIN',\n",
    "        'SWEDEN',\n",
    "        'UNITED KINGDOM',\n",
    "        'TURKEY',\n",
    "        'CZECH REPUBLIC',\n",
    "        'HUNGARY',\n",
    "        'POLAND',\n",
    "        'SLOVAKIA',\n",
    "        'SWITZERLAND'\n",
    "    )\n",
    "    AND UNIT_GROUP = 'CDU'\n",
    "    AND U_STATUS = 'Operational'\n",
    "    GROUP BY PLANT_NAME\n",
    "    HAVING COUNT(DISTINCT UNIT_NAME) > 1\n",
    ") AS tu ON dataengineering.oil_refinery_unit_view.PLANT_NAME = tu.PLANT_NAME WHERE UNIT_GROUP = 'CDU'\n",
    "AND U_STATUS = 'Operational'\n",
    "\"\"\"\n",
    "df = DataAccessApi.GetDataframe(query=query)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "95878414",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('expectedclosures.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "67f800a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def aggregate_daily_kbd(df):\n",
    "    df.index = pd.to_datetime(df['date'])\n",
    "    df_grouped = df.resample('D').sum().astype(float)\n",
    "    df_grouped.index = df_grouped.index.tz_localize(None)\n",
    "    return df_grouped['volume']/1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "58dfebe6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.index = pd.to_datetime(df['voyage_start'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6cccc3f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vessel_name</th>\n",
       "      <th>vessel_imo</th>\n",
       "      <th>closest_ancestor_grade</th>\n",
       "      <th>cargo_origin_barrels_split_by_product</th>\n",
       "      <th>voyage_start</th>\n",
       "      <th>voyage_end</th>\n",
       "      <th>installation_origin_name</th>\n",
       "      <th>charterer_name</th>\n",
       "      <th>installation_destination_name</th>\n",
       "      <th>final_buyer_name</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>voyage_start</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2024-05-01 12:15:00</th>\n",
       "      <td>Ugo Ocha</td>\n",
       "      <td>9172856</td>\n",
       "      <td>Jones Creek</td>\n",
       "      <td>250252</td>\n",
       "      <td>2024-05-01 12:15:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ugo Ocha FSO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-19 20:41:00</th>\n",
       "      <td>Ugo Ocha</td>\n",
       "      <td>9172856</td>\n",
       "      <td>Jones Creek</td>\n",
       "      <td>287381</td>\n",
       "      <td>2023-11-19 20:41:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ugo Ocha FSO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-06 03:50:00</th>\n",
       "      <td>Ugo Ocha</td>\n",
       "      <td>9172856</td>\n",
       "      <td>Jones Creek</td>\n",
       "      <td>287381</td>\n",
       "      <td>2023-12-06 03:50:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ugo Ocha FSO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-23 18:31:00</th>\n",
       "      <td>Ugo Ocha</td>\n",
       "      <td>9172856</td>\n",
       "      <td>Jones Creek</td>\n",
       "      <td>287381</td>\n",
       "      <td>2023-11-23 18:31:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ugo Ocha FSO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-27 12:39:00</th>\n",
       "      <td>Ugo Ocha</td>\n",
       "      <td>9172856</td>\n",
       "      <td>Jones Creek</td>\n",
       "      <td>287400</td>\n",
       "      <td>2023-12-27 12:39:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ugo Ocha FSO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-20 07:19:00</th>\n",
       "      <td>Santa Monica</td>\n",
       "      <td>9607318</td>\n",
       "      <td>Jones Creek</td>\n",
       "      <td>42600</td>\n",
       "      <td>2023-11-20 07:19:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ugo Ocha FSO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-22 17:33:00</th>\n",
       "      <td>Euro</td>\n",
       "      <td>9567702</td>\n",
       "      <td>Jones Creek</td>\n",
       "      <td>1023647</td>\n",
       "      <td>2023-11-22 17:33:00+00:00</td>\n",
       "      <td>2023-12-11 15:51:00+00:00</td>\n",
       "      <td>Ugo Ocha FSO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EverWind Point Tupper</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-23 03:29:00</th>\n",
       "      <td>Ugo Ocha</td>\n",
       "      <td>9172856</td>\n",
       "      <td>Jones Creek</td>\n",
       "      <td>250252</td>\n",
       "      <td>2024-04-23 03:29:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ugo Ocha FSO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-05-24 23:38:00</th>\n",
       "      <td>Central</td>\n",
       "      <td>9383895</td>\n",
       "      <td>Jones Creek</td>\n",
       "      <td>107700</td>\n",
       "      <td>2024-05-24 23:38:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ugo Ocha FSO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-05-21 18:23:00</th>\n",
       "      <td>Central</td>\n",
       "      <td>9383895</td>\n",
       "      <td>Jones Creek</td>\n",
       "      <td>107700</td>\n",
       "      <td>2024-05-21 18:23:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ugo Ocha FSO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>366 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      vessel_name  vessel_imo closest_ancestor_grade  \\\n",
       "voyage_start                                                           \n",
       "2024-05-01 12:15:00      Ugo Ocha     9172856            Jones Creek   \n",
       "2023-11-19 20:41:00      Ugo Ocha     9172856            Jones Creek   \n",
       "2023-12-06 03:50:00      Ugo Ocha     9172856            Jones Creek   \n",
       "2023-11-23 18:31:00      Ugo Ocha     9172856            Jones Creek   \n",
       "2023-12-27 12:39:00      Ugo Ocha     9172856            Jones Creek   \n",
       "...                           ...         ...                    ...   \n",
       "2023-11-20 07:19:00  Santa Monica     9607318            Jones Creek   \n",
       "2023-11-22 17:33:00          Euro     9567702            Jones Creek   \n",
       "2024-04-23 03:29:00      Ugo Ocha     9172856            Jones Creek   \n",
       "2024-05-24 23:38:00       Central     9383895            Jones Creek   \n",
       "2024-05-21 18:23:00       Central     9383895            Jones Creek   \n",
       "\n",
       "                     cargo_origin_barrels_split_by_product  \\\n",
       "voyage_start                                                 \n",
       "2024-05-01 12:15:00                                 250252   \n",
       "2023-11-19 20:41:00                                 287381   \n",
       "2023-12-06 03:50:00                                 287381   \n",
       "2023-11-23 18:31:00                                 287381   \n",
       "2023-12-27 12:39:00                                 287400   \n",
       "...                                                    ...   \n",
       "2023-11-20 07:19:00                                  42600   \n",
       "2023-11-22 17:33:00                                1023647   \n",
       "2024-04-23 03:29:00                                 250252   \n",
       "2024-05-24 23:38:00                                 107700   \n",
       "2024-05-21 18:23:00                                 107700   \n",
       "\n",
       "                                  voyage_start                 voyage_end  \\\n",
       "voyage_start                                                                \n",
       "2024-05-01 12:15:00  2024-05-01 12:15:00+00:00                        NaN   \n",
       "2023-11-19 20:41:00  2023-11-19 20:41:00+00:00                        NaN   \n",
       "2023-12-06 03:50:00  2023-12-06 03:50:00+00:00                        NaN   \n",
       "2023-11-23 18:31:00  2023-11-23 18:31:00+00:00                        NaN   \n",
       "2023-12-27 12:39:00  2023-12-27 12:39:00+00:00                        NaN   \n",
       "...                                        ...                        ...   \n",
       "2023-11-20 07:19:00  2023-11-20 07:19:00+00:00                        NaN   \n",
       "2023-11-22 17:33:00  2023-11-22 17:33:00+00:00  2023-12-11 15:51:00+00:00   \n",
       "2024-04-23 03:29:00  2024-04-23 03:29:00+00:00                        NaN   \n",
       "2024-05-24 23:38:00  2024-05-24 23:38:00+00:00                        NaN   \n",
       "2024-05-21 18:23:00  2024-05-21 18:23:00+00:00                        NaN   \n",
       "\n",
       "                    installation_origin_name charterer_name  \\\n",
       "voyage_start                                                  \n",
       "2024-05-01 12:15:00             Ugo Ocha FSO            NaN   \n",
       "2023-11-19 20:41:00             Ugo Ocha FSO            NaN   \n",
       "2023-12-06 03:50:00             Ugo Ocha FSO            NaN   \n",
       "2023-11-23 18:31:00             Ugo Ocha FSO            NaN   \n",
       "2023-12-27 12:39:00             Ugo Ocha FSO            NaN   \n",
       "...                                      ...            ...   \n",
       "2023-11-20 07:19:00             Ugo Ocha FSO            NaN   \n",
       "2023-11-22 17:33:00             Ugo Ocha FSO            NaN   \n",
       "2024-04-23 03:29:00             Ugo Ocha FSO            NaN   \n",
       "2024-05-24 23:38:00             Ugo Ocha FSO            NaN   \n",
       "2024-05-21 18:23:00             Ugo Ocha FSO            NaN   \n",
       "\n",
       "                    installation_destination_name final_buyer_name  \n",
       "voyage_start                                                        \n",
       "2024-05-01 12:15:00                           NaN              NaN  \n",
       "2023-11-19 20:41:00                           NaN              NaN  \n",
       "2023-12-06 03:50:00                           NaN              NaN  \n",
       "2023-11-23 18:31:00                           NaN              NaN  \n",
       "2023-12-27 12:39:00                           NaN              NaN  \n",
       "...                                           ...              ...  \n",
       "2023-11-20 07:19:00                           NaN              NaN  \n",
       "2023-11-22 17:33:00         EverWind Point Tupper              NaN  \n",
       "2024-04-23 03:29:00                           NaN              NaN  \n",
       "2024-05-24 23:38:00                           NaN              NaN  \n",
       "2024-05-21 18:23:00                           NaN              NaN  \n",
       "\n",
       "[366 rows x 10 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "774b4c64",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shreyagarwal\\AppData\\Local\\Temp\\ipykernel_26496\\550398886.py:1: FutureWarning: Value based partial slicing on non-monotonic DatetimeIndexes with non-existing keys is deprecated and will raise a KeyError in a future Version.\n",
      "  df.loc['2022-01-01 00:00:00':].to_csv('jones_creek.csv')\n"
     ]
    }
   ],
   "source": [
    "df.loc['2022-01-01 00:00:00':].to_csv('jones_creek.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "600c327e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "af9c4a85",
   "metadata": {},
   "outputs": [],
   "source": [
    "from saturn_server.cross.helpers import safe_register_formula"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "55daa1e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "mid_countries = ['bahrain', 'iran', 'iraq', 'oman', 'qatar', 'saudi_arabia', 'jordan', 'syria', 'united_arab_emirates', 'yemen', 'kuwait']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0ab17d9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(sub (series \"oil.petroineos.bahrain.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.bahrain.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.bahrain.cdu.available_capacity.kbd.monthly\n",
      "(sub (series \"oil.petroineos.iran.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.iran.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.iran.cdu.available_capacity.kbd.monthly\n",
      "(sub (series \"oil.petroineos.iraq.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.iraq.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.iraq.cdu.available_capacity.kbd.monthly\n",
      "(sub (series \"oil.petroineos.oman.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.oman.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.oman.cdu.available_capacity.kbd.monthly\n",
      "(sub (series \"oil.petroineos.qatar.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.qatar.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.qatar.cdu.available_capacity.kbd.monthly\n",
      "(sub (series \"oil.petroineos.saudi_arabia.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.saudi_arabia.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.saudi_arabia.cdu.available_capacity.kbd.monthly\n",
      "(sub (series \"oil.petroineos.jordan.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.jordan.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.jordan.cdu.available_capacity.kbd.monthly\n",
      "(sub (series \"oil.petroineos.syria.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.syria.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.syria.cdu.available_capacity.kbd.monthly\n",
      "(sub (series \"oil.petroineos.united_arab_emirates.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.united_arab_emirates.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.united_arab_emirates.cdu.available_capacity.kbd.monthly\n",
      "(sub (series \"oil.petroineos.yemen.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.yemen.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.yemen.cdu.available_capacity.kbd.monthly\n",
      "(sub (series \"oil.petroineos.kuwait.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.kuwait.cdu.total_outage.kbd.monthly\"))\n",
      "oil.petroineos.kuwait.cdu.available_capacity.kbd.monthly\n"
     ]
    }
   ],
   "source": [
    "for countries in mid_countries:\n",
    "    formula = f'(sub (series \"oil.petroineos.{countries}.cdu.capacity.kbd.monthly\") (series \"oil.petroineos.{countries}.cdu.total_outage.kbd.monthly\"))'\n",
    "    name = f'oil.petroineos.{countries}.cdu.available_capacity.kbd.monthly'\n",
    "    print(formula)\n",
    "    print(name)\n",
    "#     safe_register_formula(tsa, name , formula)\n",
    "# print (f'uploaded {len(countries)} total formulas')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "c020a527",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import time\n",
    "import datawrapper\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "25d7e358",
   "metadata": {},
   "outputs": [],
   "source": [
    "token = datawrapper.Datawrapper(access_token='z2G5EX2YCTo4unLTijAu91ajJvzPmoxyt7Gl8fUMG6IBfqP1rZHy3wwt11ncLcIn')\n",
    "chart_data = token.get_charts( published='true', search='', order='DESC', order_by='createdAt',\n",
    "                                  limit=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "3b277eee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'publicId': 'tkjju',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'tkjju',\n",
       "  'title': 'maintenance-area-europe',\n",
       "  'type': 'd3-area',\n",
       "  'createdAt': '2024-04-11T12:46:54.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:46:56.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:46:56.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/tkjju/be236bfd1a0a44140ded38513c1aadfc/full.png',\n",
       "   'plain': '//img.datawrapper.de/tkjju/be236bfd1a0a44140ded38513c1aadfc/plain.png'},\n",
       "  'url': '/v3/charts/tkjju'},\n",
       " {'publicId': 'bTQ0x',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'bTQ0x',\n",
       "  'title': 'maintenance-table',\n",
       "  'type': 'tables',\n",
       "  'createdAt': '2024-04-11T12:46:43.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:46:45.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:46:45.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/bTQ0x/30f9c487465958916176c1462d65456f/full.png',\n",
       "   'plain': '//img.datawrapper.de/bTQ0x/30f9c487465958916176c1462d65456f/plain.png'},\n",
       "  'url': '/v3/charts/bTQ0x'},\n",
       " {'publicId': 'pUb1o',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'pUb1o',\n",
       "  'title': 'European-power-fuels',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:46:22.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:46:31.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:46:31.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/pUb1o/04da9b09bdfb4d5dd0b988bc501af736/full.png',\n",
       "   'plain': '//img.datawrapper.de/pUb1o/04da9b09bdfb4d5dd0b988bc501af736/plain.png'},\n",
       "  'url': '/v3/charts/pUb1o'},\n",
       " {'publicId': 'FfqkT',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'FfqkT',\n",
       "  'title': 'refinery-runs-russia',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:46:11.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:46:19.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:46:19.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/FfqkT/9dc42c5d6a429f18f818c99bfb98bd1b/full.png',\n",
       "   'plain': '//img.datawrapper.de/FfqkT/9dc42c5d6a429f18f818c99bfb98bd1b/plain.png'},\n",
       "  'url': '/v3/charts/FfqkT'},\n",
       " {'publicId': 'kUVNg',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'kUVNg',\n",
       "  'title': 'refinery-runs-russia-1',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:46:02.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:46:10.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:46:10.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/kUVNg/e78c824c222b1561f01153c6bab9238b/full.png',\n",
       "   'plain': '//img.datawrapper.de/kUVNg/e78c824c222b1561f01153c6bab9238b/plain.png'},\n",
       "  'url': '/v3/charts/kUVNg'},\n",
       " {'publicId': 'Gi7OT',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'Gi7OT',\n",
       "  'title': 'refinery-outage-europe-1',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:45:52.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:46:01.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:46:01.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/Gi7OT/3d3f229974ce9e3af32c03fab532ce62/full.png',\n",
       "   'plain': '//img.datawrapper.de/Gi7OT/3d3f229974ce9e3af32c03fab532ce62/plain.png'},\n",
       "  'url': '/v3/charts/Gi7OT'},\n",
       " {'publicId': 'RTzBv',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'RTzBv',\n",
       "  'title': 'refinery-runs-europe',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:45:43.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:45:51.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:45:51.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/RTzBv/fc8e9b4b70476740b4a13694a875fad3/full.png',\n",
       "   'plain': '//img.datawrapper.de/RTzBv/fc8e9b4b70476740b4a13694a875fad3/plain.png'},\n",
       "  'url': '/v3/charts/RTzBv'},\n",
       " {'publicId': 'LYLtS',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'LYLtS',\n",
       "  'title': 'util-europe-zoom',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:45:01.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:45:09.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:45:09.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/LYLtS/6a5ba7c6ea393af598c4f3439cfd753f/full.png',\n",
       "   'plain': '//img.datawrapper.de/LYLtS/6a5ba7c6ea393af598c4f3439cfd753f/plain.png'},\n",
       "  'url': '/v3/charts/LYLtS'},\n",
       " {'publicId': '2nTa0',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': '2nTa0',\n",
       "  'title': 'refinery-runs-europe-zoom',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:44:01.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:44:09.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:44:09.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/2nTa0/57ed741ab4eb6f14c0160a9653f58bf0/full.png',\n",
       "   'plain': '//img.datawrapper.de/2nTa0/57ed741ab4eb6f14c0160a9653f58bf0/plain.png'},\n",
       "  'url': '/v3/charts/2nTa0'},\n",
       " {'publicId': 'xIzeR',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'xIzeR',\n",
       "  'title': 'availalbe-capacity-europe-zoom',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:43:16.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:43:25.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:43:25.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/xIzeR/4862a3acda9e85b0d3439f168362e606/full.png',\n",
       "   'plain': '//img.datawrapper.de/xIzeR/4862a3acda9e85b0d3439f168362e606/plain.png'},\n",
       "  'url': '/v3/charts/xIzeR'},\n",
       " {'publicId': 'jrXDQ',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'jrXDQ',\n",
       "  'title': 'refinery-runs-europe-ea',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:43:05.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:43:15.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:43:14.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/jrXDQ/2f45da1f65739e2cd03ce44c060e7abd/full.png',\n",
       "   'plain': '//img.datawrapper.de/jrXDQ/2f45da1f65739e2cd03ce44c060e7abd/plain.png'},\n",
       "  'url': '/v3/charts/jrXDQ'},\n",
       " {'publicId': 'B9Qmq',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'B9Qmq',\n",
       "  'title': 'structure',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:42:24.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:42:33.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:42:33.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/B9Qmq/a52456a42567b880d5ab07d4507758ef/full.png',\n",
       "   'plain': '//img.datawrapper.de/B9Qmq/a52456a42567b880d5ab07d4507758ef/plain.png'},\n",
       "  'url': '/v3/charts/B9Qmq'},\n",
       " {'publicId': 'ExLKN',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'ExLKN',\n",
       "  'title': 'doba-freight',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:42:15.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:42:23.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:42:23.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/ExLKN/c92b5ab74b7574e0dc78d79249b1273f/full.png',\n",
       "   'plain': '//img.datawrapper.de/ExLKN/c92b5ab74b7574e0dc78d79249b1273f/plain.png'},\n",
       "  'url': '/v3/charts/ExLKN'},\n",
       " {'publicId': 'FzxsH',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'FzxsH',\n",
       "  'title': 'gasoil-crack',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:42:06.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:42:14.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:42:14.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/FzxsH/45714f100e3ce09b84fcab95bd1701b5/full.png',\n",
       "   'plain': '//img.datawrapper.de/FzxsH/45714f100e3ce09b84fcab95bd1701b5/plain.png'},\n",
       "  'url': '/v3/charts/FzxsH'},\n",
       " {'publicId': 'q6mLG',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'q6mLG',\n",
       "  'title': 'naphtha-crack',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:41:56.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:42:05.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:42:05.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/q6mLG/ccfa561cb23f1a6c62289d3cbe809231/full.png',\n",
       "   'plain': '//img.datawrapper.de/q6mLG/ccfa561cb23f1a6c62289d3cbe809231/plain.png'},\n",
       "  'url': '/v3/charts/q6mLG'},\n",
       " {'publicId': 'p4FNC',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'p4FNC',\n",
       "  'title': 'vlsfo-cracks',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:41:47.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:41:56.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:41:56.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/p4FNC/e3f6cde6f2b447d76a26edb94cf5915c/full.png',\n",
       "   'plain': '//img.datawrapper.de/p4FNC/e3f6cde6f2b447d76a26edb94cf5915c/plain.png'},\n",
       "  'url': '/v3/charts/p4FNC'},\n",
       " {'publicId': 'P9EFu',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'P9EFu',\n",
       "  'title': 'vs-doba',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:41:38.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:41:46.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:41:46.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/P9EFu/a8ed5fcca26e3d65444c87bf8fcde095/full.png',\n",
       "   'plain': '//img.datawrapper.de/P9EFu/a8ed5fcca26e3d65444c87bf8fcde095/plain.png'},\n",
       "  'url': '/v3/charts/P9EFu'},\n",
       " {'publicId': 'WUhH3',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'WUhH3',\n",
       "  'title': 'doba-diff',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:41:28.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:41:36.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:41:36.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/WUhH3/0126140b6bd0aff84a2b96d5a87a8c67/full.png',\n",
       "   'plain': '//img.datawrapper.de/WUhH3/0126140b6bd0aff84a2b96d5a87a8c67/plain.png'},\n",
       "  'url': '/v3/charts/WUhH3'},\n",
       " {'publicId': 'vhdQx',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'vhdQx',\n",
       "  'title': 'splitter-margin',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:41:15.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:41:24.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:41:24.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/vhdQx/881629daecee16b7d1d14ff32ba4011f/full.png',\n",
       "   'plain': '//img.datawrapper.de/vhdQx/881629daecee16b7d1d14ff32ba4011f/plain.png'},\n",
       "  'url': '/v3/charts/vhdQx'},\n",
       " {'publicId': 'JAVC6',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'JAVC6',\n",
       "  'title': 'margin-zoom',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:41:02.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:41:11.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:41:11.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/JAVC6/604052c5d1891d661c968ddd997a5ee5/full.png',\n",
       "   'plain': '//img.datawrapper.de/JAVC6/604052c5d1891d661c968ddd997a5ee5/plain.png'},\n",
       "  'url': '/v3/charts/JAVC6'},\n",
       " {'publicId': '8cqOx',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': '8cqOx',\n",
       "  'title': 'margin-regional',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:40:53.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:41:01.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:41:01.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/8cqOx/3b55a3086d1b2598019ead8134dc456e/full.png',\n",
       "   'plain': '//img.datawrapper.de/8cqOx/3b55a3086d1b2598019ead8134dc456e/plain.png'},\n",
       "  'url': '/v3/charts/8cqOx'},\n",
       " {'publicId': '3VLWl',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': '3VLWl',\n",
       "  'title': 'planned_unplanned',\n",
       "  'type': 'd3-area',\n",
       "  'createdAt': '2024-04-11T12:40:43.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:40:52.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:40:52.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/3VLWl/a32c1732e1fc34ffa60de255ea1def7a/full.png',\n",
       "   'plain': '//img.datawrapper.de/3VLWl/a32c1732e1fc34ffa60de255ea1def7a/plain.png'},\n",
       "  'url': '/v3/charts/3VLWl'},\n",
       " {'publicId': 'Jo3HR',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'Jo3HR',\n",
       "  'title': 'gasoil-brent-mm-money',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:40:33.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:40:42.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:40:42.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/Jo3HR/fe2623b42aa65b218e9f2480320c79d4/full.png',\n",
       "   'plain': '//img.datawrapper.de/Jo3HR/fe2623b42aa65b218e9f2480320c79d4/plain.png'},\n",
       "  'url': '/v3/charts/Jo3HR'},\n",
       " {'publicId': 'tkELg',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'tkELg',\n",
       "  'title': 'calendar-fly',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:40:24.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:40:33.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:40:33.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/tkELg/cf313ed304e769d5f8ee97ffabf7f139/full.png',\n",
       "   'plain': '//img.datawrapper.de/tkELg/cf313ed304e769d5f8ee97ffabf7f139/plain.png'},\n",
       "  'url': '/v3/charts/tkELg'},\n",
       " {'publicId': 'rp0vZ',\n",
       "  'language': 'en-US',\n",
       "  'theme': 'datawrapper',\n",
       "  'id': 'rp0vZ',\n",
       "  'title': 'sikka-loadings',\n",
       "  'type': 'd3-lines',\n",
       "  'createdAt': '2024-04-11T12:40:08.000Z',\n",
       "  'authorId': 600336,\n",
       "  'organizationId': None,\n",
       "  'lastEditStep': 5,\n",
       "  'lastModifiedAt': '2024-04-11T12:40:17.000Z',\n",
       "  'publicVersion': 1,\n",
       "  'publishedAt': '2024-04-11T12:40:17.000Z',\n",
       "  'customFields': {},\n",
       "  'folderId': None,\n",
       "  'metadata': {'data': {'changes': [],\n",
       "    'transpose': False,\n",
       "    'vertical-header': True,\n",
       "    'horizontal-header': True},\n",
       "   'describe': {'source-name': '',\n",
       "    'source-url': '',\n",
       "    'intro': '',\n",
       "    'byline': '',\n",
       "    'aria-description': '',\n",
       "    'number-format': '-',\n",
       "    'number-divisor': 0,\n",
       "    'number-append': '',\n",
       "    'number-prepend': ''},\n",
       "   'visualize': {'dark-mode-invert': True,\n",
       "    'highlighted-series': [],\n",
       "    'highlighted-values': [],\n",
       "    'sharing': {'enabled': False}},\n",
       "   'axes': {},\n",
       "   'publish': {'embed-width': 600,\n",
       "    'embed-height': 400,\n",
       "    'blocks': {},\n",
       "    'export-pdf': {}},\n",
       "   'annotate': {'notes': ''},\n",
       "   'custom': {}},\n",
       "  'author': {'name': None, 'email': 'svc-qdev-tst@petroineos.co.uk'},\n",
       "  'thumbnails': {'full': '//img.datawrapper.de/rp0vZ/34fe82adf0f72accb0e1d3a4892fd968/full.png',\n",
       "   'plain': '//img.datawrapper.de/rp0vZ/34fe82adf0f72accb0e1d3a4892fd968/plain.png'},\n",
       "  'url': '/v3/charts/rp0vZ'}]"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chart_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "1c2fbb51",
   "metadata": {},
   "outputs": [],
   "source": [
    "chart_data_df = pd.DataFrame(chart_data)\n",
    "refinery_runs = chart_data_df[chart_data_df['title'] == 'planned_unplanned']['id'].iloc[:1]\n",
    "refinery_runs = refinery_runs.to_string(index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b9c1af44",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "\n",
    "dates = pd.date_range(\"2002-01-01\",  end='2024-03-01', freq=\"MS\")\n",
    "\n",
    "values = np.zeros(len(dates))\n",
    "\n",
    "# Set the value for March 2024 to 320\n",
    "values[dates.get_loc('2024-03-01')] = 320"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "bfccf8e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({'Date': dates, 'Value': values})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "3f984a6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "series = df.set_index('Date')['Value']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "8867d1a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "2002-01-01      0.0\n",
       "2002-02-01      0.0\n",
       "2002-03-01      0.0\n",
       "2002-04-01      0.0\n",
       "2002-05-01      0.0\n",
       "              ...  \n",
       "2023-11-01      0.0\n",
       "2023-12-01      0.0\n",
       "2024-01-01      0.0\n",
       "2024-02-01      0.0\n",
       "2024-03-01    320.0\n",
       "Name: Value, Length: 267, dtype: float64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8bfa7695",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2002-01-01      0.0\n",
       "2002-02-01      0.0\n",
       "2002-03-01      0.0\n",
       "2002-04-01      0.0\n",
       "2002-05-01      0.0\n",
       "              ...  \n",
       "2023-11-01      0.0\n",
       "2023-12-01      0.0\n",
       "2024-01-01      0.0\n",
       "2024-02-01      0.0\n",
       "2024-03-01    320.0\n",
       "Name: oil.analyst.germany.throughput.kbd, Length: 267, dtype: float64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name = f'oil.analyst.germany.throughput.kbd'\n",
    "tsa.update(name, series, 'Shrey Agarwal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "id": "4bd24bce",
   "metadata": {},
   "outputs": [],
   "source": [
    "token.export_chart(refinery_runs, unit='px', mode='rgb', width=None, plain=False, zoom=4, scale=1, border_width=20,\n",
    "                       output='png',\n",
    "                       filepath='S:/~Analysis Department/Projects/refinery-runs-report/Charts/refinery_run.png',\n",
    "                       display=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "3f3acfbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfl = pd.read_csv('dfl.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "7d7cfae8",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfl.set_index('date', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "10542fba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21/05/2024</td>\n",
       "      <td>-1.610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20/05/2024</td>\n",
       "      <td>-1.560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17/05/2024</td>\n",
       "      <td>-1.170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16/05/2024</td>\n",
       "      <td>-1.185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15/05/2024</td>\n",
       "      <td>-1.090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2366</th>\n",
       "      <td>08/01/2015</td>\n",
       "      <td>-1.600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2367</th>\n",
       "      <td>07/01/2015</td>\n",
       "      <td>-1.460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2368</th>\n",
       "      <td>06/01/2015</td>\n",
       "      <td>-1.355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2369</th>\n",
       "      <td>05/01/2015</td>\n",
       "      <td>-1.490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2370</th>\n",
       "      <td>02/01/2015</td>\n",
       "      <td>-1.770</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2371 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            date  price\n",
       "0     21/05/2024 -1.610\n",
       "1     20/05/2024 -1.560\n",
       "2     17/05/2024 -1.170\n",
       "3     16/05/2024 -1.185\n",
       "4     15/05/2024 -1.090\n",
       "...          ...    ...\n",
       "2366  08/01/2015 -1.600\n",
       "2367  07/01/2015 -1.460\n",
       "2368  06/01/2015 -1.355\n",
       "2369  05/01/2015 -1.490\n",
       "2370  02/01/2015 -1.770\n",
       "\n",
       "[2371 rows x 2 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "0eac290f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "79627b5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date\n",
    "from kpler.sdk.resources.refineries.overview import Overview\n",
    "overview_client = Overview(config)\n",
    "ref_kpler = overview_client.get(\n",
    "    zones=[\"Europe\"]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b1e36ca4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Start Date</th>\n",
       "      <th>End Date</th>\n",
       "      <th>Zones</th>\n",
       "      <th>Installations</th>\n",
       "      <th>Refinery</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Age (years)</th>\n",
       "      <th>NCI</th>\n",
       "      <th>Type</th>\n",
       "      <th>Status</th>\n",
       "      <th>Country</th>\n",
       "      <th>State</th>\n",
       "      <th>Startup</th>\n",
       "      <th>Shutdown</th>\n",
       "      <th>Events avg duration (days)</th>\n",
       "      <th>Planned (%)</th>\n",
       "      <th>Unplanned (%)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-06-12</td>\n",
       "      <td>2024-06-19</td>\n",
       "      <td>Andriivka</td>\n",
       "      <td>Shebel Refinery</td>\n",
       "      <td>Shebelinsky Refinery (Shebel)</td>\n",
       "      <td>Naftogaz</td>\n",
       "      <td>63</td>\n",
       "      <td>None</td>\n",
       "      <td>Other</td>\n",
       "      <td>Closed</td>\n",
       "      <td>Ukraine</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1960-06-29</td>\n",
       "      <td>2023-08-01</td>\n",
       "      <td>521</td>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-06-12</td>\n",
       "      <td>2024-06-19</td>\n",
       "      <td>Naples</td>\n",
       "      <td>Naples Refinery</td>\n",
       "      <td>Napoli Used Oil Re-Refinery</td>\n",
       "      <td>Eni</td>\n",
       "      <td>61</td>\n",
       "      <td>None</td>\n",
       "      <td>Other</td>\n",
       "      <td>Operational</td>\n",
       "      <td>Italy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1963-10-11</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-06-12</td>\n",
       "      <td>2024-06-19</td>\n",
       "      <td>Fos</td>\n",
       "      <td>La Mede</td>\n",
       "      <td>Provence (La Mede) Refinery</td>\n",
       "      <td>TotalEnergies SE</td>\n",
       "      <td>81</td>\n",
       "      <td>None</td>\n",
       "      <td>Other</td>\n",
       "      <td>Closed</td>\n",
       "      <td>France</td>\n",
       "      <td>South Coast France</td>\n",
       "      <td>1935-01-01</td>\n",
       "      <td>2016-11-28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-06-12</td>\n",
       "      <td>2024-06-19</td>\n",
       "      <td>Samara</td>\n",
       "      <td>Nikolaevka</td>\n",
       "      <td>Nikolaevka Refinery</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Simple</td>\n",
       "      <td>Operational</td>\n",
       "      <td>Russian Federation</td>\n",
       "      <td>Northern Russia</td>\n",
       "      <td>2014-06-14</td>\n",
       "      <td>NaT</td>\n",
       "      <td>216</td>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-06-12</td>\n",
       "      <td>2024-06-19</td>\n",
       "      <td>Tenerife</td>\n",
       "      <td>Tenerife Refinery</td>\n",
       "      <td>Tenerife Refinery</td>\n",
       "      <td>Compañía Española de Petróleos, S.A.U.</td>\n",
       "      <td>84</td>\n",
       "      <td>None</td>\n",
       "      <td>Other</td>\n",
       "      <td>Closed</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Canary Islands</td>\n",
       "      <td>1930-11-01</td>\n",
       "      <td>2014-06-15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186</th>\n",
       "      <td>2023-06-12</td>\n",
       "      <td>2024-06-19</td>\n",
       "      <td>Porto</td>\n",
       "      <td>Matosinhos Refinery</td>\n",
       "      <td>Matosinhos Refinery</td>\n",
       "      <td>Galp Energia</td>\n",
       "      <td>52</td>\n",
       "      <td>5.3</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Closed</td>\n",
       "      <td>Portugal</td>\n",
       "      <td>Portugal - Mainland</td>\n",
       "      <td>1969-01-01</td>\n",
       "      <td>2021-11-30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>2023-06-12</td>\n",
       "      <td>2024-06-19</td>\n",
       "      <td>Kochenevo</td>\n",
       "      <td>Kochenevskiy Refinery</td>\n",
       "      <td>Kochenevskiy Refinery</td>\n",
       "      <td>VPK-Oil LLC</td>\n",
       "      <td>9</td>\n",
       "      <td>3.3</td>\n",
       "      <td>Simple</td>\n",
       "      <td>Operational</td>\n",
       "      <td>Russian Federation</td>\n",
       "      <td>Northern Russia</td>\n",
       "      <td>2015-11-22</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>2023-06-12</td>\n",
       "      <td>2024-06-19</td>\n",
       "      <td>Apateu</td>\n",
       "      <td>Apateu Refinery</td>\n",
       "      <td>Apateu Refinery</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14</td>\n",
       "      <td>None</td>\n",
       "      <td>Other</td>\n",
       "      <td>Operational</td>\n",
       "      <td>Romania</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2010-06-14</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>189</th>\n",
       "      <td>2023-06-12</td>\n",
       "      <td>2024-06-19</td>\n",
       "      <td>Tarragona</td>\n",
       "      <td>ASESA</td>\n",
       "      <td>ASESA Asphalt Refinery</td>\n",
       "      <td>Repsol,Compañía Española de Petróleos, S.A.U.</td>\n",
       "      <td>59</td>\n",
       "      <td>None</td>\n",
       "      <td>Other</td>\n",
       "      <td>Operational</td>\n",
       "      <td>Spain</td>\n",
       "      <td>South Coast Spain</td>\n",
       "      <td>1965-07-21</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>2023-06-12</td>\n",
       "      <td>2024-06-19</td>\n",
       "      <td>Kaluga</td>\n",
       "      <td>Kaluga Condensate Fractionation Complex</td>\n",
       "      <td>Kaluga Condensate Fractionation Complex</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14</td>\n",
       "      <td>None</td>\n",
       "      <td>Other</td>\n",
       "      <td>Operational</td>\n",
       "      <td>Russian Federation</td>\n",
       "      <td>Northern Russia</td>\n",
       "      <td>2010-03-19</td>\n",
       "      <td>NaT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>191 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Start Date   End Date      Zones                            Installations  \\\n",
       "0   2023-06-12 2024-06-19  Andriivka                          Shebel Refinery   \n",
       "1   2023-06-12 2024-06-19     Naples                          Naples Refinery   \n",
       "2   2023-06-12 2024-06-19        Fos                                  La Mede   \n",
       "3   2023-06-12 2024-06-19     Samara                               Nikolaevka   \n",
       "4   2023-06-12 2024-06-19   Tenerife                        Tenerife Refinery   \n",
       "..         ...        ...        ...                                      ...   \n",
       "186 2023-06-12 2024-06-19      Porto                      Matosinhos Refinery   \n",
       "187 2023-06-12 2024-06-19  Kochenevo                    Kochenevskiy Refinery   \n",
       "188 2023-06-12 2024-06-19     Apateu                          Apateu Refinery   \n",
       "189 2023-06-12 2024-06-19  Tarragona                                    ASESA   \n",
       "190 2023-06-12 2024-06-19     Kaluga  Kaluga Condensate Fractionation Complex   \n",
       "\n",
       "                                    Refinery  \\\n",
       "0              Shebelinsky Refinery (Shebel)   \n",
       "1                Napoli Used Oil Re-Refinery   \n",
       "2                Provence (La Mede) Refinery   \n",
       "3                        Nikolaevka Refinery   \n",
       "4                          Tenerife Refinery   \n",
       "..                                       ...   \n",
       "186                      Matosinhos Refinery   \n",
       "187                    Kochenevskiy Refinery   \n",
       "188                          Apateu Refinery   \n",
       "189                   ASESA Asphalt Refinery   \n",
       "190  Kaluga Condensate Fractionation Complex   \n",
       "\n",
       "                                              Owner  Age (years)   NCI  \\\n",
       "0                                          Naftogaz           63  None   \n",
       "1                                               Eni           61  None   \n",
       "2                                  TotalEnergies SE           81  None   \n",
       "3                                               NaN           10   1.0   \n",
       "4           Compañía Española de Petróleos, S.A.U.            84  None   \n",
       "..                                              ...          ...   ...   \n",
       "186                                    Galp Energia           52   5.3   \n",
       "187                                     VPK-Oil LLC            9   3.3   \n",
       "188                                             NaN           14  None   \n",
       "189  Repsol,Compañía Española de Petróleos, S.A.U.            59  None   \n",
       "190                                             NaN           14  None   \n",
       "\n",
       "       Type       Status             Country                State    Startup  \\\n",
       "0     Other       Closed             Ukraine                  NaN 1960-06-29   \n",
       "1     Other  Operational               Italy                  NaN 1963-10-11   \n",
       "2     Other       Closed              France   South Coast France 1935-01-01   \n",
       "3    Simple  Operational  Russian Federation      Northern Russia 2014-06-14   \n",
       "4     Other       Closed               Spain       Canary Islands 1930-11-01   \n",
       "..      ...          ...                 ...                  ...        ...   \n",
       "186  Medium       Closed            Portugal  Portugal - Mainland 1969-01-01   \n",
       "187  Simple  Operational  Russian Federation      Northern Russia 2015-11-22   \n",
       "188   Other  Operational             Romania                  NaN 2010-06-14   \n",
       "189   Other  Operational               Spain    South Coast Spain 1965-07-21   \n",
       "190   Other  Operational  Russian Federation      Northern Russia 2010-03-19   \n",
       "\n",
       "      Shutdown  Events avg duration (days)  Planned (%)  Unplanned (%)  \n",
       "0   2023-08-01                         521            0            100  \n",
       "1          NaT                           0            0              0  \n",
       "2   2016-11-28                           0            0              0  \n",
       "3          NaT                         216          100              0  \n",
       "4   2014-06-15                           0            0              0  \n",
       "..         ...                         ...          ...            ...  \n",
       "186 2021-11-30                           0            0              0  \n",
       "187        NaT                           0            0              0  \n",
       "188        NaT                           0            0              0  \n",
       "189        NaT                           0            0              0  \n",
       "190        NaT                           0            0              0  \n",
       "\n",
       "[191 rows x 17 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ref_kpler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "758f0fb8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "2c3f1746",
   "metadata": {},
   "outputs": [],
   "source": [
    "import plotly.express as px"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "7716ea66",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfl['DayOfYear'] = dfl['date'].dt.dayofyear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "b394ca25",
   "metadata": {},
   "outputs": [],
   "source": [
    "seasonality = dfl.groupby('DayOfYear')['price'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "0dcfc73d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([            nan,  1.10625000e-01,  9.65625000e-01, -1.59357143e+00,\n",
       "       -6.00000000e-02, -3.59375000e-01,  1.63916667e+00,  7.70833333e-01,\n",
       "       -1.99285714e-01, -1.33000000e-01, -8.00000000e-02, -2.75000000e-01,\n",
       "       -5.38571429e-01, -4.34166667e-01, -2.64285714e-01, -5.52857143e-01,\n",
       "       -8.14285714e-02, -8.81250000e-02, -2.25000000e-01, -6.55000000e-01,\n",
       "       -4.00000000e-01, -2.64285714e-01, -2.25000000e-01,  2.44285714e-01,\n",
       "        1.15000000e-01, -2.15625000e-01, -5.70000000e-01, -3.70000000e-01,\n",
       "       -4.21428571e-01, -5.19285714e-01, -5.64285714e-02, -7.36000000e-01,\n",
       "       -1.22500000e-01,  7.87500000e-01, -2.07375000e+00,  1.94000000e-01,\n",
       "       -1.11916667e+00, -1.25000000e-01,  7.64285714e-01, -4.91666667e-01,\n",
       "        5.79166667e-01, -4.64375000e-01, -7.91666667e-02, -9.50000000e-02,\n",
       "        6.66428571e-01,  5.60000000e-01,  4.91250000e-01,  3.13571429e-01,\n",
       "        4.95000000e-01,  1.18571429e-01,  2.57142857e-02,  6.50000000e-01,\n",
       "        3.05000000e-01,  2.51875000e-01,  1.17142857e-01,  3.24166667e-01,\n",
       "        3.28571429e-02, -1.03571429e-01,  1.05000000e-01, -6.40833333e-01,\n",
       "        4.64285714e-02,  2.73571429e-01, -3.75000000e-01, -1.07142857e+00,\n",
       "       -5.19000000e-01, -8.60000000e-01,  7.42857143e-01, -4.40000000e-01,\n",
       "        8.47500000e-01, -1.30000000e-01, -5.48333333e-01, -7.05833333e-01,\n",
       "        2.13571429e-01,  2.09375000e-01,  8.25000000e-02, -2.57142857e-02,\n",
       "        1.05000000e-01, -9.70714286e-01, -1.02428571e+00,  4.00000000e-02,\n",
       "        1.25000000e-01, -2.18750000e-01, -5.38571429e-01, -4.96666667e-01,\n",
       "       -1.10166667e+00, -1.20642857e+00, -5.45714286e-01, -5.40714286e-01,\n",
       "       -5.02500000e-01, -8.88571429e-01, -1.49812500e+00,  3.73333333e-01,\n",
       "        2.07500000e-01,  2.06875000e-01, -3.00000000e-02, -1.77333333e+00,\n",
       "        1.33583333e+00,  3.82500000e-01, -2.35000000e-01,  7.76428571e-01,\n",
       "       -5.66000000e-01, -3.67857143e-01, -2.97142857e-01, -5.77000000e-01,\n",
       "       -2.57700000e+00, -1.75928571e+00, -1.42333333e+00, -1.26750000e+00,\n",
       "       -2.37857143e-01, -6.04375000e-01, -1.90928571e+00, -2.47700000e+00,\n",
       "       -1.40642857e+00, -1.08642857e+00, -1.02000000e+00, -3.96250000e-01,\n",
       "       -5.82500000e-01, -1.33214286e+00, -1.83083333e+00, -1.36142857e+00,\n",
       "       -1.37125000e+00, -4.90000000e-01, -2.93571429e-01,  3.93571429e-01,\n",
       "       -6.50000000e-02, -1.38500000e+00,  1.37785714e+00,  4.79000000e-01,\n",
       "       -1.42142857e-01,  7.45714286e-01, -1.06083333e+00,  1.87500000e-01,\n",
       "        6.60000000e-02, -3.56428571e-01, -5.57142857e-01, -1.29285714e-01,\n",
       "        1.28750000e-01, -2.83750000e-01, -2.75714286e-01, -1.50000000e-01,\n",
       "       -5.43571429e-01, -6.85000000e-01,  4.16666667e-02,  2.33571429e-01,\n",
       "        9.08333333e-02, -2.47500000e-01, -4.46000000e-01, -6.06000000e-01,\n",
       "       -6.32500000e-01, -2.33333333e-02, -1.28000000e-01, -9.94166667e-01,\n",
       "       -4.38571429e-01, -3.00714286e-01,  1.16428571e-01, -2.30100000e+00,\n",
       "       -3.21875000e-01,  9.88571429e-01, -8.84166667e-01,  1.35714286e-01,\n",
       "        7.72500000e-01, -5.69285714e-01,  9.50000000e-02,  6.59166667e-01,\n",
       "        5.05714286e-01,  2.13571429e-01, -2.14285714e-03,  3.42500000e-01,\n",
       "       -8.36666667e-01, -7.59166667e-01,  5.44166667e-01,  2.80000000e-01,\n",
       "       -1.57857143e-01,  4.21428571e-02,  5.32500000e-01, -6.23333333e-01,\n",
       "       -7.70833333e-01,  4.53333333e-01,  9.57142857e-02,  1.40000000e-01,\n",
       "        5.07857143e-01, -5.78333333e-01,  3.46428571e-01,  6.35000000e-01,\n",
       "       -4.68333333e-01, -2.41300000e+00, -4.05625000e-01,  1.30833333e+00,\n",
       "       -6.10714286e-01, -3.36428571e-01, -9.08333333e-02,  7.85714286e-03,\n",
       "       -6.36428571e-01,  6.20000000e-01,  1.04285714e+00,  1.61500000e+00,\n",
       "       -3.08333333e-01, -4.40833333e-01,  1.08916667e+00,  6.12142857e-01,\n",
       "        5.75000000e-01,  6.32142857e-01,  6.00833333e-01, -3.28333333e-01,\n",
       "       -1.60000000e-01,  4.20833333e-01,  3.50714286e-01,  4.50000000e-01,\n",
       "        3.71428571e-01,  3.00000000e-01, -2.80833333e-01, -3.55833333e-01,\n",
       "       -5.42000000e-01,  2.65000000e-01,  6.15625000e-01, -2.02500000e-01,\n",
       "       -1.56642857e+00, -2.78571429e-02,  1.20250000e+00,  5.12857143e-01,\n",
       "       -2.57500000e-01, -2.74166667e-01,  1.71428571e-01, -4.85833333e-01,\n",
       "       -7.14166667e-01, -4.38333333e-01,  3.19166667e-01,  2.75000000e-01,\n",
       "       -2.27142857e-01, -1.07857143e-01, -3.00000000e-01, -5.91666667e-01,\n",
       "       -3.25833333e-01, -2.71666667e-01, -3.18571429e-01, -4.65714286e-01,\n",
       "       -3.92142857e-01, -4.43000000e-01, -5.32000000e-01, -5.25000000e-01,\n",
       "        3.20000000e-02, -2.04000000e-01, -5.41666667e-02, -9.94166667e-01,\n",
       "        3.65625000e-01,  7.31250000e-01, -6.62500000e-01, -1.09357143e+00,\n",
       "       -1.50000000e-02, -4.45000000e-01,  9.10000000e-01, -4.39000000e-01,\n",
       "        3.03571429e-01, -1.84285714e-01, -3.08333333e-01, -1.82500000e-01,\n",
       "       -1.60714286e-01, -3.01428571e-01, -7.00000000e-01, -4.45000000e-01,\n",
       "        7.08333333e-02,  2.93000000e-01,  5.71428571e-03, -3.93571429e-01,\n",
       "       -4.24285714e-01, -6.82500000e-01, -3.56666667e-01, -6.75000000e-02,\n",
       "       -4.33333333e-02,  1.69285714e-01,  1.27857143e-01, -2.08571429e-01,\n",
       "       -4.45833333e-01, -4.69285714e-01,  4.95714286e-01,  3.94285714e-01,\n",
       "       -6.32500000e-01,  3.64285714e-01,  6.25833333e-01, -5.06428571e-01,\n",
       "        7.46428571e-01, -4.44166667e-01,  6.71666667e-01, -6.66666667e-03,\n",
       "       -5.73333333e-01,  3.68333333e-01, -5.55000000e-01, -4.87500000e-01,\n",
       "        1.44166667e-01,  2.10000000e-01,  7.21428571e-02, -1.52857143e-01,\n",
       "       -4.64285714e-01, -8.38333333e-01, -5.67500000e-01,  4.66666667e-02,\n",
       "       -2.27500000e-01, -3.60714286e-01, -4.90000000e-01, -7.32142857e-01,\n",
       "       -1.04500000e+00, -7.32500000e-01, -4.05000000e-01, -5.94166667e-01,\n",
       "       -5.61428571e-01,  5.42500000e-01,  5.97500000e-01, -2.61250000e-01,\n",
       "       -1.35625000e-01, -1.20250000e+00,  1.07500000e+00,  7.30000000e-01,\n",
       "       -5.42857143e-02,  4.53571429e-01, -4.41000000e-01, -2.90714286e-01,\n",
       "       -2.82500000e-01, -1.55833333e-01, -3.20714286e-01, -8.17142857e-01,\n",
       "       -4.77142857e-01, -4.13333333e-01, -8.25833333e-01, -5.35833333e-01,\n",
       "       -1.17500000e-01, -9.92857143e-02, -4.89285714e-01, -4.70714286e-01,\n",
       "       -3.74166667e-01, -7.11666667e-01, -4.45000000e-01, -1.08333333e-01,\n",
       "       -4.50000000e-02, -5.89285714e-01, -3.85000000e-01, -1.78333333e-01,\n",
       "       -1.10000000e-01, -2.48125000e-01, -1.50000000e-02, -9.86428571e-01,\n",
       "        1.18642857e+00,  3.57000000e-01, -7.64285714e-02,  2.12857143e-01,\n",
       "       -1.03416667e+00,  2.91666667e-01,  8.85714286e-02, -2.01428571e-01,\n",
       "       -8.78571429e-02,  1.25000000e-01, -2.73333333e-01,  2.20000000e-01,\n",
       "        5.91666667e-02, -2.12857143e-01, -6.92142857e-01, -4.11428571e-01,\n",
       "       -2.90833333e-01, -1.02000000e-01, -3.85000000e-01,  0.00000000e+00,\n",
       "       -2.00000000e-02, -7.40000000e-01, -5.50833333e-01, -7.82500000e-01,\n",
       "       -4.47500000e-01, -4.75000000e-01])"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "seasonality.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "69604eea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Mean Value')"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dfl['DayOfYear'] = dfl['date'].dt.dayofyear\n",
    "dfl['year'] = dfl['date'].dt.year\n",
    "\n",
    "# Create the plot\n",
    "seasonality = dfl.groupby('DayOfYear')['price'].mean()\n",
    "\n",
    "# Step 3: Plot the yearly seasonality chart on a daily basis\n",
    "plt.figure(figsize=(14, 7))\n",
    "plt.plot(seasonality.index, seasonality.values)\n",
    "plt.title('Yearly Seasonality Chart on Daily Basis')\n",
    "plt.xlabel('Day of the Year')\n",
    "plt.ylabel('Mean Value')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "eebf96ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "Africa_floating = ['Angola','Benin','Cape Verde',\n",
    "                   'Cameroon',\n",
    "                   'Chad',\n",
    "                   'Republic of the Congo',\n",
    "                   'Democratic Republic of the Congo',\n",
    "                   'Ivory Coast',\n",
    "                   'Djibouti',\n",
    "                   'Equatorial Guinea',\n",
    "                   'Eritrea',\n",
    "                   'Gabon',\n",
    "                   'Ghana',\n",
    "                   'Guinea-Bissau',\n",
    "                   'Liberia',\n",
    "                   'Mozambique',\n",
    "                   'Namibia',\n",
    "                   'Nigeria',\n",
    "                   'Reunion',\n",
    "                   'Senegal',\n",
    "                   'Sierra Leone',\n",
    "                   'South Africa',\n",
    "                   'Sudan',\n",
    "                   'Tanzania',\n",
    "                   'Togo',\n",
    "                   ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "49d12e0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def floating_get_africa() :\n",
    "    print(f'getting data for Africa')\n",
    "    fs = fleet_metrics_client.get(\n",
    "        metric=FleetMetricsAlgo.FloatingStorage,\n",
    "        zones=Africa_floating,\n",
    "        unit=FleetMetricsMeasurementUnit.BBL,\n",
    "        period=FleetMetricsPeriod.Daily,\n",
    "        split=FleetMetricsSplit.Total,\n",
    "        floating_storage_duration_min='7',\n",
    "        floating_storage_duration_max='inf',\n",
    "        products=['Crude/Co']\n",
    "    ).set_index('Date')\n",
    "    return fs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "5f433161",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting data for Africa\n"
     ]
    }
   ],
   "source": [
    "aa = floating_get_africa()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "0f903dca",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/05/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/05/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/05/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/05/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/05/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/05/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/05/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/04/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/03/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/02/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/01/2024' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/12/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/11/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/10/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/09/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/08/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/07/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/06/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/05/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/04/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/03/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/02/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/01/2023' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/12/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/11/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/10/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/09/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/08/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/07/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/06/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/05/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/04/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/03/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/02/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/01/2022' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/12/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/11/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/10/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/09/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/08/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/07/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/06/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/05/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/04/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/03/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/02/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/02/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/02/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/02/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/02/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/02/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/02/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/02/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/02/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/02/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/01/2021' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/11/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/07/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/03/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '31/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '25/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '24/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '18/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '17/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '30/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '29/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '28/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '27/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '26/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '23/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '22/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '21/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '20/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '19/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '16/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '15/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '14/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n",
      "c:\\conda\\lib\\site-packages\\pandas\\io\\parsers\\base_parser.py:1070: UserWarning:\n",
      "\n",
      "Parsing '13/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Load your time series data\n",
    "# Assuming you have a CSV file with 'Date' and 'Value' columns\n",
    "data = pd.read_csv('dfl.csv', parse_dates=['date'], index_col='date')\n",
    "\n",
    "# Step 2: Resample the data to daily frequency and compute mean values for each day of the year\n",
    "daily_data = data.resample('D').mean()\n",
    "daily_data.index = pd.to_datetime(daily_data.index)\n",
    "# Step 3: Extract day and month for grouping\n",
    "daily_data['Day'] = daily_data.index.day\n",
    "daily_data['Month'] = daily_data.index.month\n",
    "\n",
    "# Group by month and day, then calculate the mean\n",
    "seasonality = daily_data.groupby(['Month', 'Day'])['price'].mean()\n",
    "\n",
    "# Unstack the MultiIndex to get a DataFrame suitable for plotting\n",
    "seasonality = seasonality.unstack(level=0)\n",
    "\n",
    "# Step 4: Plot the daily seasonality chart\n",
    "plt.figure(figsize=(14, 7))\n",
    "for month in seasonality.columns:\n",
    "    plt.plot(seasonality.index, seasonality[month], label=f'Month {month}')\n",
    "    \n",
    "plt.title('Daily Seasonality Chart')\n",
    "plt.xlabel('Day of the Month')\n",
    "plt.ylabel('Mean Value')\n",
    "plt.legend(title='Month')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "450881f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import urllib.request, json\n",
    "\n",
    "try:\n",
    "    url = \"https://api.genscape.com/transportation/oil/v1/pipelines?format=json\"\n",
    "\n",
    "    hdr ={\n",
    "    # Request headers\n",
    "    'Accept': 'application/json',\n",
    "    'Cache-Control': 'no-cache',\n",
    "    'Gen-Api-Key': '270e1528526244d7ab9bb6166de60b6f',\n",
    "    }\n",
    "\n",
    "    req = urllib.request.Request(url, headers=hdr)\n",
    "\n",
    "    req.get_method = lambda: 'GET'\n",
    "    response = urllib.request.urlopen(req)\n",
    "    code = response.getcode()\n",
    "    elevations = response.read()\n",
    "except Exception as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "da3f85db",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f981a845",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = json.loads(elevations)\n",
    "df = pd.DataFrame(data['data'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2c7059dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pipelineId</th>\n",
       "      <th>name</th>\n",
       "      <th>startPumpStation</th>\n",
       "      <th>finishPumpStation</th>\n",
       "      <th>diameter</th>\n",
       "      <th>direction</th>\n",
       "      <th>capacity</th>\n",
       "      <th>commodity</th>\n",
       "      <th>lineFill</th>\n",
       "      <th>onlineDate</th>\n",
       "      <th>effectiveDate</th>\n",
       "      <th>operator</th>\n",
       "      <th>delayed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Basin</td>\n",
       "      <td>Jal</td>\n",
       "      <td>Cushing - Basin</td>\n",
       "      <td>24</td>\n",
       "      <td>Cushing Incoming</td>\n",
       "      <td>550000</td>\n",
       "      <td>Oil</td>\n",
       "      <td>1517452</td>\n",
       "      <td>2009-09-17T19:30:00Z</td>\n",
       "      <td>2009-08-12T05:00:00Z</td>\n",
       "      <td>PAA</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Seaway South</td>\n",
       "      <td>Cushing - Seaway</td>\n",
       "      <td>Freeport</td>\n",
       "      <td>30</td>\n",
       "      <td>Cushing Outgoing</td>\n",
       "      <td>400000</td>\n",
       "      <td>Oil</td>\n",
       "      <td>2354543</td>\n",
       "      <td>2009-07-26T15:30:00Z</td>\n",
       "      <td>2009-08-12T05:00:00Z</td>\n",
       "      <td>Enterprise</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Spearhead</td>\n",
       "      <td>Flanagan</td>\n",
       "      <td>Cushing - Spearhead</td>\n",
       "      <td>24</td>\n",
       "      <td>Cushing Incoming</td>\n",
       "      <td>193000</td>\n",
       "      <td>Oil</td>\n",
       "      <td>1713008</td>\n",
       "      <td>2009-07-26T15:30:00Z</td>\n",
       "      <td>2009-08-12T05:00:00Z</td>\n",
       "      <td>Enbridge</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>White Cliffs - Into Cushing</td>\n",
       "      <td>Platteville</td>\n",
       "      <td>Cushing - White Cliffs</td>\n",
       "      <td>12</td>\n",
       "      <td>Cushing Incoming</td>\n",
       "      <td>90000</td>\n",
       "      <td>Oil</td>\n",
       "      <td>386081</td>\n",
       "      <td>2009-07-26T16:00:00Z</td>\n",
       "      <td>2009-08-12T05:00:00Z</td>\n",
       "      <td>Energy Transfer Partners</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Centurion North</td>\n",
       "      <td>Slaughter</td>\n",
       "      <td>Cushing - Centurion</td>\n",
       "      <td>16</td>\n",
       "      <td>Cushing Incoming</td>\n",
       "      <td>110000</td>\n",
       "      <td>Oil</td>\n",
       "      <td>488940</td>\n",
       "      <td>2010-05-19T06:00:00Z</td>\n",
       "      <td>2010-06-18T05:00:00Z</td>\n",
       "      <td>Energy Transfer Partners</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>388</td>\n",
       "      <td>Lines 6,14</td>\n",
       "      <td>Superior</td>\n",
       "      <td>Griffith</td>\n",
       "      <td>42</td>\n",
       "      <td>Other</td>\n",
       "      <td>1010000</td>\n",
       "      <td>Oil</td>\n",
       "      <td>4482160</td>\n",
       "      <td>2023-06-01T05:00:00Z</td>\n",
       "      <td>2023-11-03T16:29:49Z</td>\n",
       "      <td>Enbridge</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>392</td>\n",
       "      <td>Ingolstadt–Kralupy–Litvínov</td>\n",
       "      <td>Ingolstadt</td>\n",
       "      <td>Nelahozeves Storage</td>\n",
       "      <td>28</td>\n",
       "      <td>Other</td>\n",
       "      <td>221000</td>\n",
       "      <td>Oil</td>\n",
       "      <td>689006</td>\n",
       "      <td>2023-06-09T05:00:00Z</td>\n",
       "      <td>2023-10-19T20:29:59Z</td>\n",
       "      <td>MERO</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>396</td>\n",
       "      <td>Rostock to Schwedt</td>\n",
       "      <td>Rostock</td>\n",
       "      <td>Heinersdorf</td>\n",
       "      <td>16</td>\n",
       "      <td>Other</td>\n",
       "      <td>141000</td>\n",
       "      <td>Oil</td>\n",
       "      <td>165445</td>\n",
       "      <td>2023-10-09T05:00:00Z</td>\n",
       "      <td>2024-02-23T20:51:48Z</td>\n",
       "      <td>PCK</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>397</td>\n",
       "      <td>Schwedt to Leuna</td>\n",
       "      <td>Heinersdorf</td>\n",
       "      <td>Leuna</td>\n",
       "      <td>24</td>\n",
       "      <td>Other</td>\n",
       "      <td>271000</td>\n",
       "      <td>Oil</td>\n",
       "      <td>2458049</td>\n",
       "      <td>2022-04-20T05:00:00Z</td>\n",
       "      <td>2024-02-23T20:52:22Z</td>\n",
       "      <td>PCK</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>401</td>\n",
       "      <td>Adria–Wien</td>\n",
       "      <td>Wurmlach</td>\n",
       "      <td>Schwechat</td>\n",
       "      <td>18</td>\n",
       "      <td>Other</td>\n",
       "      <td>160000</td>\n",
       "      <td>Oil</td>\n",
       "      <td>433701</td>\n",
       "      <td>2024-02-01T05:00:00Z</td>\n",
       "      <td>2024-02-23T20:51:26Z</td>\n",
       "      <td>Adria-Wien Pipeline</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>92 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    pipelineId                         name  startPumpStation  \\\n",
       "0            1                        Basin               Jal   \n",
       "1            2                 Seaway South  Cushing - Seaway   \n",
       "2            3                    Spearhead          Flanagan   \n",
       "3            4  White Cliffs - Into Cushing       Platteville   \n",
       "4            5              Centurion North         Slaughter   \n",
       "..         ...                          ...               ...   \n",
       "87         388                   Lines 6,14          Superior   \n",
       "88         392  Ingolstadt–Kralupy–Litvínov        Ingolstadt   \n",
       "89         396           Rostock to Schwedt           Rostock   \n",
       "90         397             Schwedt to Leuna       Heinersdorf   \n",
       "91         401                   Adria–Wien          Wurmlach   \n",
       "\n",
       "         finishPumpStation  diameter         direction  capacity commodity  \\\n",
       "0          Cushing - Basin        24  Cushing Incoming    550000       Oil   \n",
       "1                 Freeport        30  Cushing Outgoing    400000       Oil   \n",
       "2      Cushing - Spearhead        24  Cushing Incoming    193000       Oil   \n",
       "3   Cushing - White Cliffs        12  Cushing Incoming     90000       Oil   \n",
       "4      Cushing - Centurion        16  Cushing Incoming    110000       Oil   \n",
       "..                     ...       ...               ...       ...       ...   \n",
       "87                Griffith        42             Other   1010000       Oil   \n",
       "88     Nelahozeves Storage        28             Other    221000       Oil   \n",
       "89             Heinersdorf        16             Other    141000       Oil   \n",
       "90                   Leuna        24             Other    271000       Oil   \n",
       "91               Schwechat        18             Other    160000       Oil   \n",
       "\n",
       "    lineFill            onlineDate         effectiveDate  \\\n",
       "0    1517452  2009-09-17T19:30:00Z  2009-08-12T05:00:00Z   \n",
       "1    2354543  2009-07-26T15:30:00Z  2009-08-12T05:00:00Z   \n",
       "2    1713008  2009-07-26T15:30:00Z  2009-08-12T05:00:00Z   \n",
       "3     386081  2009-07-26T16:00:00Z  2009-08-12T05:00:00Z   \n",
       "4     488940  2010-05-19T06:00:00Z  2010-06-18T05:00:00Z   \n",
       "..       ...                   ...                   ...   \n",
       "87   4482160  2023-06-01T05:00:00Z  2023-11-03T16:29:49Z   \n",
       "88    689006  2023-06-09T05:00:00Z  2023-10-19T20:29:59Z   \n",
       "89    165445  2023-10-09T05:00:00Z  2024-02-23T20:51:48Z   \n",
       "90   2458049  2022-04-20T05:00:00Z  2024-02-23T20:52:22Z   \n",
       "91    433701  2024-02-01T05:00:00Z  2024-02-23T20:51:26Z   \n",
       "\n",
       "                    operator  delayed  \n",
       "0                        PAA    False  \n",
       "1                 Enterprise    False  \n",
       "2                   Enbridge    False  \n",
       "3   Energy Transfer Partners    False  \n",
       "4   Energy Transfer Partners    False  \n",
       "..                       ...      ...  \n",
       "87                  Enbridge    False  \n",
       "88                      MERO    False  \n",
       "89                       PCK    False  \n",
       "90                       PCK    False  \n",
       "91       Adria-Wien Pipeline    False  \n",
       "\n",
       "[92 rows x 13 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
